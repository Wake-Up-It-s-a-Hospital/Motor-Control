
motor6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080095f8  080095f8  0000a5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a14  08009a14  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009a14  08009a14  0000aa14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a1c  08009a1c  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a1c  08009a1c  0000aa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a20  08009a20  0000aa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08009a24  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200001e4  08009c08  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08009c08  0000b5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d5  00000000  00000000  0000b20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e7  00000000  00000000  000189e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0001acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a79  00000000  00000000  0001ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ab5  00000000  00000000  0001c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd0c  00000000  00000000  00034f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c515  00000000  00000000  00044c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e48  00000000  00000000  000d11dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000d6024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080095dc 	.word	0x080095dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080095dc 	.word	0x080095dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d86:	2afd      	cmp	r2, #253	@ 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	@ 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	@ 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	@ 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_d2lz>:
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	2200      	movs	r2, #0
 80010c4:	2300      	movs	r3, #0
 80010c6:	4604      	mov	r4, r0
 80010c8:	460d      	mov	r5, r1
 80010ca:	f7ff fc77 	bl	80009bc <__aeabi_dcmplt>
 80010ce:	b928      	cbnz	r0, 80010dc <__aeabi_d2lz+0x1c>
 80010d0:	4620      	mov	r0, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010d8:	f000 b80a 	b.w	80010f0 <__aeabi_d2ulz>
 80010dc:	4620      	mov	r0, r4
 80010de:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010e2:	f000 f805 	bl	80010f0 <__aeabi_d2ulz>
 80010e6:	4240      	negs	r0, r0
 80010e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	bf00      	nop

080010f0 <__aeabi_d2ulz>:
 80010f0:	b5d0      	push	{r4, r6, r7, lr}
 80010f2:	2200      	movs	r2, #0
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <__aeabi_d2ulz+0x34>)
 80010f6:	4606      	mov	r6, r0
 80010f8:	460f      	mov	r7, r1
 80010fa:	f7ff f9ed 	bl	80004d8 <__aeabi_dmul>
 80010fe:	f7ff fc9b 	bl	8000a38 <__aeabi_d2uiz>
 8001102:	4604      	mov	r4, r0
 8001104:	f7ff f96e 	bl	80003e4 <__aeabi_ui2d>
 8001108:	2200      	movs	r2, #0
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <__aeabi_d2ulz+0x38>)
 800110c:	f7ff f9e4 	bl	80004d8 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4630      	mov	r0, r6
 8001116:	4639      	mov	r1, r7
 8001118:	f7ff f826 	bl	8000168 <__aeabi_dsub>
 800111c:	f7ff fc8c 	bl	8000a38 <__aeabi_d2uiz>
 8001120:	4621      	mov	r1, r4
 8001122:	bdd0      	pop	{r4, r6, r7, pc}
 8001124:	3df00000 	.word	0x3df00000
 8001128:	41f00000 	.word	0x41f00000

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b39      	ldr	r3, [pc, #228]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a38      	ldr	r2, [pc, #224]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b36      	ldr	r3, [pc, #216]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a32      	ldr	r2, [pc, #200]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b30      	ldr	r3, [pc, #192]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a2c      	ldr	r2, [pc, #176]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b27      	ldr	r3, [pc, #156]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a26      	ldr	r2, [pc, #152]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f648 0130 	movw	r1, #34864	@ 0x8830
 80011a6:	4821      	ldr	r0, [pc, #132]	@ (800122c <MX_GPIO_Init+0x100>)
 80011a8:	f002 f87c 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f649 0101 	movw	r1, #38913	@ 0x9801
 80011b2:	481f      	ldr	r0, [pc, #124]	@ (8001230 <MX_GPIO_Init+0x104>)
 80011b4:	f002 f876 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <MX_GPIO_Init+0x108>)
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4619      	mov	r1, r3
 80011cc:	481a      	ldr	r0, [pc, #104]	@ (8001238 <MX_GPIO_Init+0x10c>)
 80011ce:	f001 fee5 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_11|GPIO_PIN_15;
 80011d2:	f648 0330 	movw	r3, #34864	@ 0x8830
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4810      	ldr	r0, [pc, #64]	@ (800122c <MX_GPIO_Init+0x100>)
 80011ec:	f001 fed6 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB11 PB12 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80011f0:	f649 0301 	movw	r3, #38913	@ 0x9801
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2302      	movs	r3, #2
 8001200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4619      	mov	r1, r3
 8001208:	4809      	ldr	r0, [pc, #36]	@ (8001230 <MX_GPIO_Init+0x104>)
 800120a:	f001 fec7 	bl	8002f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2028      	movs	r0, #40	@ 0x28
 8001214:	f001 fdd9 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001218:	2028      	movs	r0, #40	@ 0x28
 800121a:	f001 fdf2 	bl	8002e02 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	40010800 	.word	0x40010800
 8001230:	40010c00 	.word	0x40010c00
 8001234:	10110000 	.word	0x10110000
 8001238:	40011000 	.word	0x40011000

0800123c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a72      	ldr	r2, [pc, #456]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	f040 80de 	bne.w	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		if (ultra_delay1 == 1) {
 8001250:	4b71      	ldr	r3, [pc, #452]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d11d      	bne.n	8001294 <HAL_TIM_PeriodElapsedCallback+0x58>
			if (ultra_count >= 10) {
 8001258:	4b70      	ldr	r3, [pc, #448]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b09      	cmp	r3, #9
 800125e:	d913      	bls.n	8001288 <HAL_TIM_PeriodElapsedCallback+0x4c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2110      	movs	r1, #16
 8001264:	486e      	ldr	r0, [pc, #440]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001266:	f002 f81d 	bl	80032a4 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800126a:	4b6e      	ldr	r3, [pc, #440]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b6c      	ldr	r3, [pc, #432]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0202 	orr.w	r2, r2, #2
 8001278:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 800127a:	4b68      	ldr	r3, [pc, #416]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
				ultra_delay1 = 0;
 8001280:	4b65      	ldr	r3, [pc, #404]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		}
		else if (sensor_part5 == 1) {
			delay_count++;
		}
	}
}
 8001286:	e0c1      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 8001288:	4b64      	ldr	r3, [pc, #400]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a63      	ldr	r2, [pc, #396]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	e0bb      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (ultra_delay2 == 1) {
 8001294:	4b64      	ldr	r3, [pc, #400]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d11d      	bne.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x9c>
			if (ultra_count >= 10) {
 800129c:	4b5f      	ldr	r3, [pc, #380]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	d913      	bls.n	80012cc <HAL_TIM_PeriodElapsedCallback+0x90>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2101      	movs	r1, #1
 80012a8:	4860      	ldr	r0, [pc, #384]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012aa:	f001 fffb 	bl	80032a4 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
 80012ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0204 	orr.w	r2, r2, #4
 80012bc:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 80012be:	4b57      	ldr	r3, [pc, #348]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
				ultra_delay2 = 0;
 80012c4:	4b58      	ldr	r3, [pc, #352]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	e09f      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 80012cc:	4b53      	ldr	r3, [pc, #332]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	4a52      	ldr	r2, [pc, #328]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	e099      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (ultra_delay3 == 1) {
 80012d8:	4b55      	ldr	r3, [pc, #340]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d11e      	bne.n	800131e <HAL_TIM_PeriodElapsedCallback+0xe2>
			if (ultra_count >= 10) {
 80012e0:	4b4e      	ldr	r3, [pc, #312]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b09      	cmp	r3, #9
 80012e6:	d914      	bls.n	8001312 <HAL_TIM_PeriodElapsedCallback+0xd6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012ee:	484f      	ldr	r0, [pc, #316]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012f0:	f001 ffd8 	bl	80032a4 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
 80012f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0208 	orr.w	r2, r2, #8
 8001302:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 8001304:	4b45      	ldr	r3, [pc, #276]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
				ultra_delay3 = 0;
 800130a:	4b49      	ldr	r3, [pc, #292]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
}
 8001310:	e07c      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 8001312:	4b42      	ldr	r3, [pc, #264]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a40      	ldr	r2, [pc, #256]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	e076      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (ultra_delay4 == 1) {
 800131e:	4b45      	ldr	r3, [pc, #276]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d11e      	bne.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x128>
			if (ultra_count >= 10) {
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b09      	cmp	r3, #9
 800132c:	d914      	bls.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x11c>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001334:	483d      	ldr	r0, [pc, #244]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001336:	f001 ffb5 	bl	80032a4 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800133a:	4b3f      	ldr	r3, [pc, #252]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0202 	orr.w	r2, r2, #2
 8001348:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 800134a:	4b34      	ldr	r3, [pc, #208]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
				ultra_delay4 = 0;
 8001350:	4b38      	ldr	r3, [pc, #224]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	e059      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 8001358:	4b30      	ldr	r3, [pc, #192]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a2f      	ldr	r2, [pc, #188]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	e053      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (ultra_delay5 == 1) {
 8001364:	4b35      	ldr	r3, [pc, #212]	@ (800143c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d11e      	bne.n	80013aa <HAL_TIM_PeriodElapsedCallback+0x16e>
			if (ultra_count >= 10) {
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d914      	bls.n	800139e <HAL_TIM_PeriodElapsedCallback+0x162>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800137a:	4829      	ldr	r0, [pc, #164]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800137c:	f001 ff92 	bl	80032a4 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 8001380:	4b2d      	ldr	r3, [pc, #180]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0204 	orr.w	r2, r2, #4
 800138e:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
				ultra_delay5 = 0;
 8001396:	4b29      	ldr	r3, [pc, #164]	@ (800143c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
}
 800139c:	e036      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 800139e:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	e030      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part2 == 1) {
 80013aa:	4b25      	ldr	r3, [pc, #148]	@ (8001440 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <HAL_TIM_PeriodElapsedCallback+0x182>
			delay_count++;
 80013b2:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a22      	ldr	r2, [pc, #136]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	e026      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part1 == 1) {
 80013be:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d105      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x196>
			delay_count++;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	e01c      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part3 == 1) {
 80013d2:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			delay_count++;
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a18      	ldr	r2, [pc, #96]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	e012      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part4 == 1) {
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d105      	bne.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x1be>
			delay_count++;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a13      	ldr	r2, [pc, #76]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	e008      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part5 == 1) {
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d104      	bne.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
			delay_count++;
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a0e      	ldr	r2, [pc, #56]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40012c00 	.word	0x40012c00
 8001418:	2000025c 	.word	0x2000025c
 800141c:	20000258 	.word	0x20000258
 8001420:	40010800 	.word	0x40010800
 8001424:	200002ec 	.word	0x200002ec
 8001428:	2000025d 	.word	0x2000025d
 800142c:	40010c00 	.word	0x40010c00
 8001430:	2000025e 	.word	0x2000025e
 8001434:	2000025f 	.word	0x2000025f
 8001438:	2000037c 	.word	0x2000037c
 800143c:	20000260 	.word	0x20000260
 8001440:	2000024d 	.word	0x2000024d
 8001444:	20000254 	.word	0x20000254
 8001448:	2000024c 	.word	0x2000024c
 800144c:	2000024e 	.word	0x2000024e
 8001450:	2000024f 	.word	0x2000024f
 8001454:	20000250 	.word	0x20000250

08001458 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001468:	f040 81ba 	bne.w	80017e0 <HAL_TIM_IC_CaptureCallback+0x388>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7f1b      	ldrb	r3, [r3, #28]
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 8083 	bne.w	800157c <HAL_TIM_IC_CaptureCallback+0x124>
		{
			if (Is_First_Captured1==0)
 8001476:	4b9a      	ldr	r3, [pc, #616]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11a      	bne.n	80014b4 <HAL_TIM_IC_CaptureCallback+0x5c>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800147e:	2100      	movs	r1, #0
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f003 f811 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 8001486:	4603      	mov	r3, r0
 8001488:	4a96      	ldr	r2, [pc, #600]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800148a:	6013      	str	r3, [r2, #0]
				Is_First_Captured1 = 1;
 800148c:	4b94      	ldr	r3, [pc, #592]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x288>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 020a 	bic.w	r2, r2, #10
 80014a0:	621a      	str	r2, [r3, #32]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0202 	orr.w	r2, r2, #2
 80014b0:	621a      	str	r2, [r3, #32]
 80014b2:	e063      	b.n	800157c <HAL_TIM_IC_CaptureCallback+0x124>
			}

			else if (Is_First_Captured1==1)
 80014b4:	4b8a      	ldr	r3, [pc, #552]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x288>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d15f      	bne.n	800157c <HAL_TIM_IC_CaptureCallback+0x124>
			{
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80014bc:	2100      	movs	r1, #0
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f002 fff2 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a88      	ldr	r2, [pc, #544]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014c8:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24

				if (IC_Val2 > IC_Val1)
 80014d2:	4b85      	ldr	r3, [pc, #532]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b83      	ldr	r3, [pc, #524]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d907      	bls.n	80014ee <HAL_TIM_IC_CaptureCallback+0x96>
				{
					Difference1 = IC_Val2-IC_Val1;
 80014de:	4b82      	ldr	r3, [pc, #520]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b80      	ldr	r3, [pc, #512]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a80      	ldr	r2, [pc, #512]	@ (80016ec <HAL_TIM_IC_CaptureCallback+0x294>)
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e00f      	b.n	800150e <HAL_TIM_IC_CaptureCallback+0xb6>
				}

				else if (IC_Val1 > IC_Val2)
 80014ee:	4b7d      	ldr	r3, [pc, #500]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b7d      	ldr	r3, [pc, #500]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d909      	bls.n	800150e <HAL_TIM_IC_CaptureCallback+0xb6>
				{
					Difference1 = (0xffff - IC_Val1) + IC_Val2;
 80014fa:	4b7b      	ldr	r3, [pc, #492]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b79      	ldr	r3, [pc, #484]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001508:	33ff      	adds	r3, #255	@ 0xff
 800150a:	4a78      	ldr	r2, [pc, #480]	@ (80016ec <HAL_TIM_IC_CaptureCallback+0x294>)
 800150c:	6013      	str	r3, [r2, #0]
				}

				Distance1 = Difference1 * .034/2;
 800150e:	4b77      	ldr	r3, [pc, #476]	@ (80016ec <HAL_TIM_IC_CaptureCallback+0x294>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ff66 	bl	80003e4 <__aeabi_ui2d>
 8001518:	a36f      	add	r3, pc, #444	@ (adr r3, 80016d8 <HAL_TIM_IC_CaptureCallback+0x280>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7fe ffdb 	bl	80004d8 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001532:	f7ff f8fb 	bl	800072c <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fa7b 	bl	8000a38 <__aeabi_d2uiz>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	4b6a      	ldr	r3, [pc, #424]	@ (80016f0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001548:	801a      	strh	r2, [r3, #0]
				Is_First_Captured1 = 0;
 800154a:	4b65      	ldr	r3, [pc, #404]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x288>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 020a 	bic.w	r2, r2, #10
 800155e:	621a      	str	r2, [r3, #32]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6a12      	ldr	r2, [r2, #32]
 800156a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800156c:	4b61      	ldr	r3, [pc, #388]	@ (80016f4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	4b60      	ldr	r3, [pc, #384]	@ (80016f4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0202 	bic.w	r2, r2, #2
 800157a:	60da      	str	r2, [r3, #12]
			}
		}

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7f1b      	ldrb	r3, [r3, #28]
 8001580:	2b02      	cmp	r3, #2
 8001582:	f040 8083 	bne.w	800168c <HAL_TIM_IC_CaptureCallback+0x234>
		{
			if (Is_First_Captured2==0)
 8001586:	4b5c      	ldr	r3, [pc, #368]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d11a      	bne.n	80015c4 <HAL_TIM_IC_CaptureCallback+0x16c>
			{
				IC_Val3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800158e:	2104      	movs	r1, #4
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f002 ff89 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 8001596:	4603      	mov	r3, r0
 8001598:	4a58      	ldr	r2, [pc, #352]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800159a:	6013      	str	r3, [r2, #0]
				Is_First_Captured2 = 1;
 800159c:	4b56      	ldr	r3, [pc, #344]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80015b0:	621a      	str	r2, [r3, #32]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a1a      	ldr	r2, [r3, #32]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0220 	orr.w	r2, r2, #32
 80015c0:	621a      	str	r2, [r3, #32]
 80015c2:	e063      	b.n	800168c <HAL_TIM_IC_CaptureCallback+0x234>
			}

			else if (Is_First_Captured2==1)
 80015c4:	4b4c      	ldr	r3, [pc, #304]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d15f      	bne.n	800168c <HAL_TIM_IC_CaptureCallback+0x234>
			{
				IC_Val4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80015cc:	2104      	movs	r1, #4
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f002 ff6a 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80015d8:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24

				if (IC_Val4 > IC_Val3)
 80015e2:	4b47      	ldr	r3, [pc, #284]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b45      	ldr	r3, [pc, #276]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d907      	bls.n	80015fe <HAL_TIM_IC_CaptureCallback+0x1a6>
				{
					Difference2 = IC_Val4 - IC_Val3;
 80015ee:	4b44      	ldr	r3, [pc, #272]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b42      	ldr	r3, [pc, #264]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	4a42      	ldr	r2, [pc, #264]	@ (8001704 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e00f      	b.n	800161e <HAL_TIM_IC_CaptureCallback+0x1c6>
				}

				else if (IC_Val3 > IC_Val4)
 80015fe:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d909      	bls.n	800161e <HAL_TIM_IC_CaptureCallback+0x1c6>
				{
					Difference2 = (0xffff - IC_Val3) + IC_Val4;
 800160a:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b3b      	ldr	r3, [pc, #236]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001618:	33ff      	adds	r3, #255	@ 0xff
 800161a:	4a3a      	ldr	r2, [pc, #232]	@ (8001704 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 800161c:	6013      	str	r3, [r2, #0]
				}

				Distance2 = Difference2 * .034/2;
 800161e:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fede 	bl	80003e4 <__aeabi_ui2d>
 8001628:	a32b      	add	r3, pc, #172	@ (adr r3, 80016d8 <HAL_TIM_IC_CaptureCallback+0x280>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe ff53 	bl	80004d8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001642:	f7ff f873 	bl	800072c <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff f9f3 	bl	8000a38 <__aeabi_d2uiz>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8001658:	801a      	strh	r2, [r3, #0]
				Is_First_Captured2 = 0;
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800166e:	621a      	str	r2, [r3, #32]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a12      	ldr	r2, [r2, #32]
 800167a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0204 	bic.w	r2, r2, #4
 800168a:	60da      	str	r2, [r3, #12]
			}
		}

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7f1b      	ldrb	r3, [r3, #28]
 8001690:	2b04      	cmp	r3, #4
 8001692:	f040 81df 	bne.w	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
		{
			if (Is_First_Captured3==0)
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d13a      	bne.n	8001714 <HAL_TIM_IC_CaptureCallback+0x2bc>
			{
				IC_Val5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800169e:	2108      	movs	r1, #8
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f002 ff01 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80016aa:	6013      	str	r3, [r2, #0]
				Is_First_Captured3 = 1;
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6a1a      	ldr	r2, [r3, #32]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016c0:	621a      	str	r2, [r3, #32]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016d0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
			}
		}
	}
}
 80016d2:	e1bf      	b.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
 80016d4:	f3af 8000 	nop.w
 80016d8:	b020c49c 	.word	0xb020c49c
 80016dc:	3fa16872 	.word	0x3fa16872
 80016e0:	2000023c 	.word	0x2000023c
 80016e4:	20000200 	.word	0x20000200
 80016e8:	20000204 	.word	0x20000204
 80016ec:	20000228 	.word	0x20000228
 80016f0:	20000242 	.word	0x20000242
 80016f4:	200002ec 	.word	0x200002ec
 80016f8:	2000023d 	.word	0x2000023d
 80016fc:	20000208 	.word	0x20000208
 8001700:	2000020c 	.word	0x2000020c
 8001704:	2000022c 	.word	0x2000022c
 8001708:	20000244 	.word	0x20000244
 800170c:	2000023e 	.word	0x2000023e
 8001710:	20000210 	.word	0x20000210
			else if (Is_First_Captured3==1)
 8001714:	4b8e      	ldr	r3, [pc, #568]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	f040 819b 	bne.w	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
				IC_Val6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800171e:	2108      	movs	r1, #8
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f002 fec1 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 8001726:	4603      	mov	r3, r0
 8001728:	4a8a      	ldr	r2, [pc, #552]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 800172a:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val6 > IC_Val5)
 8001734:	4b87      	ldr	r3, [pc, #540]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b87      	ldr	r3, [pc, #540]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x500>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d907      	bls.n	8001750 <HAL_TIM_IC_CaptureCallback+0x2f8>
					Difference3 = IC_Val6 - IC_Val5;
 8001740:	4b84      	ldr	r3, [pc, #528]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b84      	ldr	r3, [pc, #528]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x500>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a84      	ldr	r2, [pc, #528]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x504>)
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e00f      	b.n	8001770 <HAL_TIM_IC_CaptureCallback+0x318>
				else if (IC_Val5 > IC_Val6)
 8001750:	4b81      	ldr	r3, [pc, #516]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x500>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b7f      	ldr	r3, [pc, #508]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d909      	bls.n	8001770 <HAL_TIM_IC_CaptureCallback+0x318>
					Difference3 = (0xffff - IC_Val5) + IC_Val6;
 800175c:	4b7d      	ldr	r3, [pc, #500]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b7d      	ldr	r3, [pc, #500]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x500>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800176a:	33ff      	adds	r3, #255	@ 0xff
 800176c:	4a7b      	ldr	r2, [pc, #492]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x504>)
 800176e:	6013      	str	r3, [r2, #0]
				Distance3 = Difference3 * .034/2;
 8001770:	4b7a      	ldr	r3, [pc, #488]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe35 	bl	80003e4 <__aeabi_ui2d>
 800177a:	a373      	add	r3, pc, #460	@ (adr r3, 8001948 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe feaa 	bl	80004d8 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001794:	f7fe ffca 	bl	800072c <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff f94a 	bl	8000a38 <__aeabi_d2uiz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0x508>)
 80017aa:	801a      	strh	r2, [r3, #0]
				Is_First_Captured3 = 0;
 80017ac:	4b68      	ldr	r3, [pc, #416]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017c0:	621a      	str	r2, [r3, #32]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a12      	ldr	r2, [r2, #32]
 80017cc:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 80017ce:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x50c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	4b63      	ldr	r3, [pc, #396]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x50c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0208 	bic.w	r2, r2, #8
 80017dc:	60da      	str	r2, [r3, #12]
}
 80017de:	e139      	b.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
	else if (htim->Instance == TIM4) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a60      	ldr	r2, [pc, #384]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0x510>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	f040 8134 	bne.w	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7f1b      	ldrb	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	f040 8083 	bne.w	80018fc <HAL_TIM_IC_CaptureCallback+0x4a4>
			if (Is_First_Captured4==0)
 80017f6:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x514>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d11a      	bne.n	8001834 <HAL_TIM_IC_CaptureCallback+0x3dc>
				IC_Val7 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017fe:	2100      	movs	r1, #0
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f002 fe51 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 8001806:	4603      	mov	r3, r0
 8001808:	4a59      	ldr	r2, [pc, #356]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 800180a:	6013      	str	r3, [r2, #0]
				Is_First_Captured4 = 1;
 800180c:	4b57      	ldr	r3, [pc, #348]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x514>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 020a 	bic.w	r2, r2, #10
 8001820:	621a      	str	r2, [r3, #32]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0202 	orr.w	r2, r2, #2
 8001830:	621a      	str	r2, [r3, #32]
 8001832:	e063      	b.n	80018fc <HAL_TIM_IC_CaptureCallback+0x4a4>
			else if (Is_First_Captured4==1)
 8001834:	4b4d      	ldr	r3, [pc, #308]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x514>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d15f      	bne.n	80018fc <HAL_TIM_IC_CaptureCallback+0x4a4>
				IC_Val8 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800183c:	2100      	movs	r1, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f002 fe32 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 8001844:	4603      	mov	r3, r0
 8001846:	4a4b      	ldr	r2, [pc, #300]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 8001848:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val8 > IC_Val7)
 8001852:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d907      	bls.n	800186e <HAL_TIM_IC_CaptureCallback+0x416>
					Difference4 = IC_Val8 - IC_Val7;
 800185e:	4b45      	ldr	r3, [pc, #276]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b43      	ldr	r3, [pc, #268]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4a43      	ldr	r2, [pc, #268]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x520>)
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e00f      	b.n	800188e <HAL_TIM_IC_CaptureCallback+0x436>
				else if (IC_Val7 > IC_Val8)
 800186e:	4b40      	ldr	r3, [pc, #256]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d909      	bls.n	800188e <HAL_TIM_IC_CaptureCallback+0x436>
					Difference4 = (0xffff - IC_Val7) + IC_Val8;
 800187a:	4b3e      	ldr	r3, [pc, #248]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001888:	33ff      	adds	r3, #255	@ 0xff
 800188a:	4a3b      	ldr	r2, [pc, #236]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x520>)
 800188c:	6013      	str	r3, [r2, #0]
				Distance4 = Difference4 * .034/2;
 800188e:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x520>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fda6 	bl	80003e4 <__aeabi_ui2d>
 8001898:	a32b      	add	r3, pc, #172	@ (adr r3, 8001948 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fe1b 	bl	80004d8 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018b2:	f7fe ff3b 	bl	800072c <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f8bb 	bl	8000a38 <__aeabi_d2uiz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b2d      	ldr	r3, [pc, #180]	@ (800197c <HAL_TIM_IC_CaptureCallback+0x524>)
 80018c8:	801a      	strh	r2, [r3, #0]
				Is_First_Captured4 = 0;
 80018ca:	4b28      	ldr	r3, [pc, #160]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x514>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 020a 	bic.w	r2, r2, #10
 80018de:	621a      	str	r2, [r3, #32]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a12      	ldr	r2, [r2, #32]
 80018ea:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80018ec:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x528>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x528>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0202 	bic.w	r2, r2, #2
 80018fa:	60da      	str	r2, [r3, #12]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7f1b      	ldrb	r3, [r3, #28]
 8001900:	2b02      	cmp	r3, #2
 8001902:	f040 80a7 	bne.w	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
			if (Is_First_Captured5==0)
 8001906:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x52c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d13e      	bne.n	800198c <HAL_TIM_IC_CaptureCallback+0x534>
				IC_Val9 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800190e:	2104      	movs	r1, #4
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f002 fdc9 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 8001916:	4603      	mov	r3, r0
 8001918:	4a1b      	ldr	r2, [pc, #108]	@ (8001988 <HAL_TIM_IC_CaptureCallback+0x530>)
 800191a:	6013      	str	r3, [r2, #0]
				Is_First_Captured5 = 1;
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x52c>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a1a      	ldr	r2, [r3, #32]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001930:	621a      	str	r2, [r3, #32]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a1a      	ldr	r2, [r3, #32]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0220 	orr.w	r2, r2, #32
 8001940:	621a      	str	r2, [r3, #32]
}
 8001942:	e087      	b.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
 8001944:	f3af 8000 	nop.w
 8001948:	b020c49c 	.word	0xb020c49c
 800194c:	3fa16872 	.word	0x3fa16872
 8001950:	2000023e 	.word	0x2000023e
 8001954:	20000214 	.word	0x20000214
 8001958:	20000210 	.word	0x20000210
 800195c:	20000230 	.word	0x20000230
 8001960:	20000246 	.word	0x20000246
 8001964:	200002ec 	.word	0x200002ec
 8001968:	40000800 	.word	0x40000800
 800196c:	2000023f 	.word	0x2000023f
 8001970:	20000218 	.word	0x20000218
 8001974:	2000021c 	.word	0x2000021c
 8001978:	20000234 	.word	0x20000234
 800197c:	20000248 	.word	0x20000248
 8001980:	2000037c 	.word	0x2000037c
 8001984:	20000240 	.word	0x20000240
 8001988:	20000220 	.word	0x20000220
			else if (Is_First_Captured5==1)
 800198c:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0x610>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d15f      	bne.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
				IC_Val10 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001994:	2104      	movs	r1, #4
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f002 fd86 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 800199c:	4603      	mov	r3, r0
 800199e:	4a33      	ldr	r2, [pc, #204]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019a0:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val10 > IC_Val9)
 80019aa:	4b30      	ldr	r3, [pc, #192]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x618>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d907      	bls.n	80019c6 <HAL_TIM_IC_CaptureCallback+0x56e>
					Difference5 = IC_Val10 - IC_Val9;
 80019b6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x618>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x61c>)
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e00f      	b.n	80019e6 <HAL_TIM_IC_CaptureCallback+0x58e>
				else if (IC_Val9 > IC_Val10)
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x618>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d909      	bls.n	80019e6 <HAL_TIM_IC_CaptureCallback+0x58e>
					Difference5 = (0xffff - IC_Val9) + IC_Val10;
 80019d2:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x618>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80019e0:	33ff      	adds	r3, #255	@ 0xff
 80019e2:	4a24      	ldr	r2, [pc, #144]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x61c>)
 80019e4:	6013      	str	r3, [r2, #0]
				Distance5 = Difference5 * .034/2;
 80019e6:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x61c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fcfa 	bl	80003e4 <__aeabi_ui2d>
 80019f0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a60 <HAL_TIM_IC_CaptureCallback+0x608>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fd6f 	bl	80004d8 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a0a:	f7fe fe8f 	bl	800072c <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f80f 	bl	8000a38 <__aeabi_d2uiz>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_TIM_IC_CaptureCallback+0x620>)
 8001a20:	801a      	strh	r2, [r3, #0]
				Is_First_Captured5 = 0;
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0x610>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001a36:	621a      	str	r2, [r3, #32]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a12      	ldr	r2, [r2, #32]
 8001a42:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 8001a44:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x624>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x624>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0204 	bic.w	r2, r2, #4
 8001a52:	60da      	str	r2, [r3, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	f3af 8000 	nop.w
 8001a60:	b020c49c 	.word	0xb020c49c
 8001a64:	3fa16872 	.word	0x3fa16872
 8001a68:	20000240 	.word	0x20000240
 8001a6c:	20000224 	.word	0x20000224
 8001a70:	20000220 	.word	0x20000220
 8001a74:	20000238 	.word	0x20000238
 8001a78:	2000024a 	.word	0x2000024a
 8001a7c:	2000037c 	.word	0x2000037c

08001a80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a45      	ldr	r2, [pc, #276]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x124>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d14f      	bne.n	8001b32 <HAL_UART_RxCpltCallback+0xb2>
		for (int i = 0; i < 4; i++) {
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e029      	b.n	8001aec <HAL_UART_RxCpltCallback+0x6c>
			if (uwb_buf[(i + 1) % 4] == '.') {
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	425a      	negs	r2, r3
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	bf58      	it	pl
 8001aa8:	4253      	negpl	r3, r2
 8001aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ba8 <HAL_UART_RxCpltCallback+0x128>)
 8001aac:	5cd3      	ldrb	r3, [r2, r3]
 8001aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ab0:	d119      	bne.n	8001ae6 <HAL_UART_RxCpltCallback+0x66>
				for (int j = 0; j < 4; j++) {
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	e013      	b.n	8001ae0 <HAL_UART_RxCpltCallback+0x60>
					fe_data[j] = uwb_buf[(i + j) % 4];
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	4413      	add	r3, r2
 8001abe:	425a      	negs	r2, r3
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	f002 0203 	and.w	r2, r2, #3
 8001ac8:	bf58      	it	pl
 8001aca:	4253      	negpl	r3, r2
 8001acc:	4a36      	ldr	r2, [pc, #216]	@ (8001ba8 <HAL_UART_RxCpltCallback+0x128>)
 8001ace:	5cd1      	ldrb	r1, [r2, r3]
 8001ad0:	4a36      	ldr	r2, [pc, #216]	@ (8001bac <HAL_UART_RxCpltCallback+0x12c>)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	dde8      	ble.n	8001ab8 <HAL_UART_RxCpltCallback+0x38>
		for (int i = 0; i < 4; i++) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	ddd2      	ble.n	8001a98 <HAL_UART_RxCpltCallback+0x18>
				}
			}
		}

		fe_data[4] = '\0';
 8001af2:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <HAL_UART_RxCpltCallback+0x12c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	711a      	strb	r2, [r3, #4]

		sscanf(fe_data, "%f", &dis);
 8001af8:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb0 <HAL_UART_RxCpltCallback+0x130>)
 8001afa:	492e      	ldr	r1, [pc, #184]	@ (8001bb4 <HAL_UART_RxCpltCallback+0x134>)
 8001afc:	482b      	ldr	r0, [pc, #172]	@ (8001bac <HAL_UART_RxCpltCallback+0x12c>)
 8001afe:	f004 f9db 	bl	8005eb8 <siscanf>

		dis = roundf(dis * 100) / 100;
 8001b02:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <HAL_UART_RxCpltCallback+0x130>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	492c      	ldr	r1, [pc, #176]	@ (8001bb8 <HAL_UART_RxCpltCallback+0x138>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f913 	bl	8000d34 <__aeabi_fmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f007 fd3f 	bl	8009594 <roundf>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4927      	ldr	r1, [pc, #156]	@ (8001bb8 <HAL_UART_RxCpltCallback+0x138>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f9be 	bl	8000e9c <__aeabi_fdiv>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <HAL_UART_RxCpltCallback+0x130>)
 8001b26:	601a      	str	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart1, &uwb_buf, 4);
 8001b28:	2204      	movs	r2, #4
 8001b2a:	491f      	ldr	r1, [pc, #124]	@ (8001ba8 <HAL_UART_RxCpltCallback+0x128>)
 8001b2c:	4823      	ldr	r0, [pc, #140]	@ (8001bbc <HAL_UART_RxCpltCallback+0x13c>)
 8001b2e:	f003 f999 	bl	8004e64 <HAL_UART_Receive_IT>
	}

    if (huart->Instance == USART3) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_UART_RxCpltCallback+0x140>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d12f      	bne.n	8001b9c <HAL_UART_RxCpltCallback+0x11c>
		if (rx_byte == '/') {
 8001b3c:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x144>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b42:	d113      	bne.n	8001b6c <HAL_UART_RxCpltCallback+0xec>
			rx_buf[rx_index] = rx_byte;
 8001b44:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x144>)
 8001b4c:	7819      	ldrb	r1, [r3, #0]
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <HAL_UART_RxCpltCallback+0x14c>)
 8001b50:	5499      	strb	r1, [r3, r2]
			rx_buf[rx_index + 1] = '\0';
 8001b52:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a1c      	ldr	r2, [pc, #112]	@ (8001bcc <HAL_UART_RxCpltCallback+0x14c>)
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	54d1      	strb	r1, [r2, r3]
			rx_flag = 1;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <HAL_UART_RxCpltCallback+0x150>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8001b64:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e012      	b.n	8001b92 <HAL_UART_RxCpltCallback+0x112>
		} else {
			if (rx_index < RX_BUF_SIZE - 1) {
 8001b6c:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b0e      	cmp	r3, #14
 8001b72:	d80b      	bhi.n	8001b8c <HAL_UART_RxCpltCallback+0x10c>
				rx_buf[rx_index++] = rx_byte;
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	b2d1      	uxtb	r1, r2
 8001b7c:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b7e:	7011      	strb	r1, [r2, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x144>)
 8001b84:	7819      	ldrb	r1, [r3, #0]
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_UART_RxCpltCallback+0x14c>)
 8001b88:	5499      	strb	r1, [r3, r2]
 8001b8a:	e002      	b.n	8001b92 <HAL_UART_RxCpltCallback+0x112>
			} else {
				rx_index = 0;
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	490b      	ldr	r1, [pc, #44]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x144>)
 8001b96:	480f      	ldr	r0, [pc, #60]	@ (8001bd4 <HAL_UART_RxCpltCallback+0x154>)
 8001b98:	f003 f964 	bl	8004e64 <HAL_UART_Receive_IT>
    }
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	20000264 	.word	0x20000264
 8001bac:	20000268 	.word	0x20000268
 8001bb0:	20000280 	.word	0x20000280
 8001bb4:	080095f8 	.word	0x080095f8
 8001bb8:	42c80000 	.word	0x42c80000
 8001bbc:	200003c4 	.word	0x200003c4
 8001bc0:	40004800 	.word	0x40004800
 8001bc4:	20000290 	.word	0x20000290
 8001bc8:	20000299 	.word	0x20000299
 8001bcc:	20000294 	.word	0x20000294
 8001bd0:	2000029a 	.word	0x2000029a
 8001bd4:	20000454 	.word	0x20000454

08001bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bdc:	f000 ffbc 	bl	8002b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be0:	f000 f9a4 	bl	8001f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be4:	f7ff faa2 	bl	800112c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001be8:	f000 fe5c 	bl	80028a4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001bec:	f000 fc2a 	bl	8002444 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001bf0:	f000 fe2e 	bl	8002850 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001bf4:	f000 fb50 	bl	8002298 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bf8:	f000 fb9e 	bl	8002338 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001bfc:	f000 fca2 	bl	8002544 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001c00:	f000 fe7a 	bl	80028f8 <MX_USART3_UART_Init>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&htim1);

  sensor_part5 = 1;*/

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c04:	2100      	movs	r1, #0
 8001c06:	48a2      	ldr	r0, [pc, #648]	@ (8001e90 <main+0x2b8>)
 8001c08:	f002 f83e 	bl	8003c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	48a0      	ldr	r0, [pc, #640]	@ (8001e90 <main+0x2b8>)
 8001c10:	f002 f83a 	bl	8003c88 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, &uwb_buf, 4);
 8001c14:	2204      	movs	r2, #4
 8001c16:	499f      	ldr	r1, [pc, #636]	@ (8001e94 <main+0x2bc>)
 8001c18:	489f      	ldr	r0, [pc, #636]	@ (8001e98 <main+0x2c0>)
 8001c1a:	f003 f923 	bl	8004e64 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	499e      	ldr	r1, [pc, #632]	@ (8001e9c <main+0x2c4>)
 8001c22:	489f      	ldr	r0, [pc, #636]	@ (8001ea0 <main+0x2c8>)
 8001c24:	f003 f91e 	bl	8004e64 <HAL_UART_Receive_IT>
	  else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }*/


	  if (rx_flag) {
 8001c28:	4b9e      	ldr	r3, [pc, #632]	@ (8001ea4 <main+0x2cc>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <main+0x6a>
	      rx_flag = 0;
 8001c32:	4b9c      	ldr	r3, [pc, #624]	@ (8001ea4 <main+0x2cc>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]

	      sscanf(rx_buf, "%d/", &rx_theta);
 8001c38:	4a9b      	ldr	r2, [pc, #620]	@ (8001ea8 <main+0x2d0>)
 8001c3a:	499c      	ldr	r1, [pc, #624]	@ (8001eac <main+0x2d4>)
 8001c3c:	489c      	ldr	r0, [pc, #624]	@ (8001eb0 <main+0x2d8>)
 8001c3e:	f004 f93b 	bl	8005eb8 <siscanf>
	  }

	  if (dis > 1.00) {
 8001c42:	4b9c      	ldr	r3, [pc, #624]	@ (8001eb4 <main+0x2dc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fa2e 	bl	80010ac <__aeabi_fcmpgt>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <main+0x86>
		  dis = 1.00;
 8001c56:	4b97      	ldr	r3, [pc, #604]	@ (8001eb4 <main+0x2dc>)
 8001c58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c5c:	601a      	str	r2, [r3, #0]
	  }

	  theta = -(rx_theta);
 8001c5e:	4b92      	ldr	r3, [pc, #584]	@ (8001ea8 <main+0x2d0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	425b      	negs	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f811 	bl	8000c8c <__aeabi_i2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a92      	ldr	r2, [pc, #584]	@ (8001eb8 <main+0x2e0>)
 8001c6e:	6013      	str	r3, [r2, #0]

	  if (theta > -10 && theta < 10) {
 8001c70:	4b91      	ldr	r3, [pc, #580]	@ (8001eb8 <main+0x2e0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4991      	ldr	r1, [pc, #580]	@ (8001ebc <main+0x2e4>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fa18 	bl	80010ac <__aeabi_fcmpgt>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <main+0xc4>
 8001c82:	4b8d      	ldr	r3, [pc, #564]	@ (8001eb8 <main+0x2e0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	498e      	ldr	r1, [pc, #568]	@ (8001ec0 <main+0x2e8>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f9f1 	bl	8001070 <__aeabi_fcmplt>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <main+0xc4>
		  theta = 0;
 8001c94:	4b88      	ldr	r3, [pc, #544]	@ (8001eb8 <main+0x2e0>)
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
	  }

	  V = K_v * (dis - 0.8);
 8001c9c:	4b89      	ldr	r3, [pc, #548]	@ (8001ec4 <main+0x2ec>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fbc1 	bl	8000428 <__aeabi_f2d>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	460d      	mov	r5, r1
 8001caa:	4b82      	ldr	r3, [pc, #520]	@ (8001eb4 <main+0x2dc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fbba 	bl	8000428 <__aeabi_f2d>
 8001cb4:	a370      	add	r3, pc, #448	@ (adr r3, 8001e78 <main+0x2a0>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fa55 	bl	8000168 <__aeabi_dsub>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fc07 	bl	80004d8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7fe fed1 	bl	8000a78 <__aeabi_d2f>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a7b      	ldr	r2, [pc, #492]	@ (8001ec8 <main+0x2f0>)
 8001cda:	6013      	str	r3, [r2, #0]
	  W = K_w * theta * PI / 180;
 8001cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8001ecc <main+0x2f4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a75      	ldr	r2, [pc, #468]	@ (8001eb8 <main+0x2e0>)
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f824 	bl	8000d34 <__aeabi_fmul>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fb9a 	bl	8000428 <__aeabi_f2d>
 8001cf4:	a362      	add	r3, pc, #392	@ (adr r3, 8001e80 <main+0x2a8>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fbed 	bl	80004d8 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b71      	ldr	r3, [pc, #452]	@ (8001ed0 <main+0x2f8>)
 8001d0c:	f7fe fd0e 	bl	800072c <__aeabi_ddiv>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe feae 	bl	8000a78 <__aeabi_d2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8001ed4 <main+0x2fc>)
 8001d20:	6013      	str	r3, [r2, #0]

	  w_L = (V - W * b / 2) / r;
 8001d22:	4b69      	ldr	r3, [pc, #420]	@ (8001ec8 <main+0x2f0>)
 8001d24:	681c      	ldr	r4, [r3, #0]
 8001d26:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed4 <main+0x2fc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6b      	ldr	r2, [pc, #428]	@ (8001ed8 <main+0x300>)
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ffff 	bl	8000d34 <__aeabi_fmul>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f8ad 	bl	8000e9c <__aeabi_fdiv>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4619      	mov	r1, r3
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7fe feea 	bl	8000b20 <__aeabi_fsub>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b62      	ldr	r3, [pc, #392]	@ (8001edc <main+0x304>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f7ff f8a0 	bl	8000e9c <__aeabi_fdiv>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee0 <main+0x308>)
 8001d62:	601a      	str	r2, [r3, #0]
	  w_R = (V + W * b / 2) / r;
 8001d64:	4b5b      	ldr	r3, [pc, #364]	@ (8001ed4 <main+0x2fc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed8 <main+0x300>)
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe ffe0 	bl	8000d34 <__aeabi_fmul>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f88e 	bl	8000e9c <__aeabi_fdiv>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b50      	ldr	r3, [pc, #320]	@ (8001ec8 <main+0x2f0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7fe feca 	bl	8000b24 <__addsf3>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b51      	ldr	r3, [pc, #324]	@ (8001edc <main+0x304>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f7ff f87e 	bl	8000e9c <__aeabi_fdiv>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee4 <main+0x30c>)
 8001da6:	601a      	str	r2, [r3, #0]

	  PWM1_value = w_L / 26.28 * 100;
 8001da8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee0 <main+0x308>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fb3b 	bl	8000428 <__aeabi_f2d>
 8001db2:	a335      	add	r3, pc, #212	@ (adr r3, 8001e88 <main+0x2b0>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe fcb8 	bl	800072c <__aeabi_ddiv>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <main+0x310>)
 8001dca:	f7fe fb85 	bl	80004d8 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe fe2f 	bl	8000a38 <__aeabi_d2uiz>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a43      	ldr	r2, [pc, #268]	@ (8001eec <main+0x314>)
 8001dde:	6013      	str	r3, [r2, #0]
	  PWM2_value = w_R / 26.28 * 100;
 8001de0:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <main+0x30c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb1f 	bl	8000428 <__aeabi_f2d>
 8001dea:	a327      	add	r3, pc, #156	@ (adr r3, 8001e88 <main+0x2b0>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fc9c 	bl	800072c <__aeabi_ddiv>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <main+0x310>)
 8001e02:	f7fe fb69 	bl	80004d8 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe fe13 	bl	8000a38 <__aeabi_d2uiz>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a36      	ldr	r2, [pc, #216]	@ (8001ef0 <main+0x318>)
 8001e16:	6013      	str	r3, [r2, #0]

	  if (PWM1_value > 100) {
 8001e18:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <main+0x314>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b64      	cmp	r3, #100	@ 0x64
 8001e1e:	d902      	bls.n	8001e26 <main+0x24e>
	    	PWM1_value = 100;
 8001e20:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <main+0x314>)
 8001e22:	2264      	movs	r2, #100	@ 0x64
 8001e24:	601a      	str	r2, [r3, #0]
	  }
	  if (PWM2_value > 100) {
 8001e26:	4b32      	ldr	r3, [pc, #200]	@ (8001ef0 <main+0x318>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	d902      	bls.n	8001e34 <main+0x25c>
		  PWM2_value = 100;
 8001e2e:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <main+0x318>)
 8001e30:	2264      	movs	r2, #100	@ 0x64
 8001e32:	601a      	str	r2, [r3, #0]
	  }


	  if (V >= 0) {
 8001e34:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <main+0x2f0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f92b 	bl	8001098 <__aeabi_fcmpge>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d059      	beq.n	8001efc <main+0x324>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e4e:	4829      	ldr	r0, [pc, #164]	@ (8001ef4 <main+0x31c>)
 8001e50:	f001 fa28 	bl	80032a4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001e54:	2201      	movs	r2, #1
 8001e56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e5a:	4827      	ldr	r0, [pc, #156]	@ (8001ef8 <main+0x320>)
 8001e5c:	f001 fa22 	bl	80032a4 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <main+0x2b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <main+0x314>)
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <main+0x2b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ef0 <main+0x318>)
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e74:	e6d8      	b.n	8001c28 <main+0x50>
 8001e76:	bf00      	nop
 8001e78:	9999999a 	.word	0x9999999a
 8001e7c:	3fe99999 	.word	0x3fe99999
 8001e80:	54411744 	.word	0x54411744
 8001e84:	400921fb 	.word	0x400921fb
 8001e88:	147ae148 	.word	0x147ae148
 8001e8c:	403a47ae 	.word	0x403a47ae
 8001e90:	20000334 	.word	0x20000334
 8001e94:	20000264 	.word	0x20000264
 8001e98:	200003c4 	.word	0x200003c4
 8001e9c:	20000290 	.word	0x20000290
 8001ea0:	20000454 	.word	0x20000454
 8001ea4:	2000029a 	.word	0x2000029a
 8001ea8:	2000029c 	.word	0x2000029c
 8001eac:	080095fc 	.word	0x080095fc
 8001eb0:	20000294 	.word	0x20000294
 8001eb4:	20000280 	.word	0x20000280
 8001eb8:	20000284 	.word	0x20000284
 8001ebc:	c1200000 	.word	0xc1200000
 8001ec0:	41200000 	.word	0x41200000
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000288 	.word	0x20000288
 8001ecc:	2000000c 	.word	0x2000000c
 8001ed0:	40668000 	.word	0x40668000
 8001ed4:	2000028c 	.word	0x2000028c
 8001ed8:	20000004 	.word	0x20000004
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000270 	.word	0x20000270
 8001ee4:	20000274 	.word	0x20000274
 8001ee8:	40590000 	.word	0x40590000
 8001eec:	20000278 	.word	0x20000278
 8001ef0:	2000027c 	.word	0x2000027c
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	40010c00 	.word	0x40010c00
	  }
	  else if (V < 0) {
 8001efc:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <main+0x34c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff f8b3 	bl	8001070 <__aeabi_fcmplt>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <main+0x348>
/*		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);*/
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <main+0x350>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2200      	movs	r2, #0
 8001f16:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8001f18:	4b03      	ldr	r3, [pc, #12]	@ (8001f28 <main+0x350>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	635a      	str	r2, [r3, #52]	@ 0x34
	  if (rx_flag) {
 8001f20:	e682      	b.n	8001c28 <main+0x50>
 8001f22:	bf00      	nop
 8001f24:	20000288 	.word	0x20000288
 8001f28:	20000334 	.word	0x20000334

08001f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b090      	sub	sp, #64	@ 0x40
 8001f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f32:	f107 0318 	add.w	r3, r7, #24
 8001f36:	2228      	movs	r2, #40	@ 0x28
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 f82b 	bl	8005f96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f52:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001f56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f60:	2302      	movs	r3, #2
 8001f62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f6a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 f9cf 	bl	8003318 <HAL_RCC_OscConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f80:	f000 f819 	bl	8001fb6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f84:	230f      	movs	r3, #15
 8001f86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fc3c 	bl	800381c <HAL_RCC_ClockConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001faa:	f000 f804 	bl	8001fb6 <Error_Handler>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3740      	adds	r7, #64	@ 0x40
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fba:	b672      	cpsid	i
}
 8001fbc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fbe:	bf00      	nop
 8001fc0:	e7fd      	b.n	8001fbe <Error_Handler+0x8>
	...

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6193      	str	r3, [r2, #24]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <HAL_MspInit+0x5c>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_MspInit+0x60>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <HAL_MspInit+0x60>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <NMI_Handler+0x4>

08002030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <MemManage_Handler+0x4>

08002040 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <UsageFault_Handler+0x4>

08002050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002078:	f000 fdb4 	bl	8002be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <TIM1_UP_IRQHandler+0x10>)
 8002086:	f001 fef9 	bl	8003e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200002a4 	.word	0x200002a4

08002094 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <TIM2_IRQHandler+0x10>)
 800209a:	f001 feef 	bl	8003e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200002ec 	.word	0x200002ec

080020a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <TIM4_IRQHandler+0x10>)
 80020ae:	f001 fee5 	bl	8003e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000037c 	.word	0x2000037c

080020bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <USART1_IRQHandler+0x10>)
 80020c2:	f002 fef5 	bl	8004eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200003c4 	.word	0x200003c4

080020d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020d4:	4802      	ldr	r0, [pc, #8]	@ (80020e0 <USART2_IRQHandler+0x10>)
 80020d6:	f002 feeb 	bl	8004eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000040c 	.word	0x2000040c

080020e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020e8:	4802      	ldr	r0, [pc, #8]	@ (80020f4 <USART3_IRQHandler+0x10>)
 80020ea:	f002 fee1 	bl	8004eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000454 	.word	0x20000454

080020f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002100:	f001 f8e8 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return 1;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <_kill>:

int _kill(int pid, int sig)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002120:	f003 ff88 	bl	8006034 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	2216      	movs	r2, #22
 8002128:	601a      	str	r2, [r3, #0]
  return -1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_exit>:

void _exit (int status)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800213e:	f04f 31ff 	mov.w	r1, #4294967295
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffe7 	bl	8002116 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <_exit+0x12>

0800214c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e00a      	b.n	8002174 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800215e:	f3af 8000 	nop.w
 8002162:	4601      	mov	r1, r0
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	60ba      	str	r2, [r7, #8]
 800216a:	b2ca      	uxtb	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbf0      	blt.n	800215e <_read+0x12>
  }

  return len;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e009      	b.n	80021ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dbf1      	blt.n	8002198 <_write+0x12>
  }
  return len;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_close>:

int _close(int file)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021e4:	605a      	str	r2, [r3, #4]
  return 0;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <_isatty>:

int _isatty(int file)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002206:	b480      	push	{r7}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	@ (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f003 fef0 	bl	8006034 <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20005000 	.word	0x20005000
 8002280:	00000400 	.word	0x00000400
 8002284:	200002a0 	.word	0x200002a0
 8002288:	200005f0 	.word	0x200005f0

0800228c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002330 <MX_TIM1_Init+0x98>)
 80022b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002334 <MX_TIM1_Init+0x9c>)
 80022b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80022ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <MX_TIM1_Init+0x98>)
 80022bc:	2247      	movs	r2, #71	@ 0x47
 80022be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <MX_TIM1_Init+0x98>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <MX_TIM1_Init+0x98>)
 80022c8:	2263      	movs	r2, #99	@ 0x63
 80022ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022cc:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <MX_TIM1_Init+0x98>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022d2:	4b17      	ldr	r3, [pc, #92]	@ (8002330 <MX_TIM1_Init+0x98>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <MX_TIM1_Init+0x98>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022de:	4814      	ldr	r0, [pc, #80]	@ (8002330 <MX_TIM1_Init+0x98>)
 80022e0:	f001 fc2a 	bl	8003b38 <HAL_TIM_Base_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80022ea:	f7ff fe64 	bl	8001fb6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	4619      	mov	r1, r3
 80022fa:	480d      	ldr	r0, [pc, #52]	@ (8002330 <MX_TIM1_Init+0x98>)
 80022fc:	f002 f80c 	bl	8004318 <HAL_TIM_ConfigClockSource>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8002306:	f7ff fe56 	bl	8001fb6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	@ (8002330 <MX_TIM1_Init+0x98>)
 8002318:	f002 fce4 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002322:	f7ff fe48 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200002a4 	.word	0x200002a4
 8002334:	40012c00 	.word	0x40012c00

08002338 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	@ 0x28
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233e:	f107 0318 	add.w	r3, r7, #24
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002362:	4b37      	ldr	r3, [pc, #220]	@ (8002440 <MX_TIM2_Init+0x108>)
 8002364:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002368:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800236a:	4b35      	ldr	r3, [pc, #212]	@ (8002440 <MX_TIM2_Init+0x108>)
 800236c:	2247      	movs	r2, #71	@ 0x47
 800236e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002370:	4b33      	ldr	r3, [pc, #204]	@ (8002440 <MX_TIM2_Init+0x108>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002376:	4b32      	ldr	r3, [pc, #200]	@ (8002440 <MX_TIM2_Init+0x108>)
 8002378:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800237c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237e:	4b30      	ldr	r3, [pc, #192]	@ (8002440 <MX_TIM2_Init+0x108>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002384:	4b2e      	ldr	r3, [pc, #184]	@ (8002440 <MX_TIM2_Init+0x108>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800238a:	482d      	ldr	r0, [pc, #180]	@ (8002440 <MX_TIM2_Init+0x108>)
 800238c:	f001 fbd4 	bl	8003b38 <HAL_TIM_Base_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002396:	f7ff fe0e 	bl	8001fb6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800239e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	4619      	mov	r1, r3
 80023a6:	4826      	ldr	r0, [pc, #152]	@ (8002440 <MX_TIM2_Init+0x108>)
 80023a8:	f001 ffb6 	bl	8004318 <HAL_TIM_ConfigClockSource>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80023b2:	f7ff fe00 	bl	8001fb6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023b6:	4822      	ldr	r0, [pc, #136]	@ (8002440 <MX_TIM2_Init+0x108>)
 80023b8:	f001 fd08 	bl	8003dcc <HAL_TIM_IC_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80023c2:	f7ff fdf8 	bl	8001fb6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4619      	mov	r1, r3
 80023d4:	481a      	ldr	r0, [pc, #104]	@ (8002440 <MX_TIM2_Init+0x108>)
 80023d6:	f002 fc85 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80023e0:	f7ff fde9 	bl	8001fb6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023e4:	2300      	movs	r3, #0
 80023e6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023e8:	2301      	movs	r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023f4:	463b      	mov	r3, r7
 80023f6:	2200      	movs	r2, #0
 80023f8:	4619      	mov	r1, r3
 80023fa:	4811      	ldr	r0, [pc, #68]	@ (8002440 <MX_TIM2_Init+0x108>)
 80023fc:	f001 fe2e 	bl	800405c <HAL_TIM_IC_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002406:	f7ff fdd6 	bl	8001fb6 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800240a:	463b      	mov	r3, r7
 800240c:	2204      	movs	r2, #4
 800240e:	4619      	mov	r1, r3
 8002410:	480b      	ldr	r0, [pc, #44]	@ (8002440 <MX_TIM2_Init+0x108>)
 8002412:	f001 fe23 	bl	800405c <HAL_TIM_IC_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800241c:	f7ff fdcb 	bl	8001fb6 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002420:	463b      	mov	r3, r7
 8002422:	2208      	movs	r2, #8
 8002424:	4619      	mov	r1, r3
 8002426:	4806      	ldr	r0, [pc, #24]	@ (8002440 <MX_TIM2_Init+0x108>)
 8002428:	f001 fe18 	bl	800405c <HAL_TIM_IC_ConfigChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8002432:	f7ff fdc0 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	@ 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200002ec 	.word	0x200002ec

08002444 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	@ 0x38
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	f107 0320 	add.w	r3, r7, #32
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	615a      	str	r2, [r3, #20]
 8002472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002474:	4b31      	ldr	r3, [pc, #196]	@ (800253c <MX_TIM3_Init+0xf8>)
 8002476:	4a32      	ldr	r2, [pc, #200]	@ (8002540 <MX_TIM3_Init+0xfc>)
 8002478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800247a:	4b30      	ldr	r3, [pc, #192]	@ (800253c <MX_TIM3_Init+0xf8>)
 800247c:	2247      	movs	r2, #71	@ 0x47
 800247e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002480:	4b2e      	ldr	r3, [pc, #184]	@ (800253c <MX_TIM3_Init+0xf8>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002486:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <MX_TIM3_Init+0xf8>)
 8002488:	2263      	movs	r2, #99	@ 0x63
 800248a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <MX_TIM3_Init+0xf8>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002492:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <MX_TIM3_Init+0xf8>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002498:	4828      	ldr	r0, [pc, #160]	@ (800253c <MX_TIM3_Init+0xf8>)
 800249a:	f001 fb4d 	bl	8003b38 <HAL_TIM_Base_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80024a4:	f7ff fd87 	bl	8001fb6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024b2:	4619      	mov	r1, r3
 80024b4:	4821      	ldr	r0, [pc, #132]	@ (800253c <MX_TIM3_Init+0xf8>)
 80024b6:	f001 ff2f 	bl	8004318 <HAL_TIM_ConfigClockSource>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80024c0:	f7ff fd79 	bl	8001fb6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024c4:	481d      	ldr	r0, [pc, #116]	@ (800253c <MX_TIM3_Init+0xf8>)
 80024c6:	f001 fb86 	bl	8003bd6 <HAL_TIM_PWM_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80024d0:	f7ff fd71 	bl	8001fb6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024dc:	f107 0320 	add.w	r3, r7, #32
 80024e0:	4619      	mov	r1, r3
 80024e2:	4816      	ldr	r0, [pc, #88]	@ (800253c <MX_TIM3_Init+0xf8>)
 80024e4:	f002 fbfe 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80024ee:	f7ff fd62 	bl	8001fb6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f2:	2360      	movs	r3, #96	@ 0x60
 80024f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	2200      	movs	r2, #0
 8002506:	4619      	mov	r1, r3
 8002508:	480c      	ldr	r0, [pc, #48]	@ (800253c <MX_TIM3_Init+0xf8>)
 800250a:	f001 fe43 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002514:	f7ff fd4f 	bl	8001fb6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	2204      	movs	r2, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4807      	ldr	r0, [pc, #28]	@ (800253c <MX_TIM3_Init+0xf8>)
 8002520:	f001 fe38 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800252a:	f7ff fd44 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800252e:	4803      	ldr	r0, [pc, #12]	@ (800253c <MX_TIM3_Init+0xf8>)
 8002530:	f000 f95c 	bl	80027ec <HAL_TIM_MspPostInit>

}
 8002534:	bf00      	nop
 8002536:	3738      	adds	r7, #56	@ 0x38
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000334 	.word	0x20000334
 8002540:	40000400 	.word	0x40000400

08002544 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	@ 0x28
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254a:	f107 0318 	add.w	r3, r7, #24
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002562:	463b      	mov	r3, r7
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800256e:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <MX_TIM4_Init+0xf0>)
 8002570:	4a31      	ldr	r2, [pc, #196]	@ (8002638 <MX_TIM4_Init+0xf4>)
 8002572:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002574:	4b2f      	ldr	r3, [pc, #188]	@ (8002634 <MX_TIM4_Init+0xf0>)
 8002576:	2247      	movs	r2, #71	@ 0x47
 8002578:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b2e      	ldr	r3, [pc, #184]	@ (8002634 <MX_TIM4_Init+0xf0>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8002580:	4b2c      	ldr	r3, [pc, #176]	@ (8002634 <MX_TIM4_Init+0xf0>)
 8002582:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002586:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002588:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <MX_TIM4_Init+0xf0>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	4b29      	ldr	r3, [pc, #164]	@ (8002634 <MX_TIM4_Init+0xf0>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002594:	4827      	ldr	r0, [pc, #156]	@ (8002634 <MX_TIM4_Init+0xf0>)
 8002596:	f001 facf 	bl	8003b38 <HAL_TIM_Base_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80025a0:	f7ff fd09 	bl	8001fb6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025aa:	f107 0318 	add.w	r3, r7, #24
 80025ae:	4619      	mov	r1, r3
 80025b0:	4820      	ldr	r0, [pc, #128]	@ (8002634 <MX_TIM4_Init+0xf0>)
 80025b2:	f001 feb1 	bl	8004318 <HAL_TIM_ConfigClockSource>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80025bc:	f7ff fcfb 	bl	8001fb6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80025c0:	481c      	ldr	r0, [pc, #112]	@ (8002634 <MX_TIM4_Init+0xf0>)
 80025c2:	f001 fc03 	bl	8003dcc <HAL_TIM_IC_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025cc:	f7ff fcf3 	bl	8001fb6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	4619      	mov	r1, r3
 80025de:	4815      	ldr	r0, [pc, #84]	@ (8002634 <MX_TIM4_Init+0xf0>)
 80025e0:	f002 fb80 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80025ea:	f7ff fce4 	bl	8001fb6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025f2:	2301      	movs	r3, #1
 80025f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025fe:	463b      	mov	r3, r7
 8002600:	2200      	movs	r2, #0
 8002602:	4619      	mov	r1, r3
 8002604:	480b      	ldr	r0, [pc, #44]	@ (8002634 <MX_TIM4_Init+0xf0>)
 8002606:	f001 fd29 	bl	800405c <HAL_TIM_IC_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002610:	f7ff fcd1 	bl	8001fb6 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002614:	463b      	mov	r3, r7
 8002616:	2204      	movs	r2, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4806      	ldr	r0, [pc, #24]	@ (8002634 <MX_TIM4_Init+0xf0>)
 800261c:	f001 fd1e 	bl	800405c <HAL_TIM_IC_ConfigChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8002626:	f7ff fcc6 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	3728      	adds	r7, #40	@ 0x28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	2000037c 	.word	0x2000037c
 8002638:	40000800 	.word	0x40000800

0800263c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08e      	sub	sp, #56	@ 0x38
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a5e      	ldr	r2, [pc, #376]	@ (80027d0 <HAL_TIM_Base_MspInit+0x194>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d114      	bne.n	8002686 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800265c:	4b5d      	ldr	r3, [pc, #372]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4a5c      	ldr	r2, [pc, #368]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 8002662:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002666:	6193      	str	r3, [r2, #24]
 8002668:	4b5a      	ldr	r3, [pc, #360]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	2019      	movs	r0, #25
 800267a:	f000 fba6 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800267e:	2019      	movs	r0, #25
 8002680:	f000 fbbf 	bl	8002e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002684:	e09f      	b.n	80027c6 <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800268e:	d157      	bne.n	8002740 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002690:	4b50      	ldr	r3, [pc, #320]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4a4f      	ldr	r2, [pc, #316]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	61d3      	str	r3, [r2, #28]
 800269c:	4b4d      	ldr	r3, [pc, #308]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	4b4a      	ldr	r3, [pc, #296]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a49      	ldr	r2, [pc, #292]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b47      	ldr	r3, [pc, #284]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c0:	4b44      	ldr	r3, [pc, #272]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a43      	ldr	r2, [pc, #268]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026d8:	2303      	movs	r3, #3
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026dc:	2300      	movs	r3, #0
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	483b      	ldr	r0, [pc, #236]	@ (80027d8 <HAL_TIM_Base_MspInit+0x19c>)
 80026ec:	f000 fc56 	bl	8002f9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002702:	4619      	mov	r1, r3
 8002704:	4835      	ldr	r0, [pc, #212]	@ (80027dc <HAL_TIM_Base_MspInit+0x1a0>)
 8002706:	f000 fc49 	bl	8002f9c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800270a:	4b35      	ldr	r3, [pc, #212]	@ (80027e0 <HAL_TIM_Base_MspInit+0x1a4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002716:	637b      	str	r3, [r7, #52]	@ 0x34
 8002718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800271e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002726:	637b      	str	r3, [r7, #52]	@ 0x34
 8002728:	4a2d      	ldr	r2, [pc, #180]	@ (80027e0 <HAL_TIM_Base_MspInit+0x1a4>)
 800272a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272c:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	201c      	movs	r0, #28
 8002734:	f000 fb49 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002738:	201c      	movs	r0, #28
 800273a:	f000 fb62 	bl	8002e02 <HAL_NVIC_EnableIRQ>
}
 800273e:	e042      	b.n	80027c6 <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM3)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a27      	ldr	r2, [pc, #156]	@ (80027e4 <HAL_TIM_Base_MspInit+0x1a8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10c      	bne.n	8002764 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800274a:	4b22      	ldr	r3, [pc, #136]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4a21      	ldr	r2, [pc, #132]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	61d3      	str	r3, [r2, #28]
 8002756:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
}
 8002762:	e030      	b.n	80027c6 <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM4)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <HAL_TIM_Base_MspInit+0x1ac>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d12b      	bne.n	80027c6 <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800276e:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	61d3      	str	r3, [r2, #28]
 800277a:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6193      	str	r3, [r2, #24]
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <HAL_TIM_Base_MspInit+0x198>)
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800279e:	23c0      	movs	r3, #192	@ 0xc0
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	480a      	ldr	r0, [pc, #40]	@ (80027dc <HAL_TIM_Base_MspInit+0x1a0>)
 80027b2:	f000 fbf3 	bl	8002f9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	201e      	movs	r0, #30
 80027bc:	f000 fb05 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027c0:	201e      	movs	r0, #30
 80027c2:	f000 fb1e 	bl	8002e02 <HAL_NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3738      	adds	r7, #56	@ 0x38
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010800 	.word	0x40010800
 80027dc:	40010c00 	.word	0x40010c00
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800

080027ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a0f      	ldr	r2, [pc, #60]	@ (8002844 <HAL_TIM_MspPostInit+0x58>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d117      	bne.n	800283c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <HAL_TIM_MspPostInit+0x5c>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a0d      	ldr	r2, [pc, #52]	@ (8002848 <HAL_TIM_MspPostInit+0x5c>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_TIM_MspPostInit+0x5c>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002824:	23c0      	movs	r3, #192	@ 0xc0
 8002826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2302      	movs	r3, #2
 800282e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4619      	mov	r1, r3
 8002836:	4805      	ldr	r0, [pc, #20]	@ (800284c <HAL_TIM_MspPostInit+0x60>)
 8002838:	f000 fbb0 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800283c:	bf00      	nop
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40000400 	.word	0x40000400
 8002848:	40021000 	.word	0x40021000
 800284c:	40010800 	.word	0x40010800

08002850 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002854:	4b11      	ldr	r3, [pc, #68]	@ (800289c <MX_USART1_UART_Init+0x4c>)
 8002856:	4a12      	ldr	r2, [pc, #72]	@ (80028a0 <MX_USART1_UART_Init+0x50>)
 8002858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800285a:	4b10      	ldr	r3, [pc, #64]	@ (800289c <MX_USART1_UART_Init+0x4c>)
 800285c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <MX_USART1_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002868:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <MX_USART1_UART_Init+0x4c>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800286e:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <MX_USART1_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002874:	4b09      	ldr	r3, [pc, #36]	@ (800289c <MX_USART1_UART_Init+0x4c>)
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	4b08      	ldr	r3, [pc, #32]	@ (800289c <MX_USART1_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <MX_USART1_UART_Init+0x4c>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002886:	4805      	ldr	r0, [pc, #20]	@ (800289c <MX_USART1_UART_Init+0x4c>)
 8002888:	f002 fa9c 	bl	8004dc4 <HAL_UART_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002892:	f7ff fb90 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200003c4 	.word	0x200003c4
 80028a0:	40013800 	.word	0x40013800

080028a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028a8:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <MX_USART2_UART_Init+0x4c>)
 80028aa:	4a12      	ldr	r2, [pc, #72]	@ (80028f4 <MX_USART2_UART_Init+0x50>)
 80028ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028ae:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <MX_USART2_UART_Init+0x4c>)
 80028b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80028b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028b6:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <MX_USART2_UART_Init+0x4c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <MX_USART2_UART_Init+0x4c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <MX_USART2_UART_Init+0x4c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028c8:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <MX_USART2_UART_Init+0x4c>)
 80028ca:	220c      	movs	r2, #12
 80028cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ce:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <MX_USART2_UART_Init+0x4c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <MX_USART2_UART_Init+0x4c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028da:	4805      	ldr	r0, [pc, #20]	@ (80028f0 <MX_USART2_UART_Init+0x4c>)
 80028dc:	f002 fa72 	bl	8004dc4 <HAL_UART_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028e6:	f7ff fb66 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	2000040c 	.word	0x2000040c
 80028f4:	40004400 	.word	0x40004400

080028f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <MX_USART3_UART_Init+0x4c>)
 80028fe:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <MX_USART3_UART_Init+0x50>)
 8002900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <MX_USART3_UART_Init+0x4c>)
 8002904:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <MX_USART3_UART_Init+0x4c>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <MX_USART3_UART_Init+0x4c>)
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <MX_USART3_UART_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800291c:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <MX_USART3_UART_Init+0x4c>)
 800291e:	220c      	movs	r2, #12
 8002920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002922:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <MX_USART3_UART_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <MX_USART3_UART_Init+0x4c>)
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800292e:	4805      	ldr	r0, [pc, #20]	@ (8002944 <MX_USART3_UART_Init+0x4c>)
 8002930:	f002 fa48 	bl	8004dc4 <HAL_UART_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800293a:	f7ff fb3c 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000454 	.word	0x20000454
 8002948:	40004800 	.word	0x40004800

0800294c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	@ 0x38
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a62      	ldr	r2, [pc, #392]	@ (8002af0 <HAL_UART_MspInit+0x1a4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d13a      	bne.n	80029e2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800296c:	4b61      	ldr	r3, [pc, #388]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	4a60      	ldr	r2, [pc, #384]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002972:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002976:	6193      	str	r3, [r2, #24]
 8002978:	4b5e      	ldr	r3, [pc, #376]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002984:	4b5b      	ldr	r3, [pc, #364]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a5a      	ldr	r2, [pc, #360]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b58      	ldr	r3, [pc, #352]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800299c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ae:	4619      	mov	r1, r3
 80029b0:	4851      	ldr	r0, [pc, #324]	@ (8002af8 <HAL_UART_MspInit+0x1ac>)
 80029b2:	f000 faf3 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029bc:	2300      	movs	r3, #0
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	484b      	ldr	r0, [pc, #300]	@ (8002af8 <HAL_UART_MspInit+0x1ac>)
 80029cc:	f000 fae6 	bl	8002f9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	2025      	movs	r0, #37	@ 0x25
 80029d6:	f000 f9f8 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029da:	2025      	movs	r0, #37	@ 0x25
 80029dc:	f000 fa11 	bl	8002e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029e0:	e082      	b.n	8002ae8 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a45      	ldr	r2, [pc, #276]	@ (8002afc <HAL_UART_MspInit+0x1b0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d12c      	bne.n	8002a46 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ec:	4b41      	ldr	r3, [pc, #260]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4a40      	ldr	r2, [pc, #256]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 80029f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f6:	61d3      	str	r3, [r2, #28]
 80029f8:	4b3e      	ldr	r3, [pc, #248]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a04:	4b3b      	ldr	r3, [pc, #236]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4a3a      	ldr	r2, [pc, #232]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6193      	str	r3, [r2, #24]
 8002a10:	4b38      	ldr	r3, [pc, #224]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2302      	movs	r3, #2
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4832      	ldr	r0, [pc, #200]	@ (8002af8 <HAL_UART_MspInit+0x1ac>)
 8002a30:	f000 fab4 	bl	8002f9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	2026      	movs	r0, #38	@ 0x26
 8002a3a:	f000 f9c6 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a3e:	2026      	movs	r0, #38	@ 0x26
 8002a40:	f000 f9df 	bl	8002e02 <HAL_NVIC_EnableIRQ>
}
 8002a44:	e050      	b.n	8002ae8 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b00 <HAL_UART_MspInit+0x1b4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d14b      	bne.n	8002ae8 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a50:	4b28      	ldr	r3, [pc, #160]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4a27      	ldr	r2, [pc, #156]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5a:	61d3      	str	r3, [r2, #28]
 8002a5c:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a68:	4b22      	ldr	r3, [pc, #136]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	4a21      	ldr	r2, [pc, #132]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002a6e:	f043 0310 	orr.w	r3, r3, #16
 8002a72:	6193      	str	r3, [r2, #24]
 8002a74:	4b1f      	ldr	r3, [pc, #124]	@ (8002af4 <HAL_UART_MspInit+0x1a8>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a92:	4619      	mov	r1, r3
 8002a94:	481b      	ldr	r0, [pc, #108]	@ (8002b04 <HAL_UART_MspInit+0x1b8>)
 8002a96:	f000 fa81 	bl	8002f9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aac:	4619      	mov	r1, r3
 8002aae:	4815      	ldr	r0, [pc, #84]	@ (8002b04 <HAL_UART_MspInit+0x1b8>)
 8002ab0:	f000 fa74 	bl	8002f9c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_UART_MspInit+0x1bc>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002abc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002acc:	f043 0310 	orr.w	r3, r3, #16
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <HAL_UART_MspInit+0x1bc>)
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2100      	movs	r1, #0
 8002adc:	2027      	movs	r0, #39	@ 0x27
 8002ade:	f000 f974 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ae2:	2027      	movs	r0, #39	@ 0x27
 8002ae4:	f000 f98d 	bl	8002e02 <HAL_NVIC_EnableIRQ>
}
 8002ae8:	bf00      	nop
 8002aea:	3738      	adds	r7, #56	@ 0x38
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40013800 	.word	0x40013800
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010800 	.word	0x40010800
 8002afc:	40004400 	.word	0x40004400
 8002b00:	40004800 	.word	0x40004800
 8002b04:	40011000 	.word	0x40011000
 8002b08:	40010000 	.word	0x40010000

08002b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b0c:	f7ff fbbe 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b10:	480b      	ldr	r0, [pc, #44]	@ (8002b40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b12:	490c      	ldr	r1, [pc, #48]	@ (8002b44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b14:	4a0c      	ldr	r2, [pc, #48]	@ (8002b48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b18:	e002      	b.n	8002b20 <LoopCopyDataInit>

08002b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1e:	3304      	adds	r3, #4

08002b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b24:	d3f9      	bcc.n	8002b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b26:	4a09      	ldr	r2, [pc, #36]	@ (8002b4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b28:	4c09      	ldr	r4, [pc, #36]	@ (8002b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b2c:	e001      	b.n	8002b32 <LoopFillZerobss>

08002b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b30:	3204      	adds	r2, #4

08002b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b34:	d3fb      	bcc.n	8002b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b36:	f003 fa83 	bl	8006040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b3a:	f7ff f84d 	bl	8001bd8 <main>
  bx lr
 8002b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8002b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b44:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002b48:	08009a24 	.word	0x08009a24
  ldr r2, =_sbss
 8002b4c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002b50:	200005ec 	.word	0x200005ec

08002b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC1_2_IRQHandler>
	...

08002b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <HAL_Init+0x28>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a07      	ldr	r2, [pc, #28]	@ (8002b80 <HAL_Init+0x28>)
 8002b62:	f043 0310 	orr.w	r3, r3, #16
 8002b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f000 f923 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f000 f808 	bl	8002b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b74:	f7ff fa26 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40022000 	.word	0x40022000

08002b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b8c:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_InitTick+0x54>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_InitTick+0x58>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f93b 	bl	8002e1e <HAL_SYSTICK_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00e      	b.n	8002bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d80a      	bhi.n	8002bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f000 f903 	bl	8002dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc4:	4a06      	ldr	r2, [pc, #24]	@ (8002be0 <HAL_InitTick+0x5c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000010 	.word	0x20000010
 8002bdc:	20000018 	.word	0x20000018
 8002be0:	20000014 	.word	0x20000014

08002be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <HAL_IncTick+0x1c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b05      	ldr	r3, [pc, #20]	@ (8002c04 <HAL_IncTick+0x20>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a03      	ldr	r2, [pc, #12]	@ (8002c04 <HAL_IncTick+0x20>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	20000018 	.word	0x20000018
 8002c04:	2000049c 	.word	0x2000049c

08002c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c0c:	4b02      	ldr	r3, [pc, #8]	@ (8002c18 <HAL_GetTick+0x10>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	2000049c 	.word	0x2000049c

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	@ (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4906      	ldr	r1, [pc, #24]	@ (8002cb4 <__NVIC_EnableIRQ+0x34>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	@ (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	@ (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	@ 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	@ 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d80:	d301      	bcc.n	8002d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00f      	b.n	8002da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <SysTick_Config+0x40>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8e:	210f      	movs	r1, #15
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f7ff ff90 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <SysTick_Config+0x40>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9e:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <SysTick_Config+0x40>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff2d 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ddc:	f7ff ff42 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6978      	ldr	r0, [r7, #20]
 8002de8:	f7ff ff90 	bl	8002d0c <NVIC_EncodePriority>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff5f 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff35 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffa2 	bl	8002d70 <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d008      	beq.n	8002e60 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2204      	movs	r2, #4
 8002e52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e020      	b.n	8002ea2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d005      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e051      	b.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020e 	bic.w	r2, r2, #14
 8002ede:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a22      	ldr	r2, [pc, #136]	@ (8002f80 <HAL_DMA_Abort_IT+0xd4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d029      	beq.n	8002f4e <HAL_DMA_Abort_IT+0xa2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a21      	ldr	r2, [pc, #132]	@ (8002f84 <HAL_DMA_Abort_IT+0xd8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d022      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x9e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1f      	ldr	r2, [pc, #124]	@ (8002f88 <HAL_DMA_Abort_IT+0xdc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01a      	beq.n	8002f44 <HAL_DMA_Abort_IT+0x98>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1e      	ldr	r2, [pc, #120]	@ (8002f8c <HAL_DMA_Abort_IT+0xe0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d012      	beq.n	8002f3e <HAL_DMA_Abort_IT+0x92>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002f90 <HAL_DMA_Abort_IT+0xe4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00a      	beq.n	8002f38 <HAL_DMA_Abort_IT+0x8c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1b      	ldr	r2, [pc, #108]	@ (8002f94 <HAL_DMA_Abort_IT+0xe8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d102      	bne.n	8002f32 <HAL_DMA_Abort_IT+0x86>
 8002f2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f30:	e00e      	b.n	8002f50 <HAL_DMA_Abort_IT+0xa4>
 8002f32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f36:	e00b      	b.n	8002f50 <HAL_DMA_Abort_IT+0xa4>
 8002f38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f3c:	e008      	b.n	8002f50 <HAL_DMA_Abort_IT+0xa4>
 8002f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f42:	e005      	b.n	8002f50 <HAL_DMA_Abort_IT+0xa4>
 8002f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f48:	e002      	b.n	8002f50 <HAL_DMA_Abort_IT+0xa4>
 8002f4a:	2310      	movs	r3, #16
 8002f4c:	e000      	b.n	8002f50 <HAL_DMA_Abort_IT+0xa4>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <HAL_DMA_Abort_IT+0xec>)
 8002f52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
    } 
  }
  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40020008 	.word	0x40020008
 8002f84:	4002001c 	.word	0x4002001c
 8002f88:	40020030 	.word	0x40020030
 8002f8c:	40020044 	.word	0x40020044
 8002f90:	40020058 	.word	0x40020058
 8002f94:	4002006c 	.word	0x4002006c
 8002f98:	40020000 	.word	0x40020000

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b08b      	sub	sp, #44	@ 0x2c
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fae:	e169      	b.n	8003284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	f040 8158 	bne.w	800327e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a9a      	ldr	r2, [pc, #616]	@ (800323c <HAL_GPIO_Init+0x2a0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d05e      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002fd8:	4a98      	ldr	r2, [pc, #608]	@ (800323c <HAL_GPIO_Init+0x2a0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d875      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8002fde:	4a98      	ldr	r2, [pc, #608]	@ (8003240 <HAL_GPIO_Init+0x2a4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d058      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002fe4:	4a96      	ldr	r2, [pc, #600]	@ (8003240 <HAL_GPIO_Init+0x2a4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d86f      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8002fea:	4a96      	ldr	r2, [pc, #600]	@ (8003244 <HAL_GPIO_Init+0x2a8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d052      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002ff0:	4a94      	ldr	r2, [pc, #592]	@ (8003244 <HAL_GPIO_Init+0x2a8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d869      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8002ff6:	4a94      	ldr	r2, [pc, #592]	@ (8003248 <HAL_GPIO_Init+0x2ac>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04c      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002ffc:	4a92      	ldr	r2, [pc, #584]	@ (8003248 <HAL_GPIO_Init+0x2ac>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d863      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8003002:	4a92      	ldr	r2, [pc, #584]	@ (800324c <HAL_GPIO_Init+0x2b0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d046      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8003008:	4a90      	ldr	r2, [pc, #576]	@ (800324c <HAL_GPIO_Init+0x2b0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d85d      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 800300e:	2b12      	cmp	r3, #18
 8003010:	d82a      	bhi.n	8003068 <HAL_GPIO_Init+0xcc>
 8003012:	2b12      	cmp	r3, #18
 8003014:	d859      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <HAL_GPIO_Init+0x80>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003097 	.word	0x08003097
 8003020:	08003071 	.word	0x08003071
 8003024:	08003083 	.word	0x08003083
 8003028:	080030c5 	.word	0x080030c5
 800302c:	080030cb 	.word	0x080030cb
 8003030:	080030cb 	.word	0x080030cb
 8003034:	080030cb 	.word	0x080030cb
 8003038:	080030cb 	.word	0x080030cb
 800303c:	080030cb 	.word	0x080030cb
 8003040:	080030cb 	.word	0x080030cb
 8003044:	080030cb 	.word	0x080030cb
 8003048:	080030cb 	.word	0x080030cb
 800304c:	080030cb 	.word	0x080030cb
 8003050:	080030cb 	.word	0x080030cb
 8003054:	080030cb 	.word	0x080030cb
 8003058:	080030cb 	.word	0x080030cb
 800305c:	080030cb 	.word	0x080030cb
 8003060:	08003079 	.word	0x08003079
 8003064:	0800308d 	.word	0x0800308d
 8003068:	4a79      	ldr	r2, [pc, #484]	@ (8003250 <HAL_GPIO_Init+0x2b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800306e:	e02c      	b.n	80030ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	623b      	str	r3, [r7, #32]
          break;
 8003076:	e029      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	3304      	adds	r3, #4
 800307e:	623b      	str	r3, [r7, #32]
          break;
 8003080:	e024      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	3308      	adds	r3, #8
 8003088:	623b      	str	r3, [r7, #32]
          break;
 800308a:	e01f      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	330c      	adds	r3, #12
 8003092:	623b      	str	r3, [r7, #32]
          break;
 8003094:	e01a      	b.n	80030cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800309e:	2304      	movs	r3, #4
 80030a0:	623b      	str	r3, [r7, #32]
          break;
 80030a2:	e013      	b.n	80030cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ac:	2308      	movs	r3, #8
 80030ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	611a      	str	r2, [r3, #16]
          break;
 80030b6:	e009      	b.n	80030cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030b8:	2308      	movs	r3, #8
 80030ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	615a      	str	r2, [r3, #20]
          break;
 80030c2:	e003      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
          break;
 80030c8:	e000      	b.n	80030cc <HAL_GPIO_Init+0x130>
          break;
 80030ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2bff      	cmp	r3, #255	@ 0xff
 80030d0:	d801      	bhi.n	80030d6 <HAL_GPIO_Init+0x13a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	e001      	b.n	80030da <HAL_GPIO_Init+0x13e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2bff      	cmp	r3, #255	@ 0xff
 80030e0:	d802      	bhi.n	80030e8 <HAL_GPIO_Init+0x14c>
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	e002      	b.n	80030ee <HAL_GPIO_Init+0x152>
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	3b08      	subs	r3, #8
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	210f      	movs	r1, #15
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	431a      	orrs	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80b1 	beq.w	800327e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800311c:	4b4d      	ldr	r3, [pc, #308]	@ (8003254 <HAL_GPIO_Init+0x2b8>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4a4c      	ldr	r2, [pc, #304]	@ (8003254 <HAL_GPIO_Init+0x2b8>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6193      	str	r3, [r2, #24]
 8003128:	4b4a      	ldr	r3, [pc, #296]	@ (8003254 <HAL_GPIO_Init+0x2b8>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003134:	4a48      	ldr	r2, [pc, #288]	@ (8003258 <HAL_GPIO_Init+0x2bc>)
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a40      	ldr	r2, [pc, #256]	@ (800325c <HAL_GPIO_Init+0x2c0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_GPIO_Init+0x1ec>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3f      	ldr	r2, [pc, #252]	@ (8003260 <HAL_GPIO_Init+0x2c4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00d      	beq.n	8003184 <HAL_GPIO_Init+0x1e8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3e      	ldr	r2, [pc, #248]	@ (8003264 <HAL_GPIO_Init+0x2c8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <HAL_GPIO_Init+0x1e4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3d      	ldr	r2, [pc, #244]	@ (8003268 <HAL_GPIO_Init+0x2cc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_GPIO_Init+0x1e0>
 8003178:	2303      	movs	r3, #3
 800317a:	e006      	b.n	800318a <HAL_GPIO_Init+0x1ee>
 800317c:	2304      	movs	r3, #4
 800317e:	e004      	b.n	800318a <HAL_GPIO_Init+0x1ee>
 8003180:	2302      	movs	r3, #2
 8003182:	e002      	b.n	800318a <HAL_GPIO_Init+0x1ee>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_GPIO_Init+0x1ee>
 8003188:	2300      	movs	r3, #0
 800318a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318c:	f002 0203 	and.w	r2, r2, #3
 8003190:	0092      	lsls	r2, r2, #2
 8003192:	4093      	lsls	r3, r2
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800319a:	492f      	ldr	r1, [pc, #188]	@ (8003258 <HAL_GPIO_Init+0x2bc>)
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	3302      	adds	r3, #2
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031b4:	4b2d      	ldr	r3, [pc, #180]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	492c      	ldr	r1, [pc, #176]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031c2:	4b2a      	ldr	r3, [pc, #168]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	4928      	ldr	r1, [pc, #160]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d006      	beq.n	80031ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031dc:	4b23      	ldr	r3, [pc, #140]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4922      	ldr	r1, [pc, #136]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60cb      	str	r3, [r1, #12]
 80031e8:	e006      	b.n	80031f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031ea:	4b20      	ldr	r3, [pc, #128]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	491e      	ldr	r1, [pc, #120]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003204:	4b19      	ldr	r3, [pc, #100]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4918      	ldr	r1, [pc, #96]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
 8003210:	e006      	b.n	8003220 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003212:	4b16      	ldr	r3, [pc, #88]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	43db      	mvns	r3, r3
 800321a:	4914      	ldr	r1, [pc, #80]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 800321c:	4013      	ands	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d021      	beq.n	8003270 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800322c:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	490e      	ldr	r1, [pc, #56]	@ (800326c <HAL_GPIO_Init+0x2d0>)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e021      	b.n	800327e <HAL_GPIO_Init+0x2e2>
 800323a:	bf00      	nop
 800323c:	10320000 	.word	0x10320000
 8003240:	10310000 	.word	0x10310000
 8003244:	10220000 	.word	0x10220000
 8003248:	10210000 	.word	0x10210000
 800324c:	10120000 	.word	0x10120000
 8003250:	10110000 	.word	0x10110000
 8003254:	40021000 	.word	0x40021000
 8003258:	40010000 	.word	0x40010000
 800325c:	40010800 	.word	0x40010800
 8003260:	40010c00 	.word	0x40010c00
 8003264:	40011000 	.word	0x40011000
 8003268:	40011400 	.word	0x40011400
 800326c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003270:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <HAL_GPIO_Init+0x304>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	43db      	mvns	r3, r3
 8003278:	4909      	ldr	r1, [pc, #36]	@ (80032a0 <HAL_GPIO_Init+0x304>)
 800327a:	4013      	ands	r3, r2
 800327c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	3301      	adds	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	f47f ae8e 	bne.w	8002fb0 <HAL_GPIO_Init+0x14>
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	372c      	adds	r7, #44	@ 0x2c
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	40010400 	.word	0x40010400

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032c0:	e003      	b.n	80032ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	041a      	lsls	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	611a      	str	r2, [r3, #16]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032de:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d006      	beq.n	80032f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ea:	4a05      	ldr	r2, [pc, #20]	@ (8003300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f806 	bl	8003304 <HAL_GPIO_EXTI_Callback>
  }
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40010400 	.word	0x40010400

08003304 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e272      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8087 	beq.w	8003446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003338:	4b92      	ldr	r3, [pc, #584]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	d00c      	beq.n	800335e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003344:	4b8f      	ldr	r3, [pc, #572]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d112      	bne.n	8003376 <HAL_RCC_OscConfig+0x5e>
 8003350:	4b8c      	ldr	r3, [pc, #560]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335c:	d10b      	bne.n	8003376 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	4b89      	ldr	r3, [pc, #548]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06c      	beq.n	8003444 <HAL_RCC_OscConfig+0x12c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d168      	bne.n	8003444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e24c      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x76>
 8003380:	4b80      	ldr	r3, [pc, #512]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a7f      	ldr	r2, [pc, #508]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02e      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b7b      	ldr	r3, [pc, #492]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7a      	ldr	r2, [pc, #488]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b78      	ldr	r3, [pc, #480]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a77      	ldr	r2, [pc, #476]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0xbc>
 80033ba:	4b72      	ldr	r3, [pc, #456]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a71      	ldr	r2, [pc, #452]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 80033d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b68      	ldr	r3, [pc, #416]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a67      	ldr	r2, [pc, #412]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7ff fc08 	bl	8002c08 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7ff fc04 	bl	8002c08 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e200      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b5d      	ldr	r3, [pc, #372]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xe4>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7ff fbf4 	bl	8002c08 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7ff fbf0 	bl	8002c08 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1ec      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	4b53      	ldr	r3, [pc, #332]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x10c>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d063      	beq.n	800351a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003452:	4b4c      	ldr	r3, [pc, #304]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800345e:	4b49      	ldr	r3, [pc, #292]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b08      	cmp	r3, #8
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x18c>
 800346a:	4b46      	ldr	r3, [pc, #280]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	4b43      	ldr	r3, [pc, #268]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x176>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1c0      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b3d      	ldr	r3, [pc, #244]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4939      	ldr	r1, [pc, #228]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	e03a      	b.n	800351a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b36      	ldr	r3, [pc, #216]	@ (8003588 <HAL_RCC_OscConfig+0x270>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7ff fba9 	bl	8002c08 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ba:	f7ff fba5 	bl	8002c08 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e1a1      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4927      	ldr	r1, [pc, #156]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
 80034ec:	e015      	b.n	800351a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ee:	4b26      	ldr	r3, [pc, #152]	@ (8003588 <HAL_RCC_OscConfig+0x270>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7ff fb88 	bl	8002c08 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fc:	f7ff fb84 	bl	8002c08 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e180      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d03a      	beq.n	800359c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352e:	4b17      	ldr	r3, [pc, #92]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003534:	f7ff fb68 	bl	8002c08 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353c:	f7ff fb64 	bl	8002c08 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e160      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800355a:	2001      	movs	r0, #1
 800355c:	f000 face 	bl	8003afc <RCC_Delay>
 8003560:	e01c      	b.n	800359c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003568:	f7ff fb4e 	bl	8002c08 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356e:	e00f      	b.n	8003590 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7ff fb4a 	bl	8002c08 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d908      	bls.n	8003590 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e146      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	42420000 	.word	0x42420000
 800358c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b92      	ldr	r3, [pc, #584]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e9      	bne.n	8003570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a6 	beq.w	80036f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b8b      	ldr	r3, [pc, #556]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	4b88      	ldr	r3, [pc, #544]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4a87      	ldr	r2, [pc, #540]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	61d3      	str	r3, [r2, #28]
 80035c6:	4b85      	ldr	r3, [pc, #532]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b82      	ldr	r3, [pc, #520]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d118      	bne.n	8003614 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4b7f      	ldr	r3, [pc, #508]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7e      	ldr	r2, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7ff fb0b 	bl	8002c08 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7ff fb07 	bl	8002c08 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b64      	cmp	r3, #100	@ 0x64
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e103      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	4b75      	ldr	r3, [pc, #468]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x312>
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a6e      	ldr	r2, [pc, #440]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6213      	str	r3, [r2, #32]
 8003628:	e02d      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x334>
 8003632:	4b6a      	ldr	r3, [pc, #424]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a69      	ldr	r2, [pc, #420]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	4b67      	ldr	r3, [pc, #412]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4a66      	ldr	r2, [pc, #408]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6213      	str	r3, [r2, #32]
 800364a:	e01c      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b05      	cmp	r3, #5
 8003652:	d10c      	bne.n	800366e <HAL_RCC_OscConfig+0x356>
 8003654:	4b61      	ldr	r3, [pc, #388]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a60      	ldr	r2, [pc, #384]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800365a:	f043 0304 	orr.w	r3, r3, #4
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	4b5e      	ldr	r3, [pc, #376]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4a5d      	ldr	r2, [pc, #372]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	e00b      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
 800366e:	4b5b      	ldr	r3, [pc, #364]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a5a      	ldr	r2, [pc, #360]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	4b58      	ldr	r3, [pc, #352]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a57      	ldr	r2, [pc, #348]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d015      	beq.n	80036ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7ff fabb 	bl	8002c08 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7ff fab7 	bl	8002c08 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e0b1      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	4b4b      	ldr	r3, [pc, #300]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ee      	beq.n	8003696 <HAL_RCC_OscConfig+0x37e>
 80036b8:	e014      	b.n	80036e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7ff faa5 	bl	8002c08 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7ff faa1 	bl	8002c08 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e09b      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	4b40      	ldr	r3, [pc, #256]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ee      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d105      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ea:	4b3c      	ldr	r3, [pc, #240]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4a3b      	ldr	r2, [pc, #236]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8087 	beq.w	800380e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003700:	4b36      	ldr	r3, [pc, #216]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b08      	cmp	r3, #8
 800370a:	d061      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d146      	bne.n	80037a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003714:	4b33      	ldr	r3, [pc, #204]	@ (80037e4 <HAL_RCC_OscConfig+0x4cc>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7ff fa75 	bl	8002c08 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003722:	f7ff fa71 	bl	8002c08 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e06d      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003734:	4b29      	ldr	r3, [pc, #164]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003748:	d108      	bne.n	800375c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800374a:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4921      	ldr	r1, [pc, #132]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800375c:	4b1f      	ldr	r3, [pc, #124]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a19      	ldr	r1, [r3, #32]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	430b      	orrs	r3, r1
 800376e:	491b      	ldr	r1, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b1b      	ldr	r3, [pc, #108]	@ (80037e4 <HAL_RCC_OscConfig+0x4cc>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7ff fa45 	bl	8002c08 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003782:	f7ff fa41 	bl	8002c08 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e03d      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x46a>
 80037a0:	e035      	b.n	800380e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <HAL_RCC_OscConfig+0x4cc>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7ff fa2e 	bl	8002c08 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7ff fa2a 	bl	8002c08 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e026      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x498>
 80037ce:	e01e      	b.n	800380e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e019      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40007000 	.word	0x40007000
 80037e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_OscConfig+0x500>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d001      	beq.n	800380e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000

0800381c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0d0      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b6a      	ldr	r3, [pc, #424]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d910      	bls.n	8003860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b67      	ldr	r3, [pc, #412]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	4965      	ldr	r1, [pc, #404]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b63      	ldr	r3, [pc, #396]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0b8      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003878:	4b59      	ldr	r3, [pc, #356]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a58      	ldr	r2, [pc, #352]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003890:	4b53      	ldr	r3, [pc, #332]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a52      	ldr	r2, [pc, #328]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800389a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389c:	4b50      	ldr	r3, [pc, #320]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	494d      	ldr	r1, [pc, #308]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d040      	beq.n	800393c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d115      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e073      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3d      	ldr	r3, [pc, #244]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e06b      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4936      	ldr	r1, [pc, #216]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7ff f97c 	bl	8002c08 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7ff f978 	bl	8002c08 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e053      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d210      	bcs.n	800396c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b24      	ldr	r3, [pc, #144]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 0207 	bic.w	r2, r3, #7
 8003952:	4922      	ldr	r1, [pc, #136]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e032      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4916      	ldr	r1, [pc, #88]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	490e      	ldr	r1, [pc, #56]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039aa:	f000 f821 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490a      	ldr	r1, [pc, #40]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	4a09      	ldr	r2, [pc, #36]	@ (80039e8 <HAL_RCC_ClockConfig+0x1cc>)
 80039c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039c6:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <HAL_RCC_ClockConfig+0x1d0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff f8da 	bl	8002b84 <HAL_InitTick>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40022000 	.word	0x40022000
 80039e0:	40021000 	.word	0x40021000
 80039e4:	0800960c 	.word	0x0800960c
 80039e8:	20000010 	.word	0x20000010
 80039ec:	20000014 	.word	0x20000014

080039f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d002      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x30>
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0x36>
 8003a1e:	e027      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a20:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a22:	613b      	str	r3, [r7, #16]
      break;
 8003a24:	e027      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	0c9b      	lsrs	r3, r3, #18
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	4a17      	ldr	r2, [pc, #92]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a30:	5cd3      	ldrb	r3, [r2, r3]
 8003a32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d010      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	0c5b      	lsrs	r3, r3, #17
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	4a11      	ldr	r2, [pc, #68]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a4a:	5cd3      	ldrb	r3, [r2, r3]
 8003a4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a0d      	ldr	r2, [pc, #52]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a52:	fb03 f202 	mul.w	r2, r3, r2
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e004      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0c      	ldr	r2, [pc, #48]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	613b      	str	r3, [r7, #16]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a72:	613b      	str	r3, [r7, #16]
      break;
 8003a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a76:	693b      	ldr	r3, [r7, #16]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	007a1200 	.word	0x007a1200
 8003a8c:	08009624 	.word	0x08009624
 8003a90:	08009634 	.word	0x08009634
 8003a94:	003d0900 	.word	0x003d0900

08003a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a9c:	4b02      	ldr	r3, [pc, #8]	@ (8003aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20000010 	.word	0x20000010

08003aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ab0:	f7ff fff2 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4903      	ldr	r1, [pc, #12]	@ (8003ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	0800961c 	.word	0x0800961c

08003ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad8:	f7ff ffde 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	0adb      	lsrs	r3, r3, #11
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4903      	ldr	r1, [pc, #12]	@ (8003af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	0800961c 	.word	0x0800961c

08003afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b04:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <RCC_Delay+0x34>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0a      	ldr	r2, [pc, #40]	@ (8003b34 <RCC_Delay+0x38>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0a5b      	lsrs	r3, r3, #9
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b18:	bf00      	nop
  }
  while (Delay --);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	60fa      	str	r2, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f9      	bne.n	8003b18 <RCC_Delay+0x1c>
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	20000010 	.word	0x20000010
 8003b34:	10624dd3 	.word	0x10624dd3

08003b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e041      	b.n	8003bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe fd6c 	bl	800263c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f000 fcf6 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e041      	b.n	8003c6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f839 	bl	8003c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f000 fca7 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <HAL_TIM_PWM_Start+0x24>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e022      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x6a>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d109      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0x3e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e015      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x6a>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d109      	bne.n	8003ce0 <HAL_TIM_PWM_Start+0x58>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e008      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x6a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e05e      	b.n	8003db8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <HAL_TIM_PWM_Start+0x82>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d08:	e013      	b.n	8003d32 <HAL_TIM_PWM_Start+0xaa>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d104      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x92>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d18:	e00b      	b.n	8003d32 <HAL_TIM_PWM_Start+0xaa>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_PWM_Start+0xa2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d28:	e003      	b.n	8003d32 <HAL_TIM_PWM_Start+0xaa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2201      	movs	r2, #1
 8003d38:	6839      	ldr	r1, [r7, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 ffad 	bl	8004c9a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc0 <HAL_TIM_PWM_Start+0x138>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d107      	bne.n	8003d5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a18      	ldr	r2, [pc, #96]	@ (8003dc0 <HAL_TIM_PWM_Start+0x138>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_TIM_PWM_Start+0xfa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d6c:	d009      	beq.n	8003d82 <HAL_TIM_PWM_Start+0xfa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a14      	ldr	r2, [pc, #80]	@ (8003dc4 <HAL_TIM_PWM_Start+0x13c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_TIM_PWM_Start+0xfa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a12      	ldr	r2, [pc, #72]	@ (8003dc8 <HAL_TIM_PWM_Start+0x140>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d111      	bne.n	8003da6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d010      	beq.n	8003db6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da4:	e007      	b.n	8003db6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800

08003dcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f839 	bl	8003e6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 fbac 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d020      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01b      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0202 	mvn.w	r2, #2
 8003eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd fac6 	bl	8001458 <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fb2e 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fb34 	bl	8004542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d020      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01b      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0204 	mvn.w	r2, #4
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd faa0 	bl	8001458 <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fb08 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fb0e 	bl	8004542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0208 	mvn.w	r2, #8
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fd fa7a 	bl	8001458 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fae2 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fae8 	bl	8004542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0210 	mvn.w	r2, #16
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fa54 	bl	8001458 <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fabc 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fac2 	bl	8004542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0201 	mvn.w	r2, #1
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fd f92a 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00c      	beq.n	800400c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fed3 	bl	8004db2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00c      	beq.n	8004030 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa92 	bl	8004554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0220 	mvn.w	r2, #32
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fea6 	bl	8004da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004076:	2302      	movs	r3, #2
 8004078:	e088      	b.n	800418c <HAL_TIM_IC_ConfigChannel+0x130>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004098:	f000 fc5c 	bl	8004954 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 020c 	bic.w	r2, r2, #12
 80040aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6999      	ldr	r1, [r3, #24]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	619a      	str	r2, [r3, #24]
 80040be:	e060      	b.n	8004182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d11c      	bne.n	8004100 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80040d6:	f000 fcc5 	bl	8004a64 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80040e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6999      	ldr	r1, [r3, #24]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	021a      	lsls	r2, r3, #8
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	619a      	str	r2, [r3, #24]
 80040fe:	e040      	b.n	8004182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b08      	cmp	r3, #8
 8004104:	d11b      	bne.n	800413e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004116:	f000 fd10 	bl	8004b3a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 020c 	bic.w	r2, r2, #12
 8004128:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69d9      	ldr	r1, [r3, #28]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	61da      	str	r2, [r3, #28]
 800413c:	e021      	b.n	8004182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b0c      	cmp	r3, #12
 8004142:	d11c      	bne.n	800417e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004154:	f000 fd2c 	bl	8004bb0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004166:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69d9      	ldr	r1, [r3, #28]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	021a      	lsls	r2, r3, #8
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	61da      	str	r2, [r3, #28]
 800417c:	e001      	b.n	8004182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0ae      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	f200 809f 	bhi.w	8004300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041c2:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	08004301 	.word	0x08004301
 80041d0:	08004301 	.word	0x08004301
 80041d4:	08004301 	.word	0x08004301
 80041d8:	0800423d 	.word	0x0800423d
 80041dc:	08004301 	.word	0x08004301
 80041e0:	08004301 	.word	0x08004301
 80041e4:	08004301 	.word	0x08004301
 80041e8:	0800427f 	.word	0x0800427f
 80041ec:	08004301 	.word	0x08004301
 80041f0:	08004301 	.word	0x08004301
 80041f4:	08004301 	.word	0x08004301
 80041f8:	080042bf 	.word	0x080042bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fa1e 	bl	8004644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0208 	orr.w	r2, r2, #8
 8004216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6999      	ldr	r1, [r3, #24]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	619a      	str	r2, [r3, #24]
      break;
 800423a:	e064      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fa64 	bl	8004710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	619a      	str	r2, [r3, #24]
      break;
 800427c:	e043      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 faad 	bl	80047e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0208 	orr.w	r2, r2, #8
 8004298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0204 	bic.w	r2, r2, #4
 80042a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69d9      	ldr	r1, [r3, #28]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	61da      	str	r2, [r3, #28]
      break;
 80042bc:	e023      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 faf7 	bl	80048b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69d9      	ldr	r1, [r3, #28]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	021a      	lsls	r2, r3, #8
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	61da      	str	r2, [r3, #28]
      break;
 80042fe:	e002      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
      break;
 8004304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIM_ConfigClockSource+0x1c>
 8004330:	2302      	movs	r3, #2
 8004332:	e0b4      	b.n	800449e <HAL_TIM_ConfigClockSource+0x186>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800435a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800436c:	d03e      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0xd4>
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004372:	f200 8087 	bhi.w	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437a:	f000 8086 	beq.w	800448a <HAL_TIM_ConfigClockSource+0x172>
 800437e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004382:	d87f      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b70      	cmp	r3, #112	@ 0x70
 8004386:	d01a      	beq.n	80043be <HAL_TIM_ConfigClockSource+0xa6>
 8004388:	2b70      	cmp	r3, #112	@ 0x70
 800438a:	d87b      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b60      	cmp	r3, #96	@ 0x60
 800438e:	d050      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x11a>
 8004390:	2b60      	cmp	r3, #96	@ 0x60
 8004392:	d877      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 8004394:	2b50      	cmp	r3, #80	@ 0x50
 8004396:	d03c      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0xfa>
 8004398:	2b50      	cmp	r3, #80	@ 0x50
 800439a:	d873      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 800439c:	2b40      	cmp	r3, #64	@ 0x40
 800439e:	d058      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x13a>
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	d86f      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 80043a4:	2b30      	cmp	r3, #48	@ 0x30
 80043a6:	d064      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043a8:	2b30      	cmp	r3, #48	@ 0x30
 80043aa:	d86b      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d060      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d867      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d05c      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d05a      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043bc:	e062      	b.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ce:	f000 fc45 	bl	8004c5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	609a      	str	r2, [r3, #8]
      break;
 80043ea:	e04f      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043fc:	f000 fc2e 	bl	8004c5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800440e:	609a      	str	r2, [r3, #8]
      break;
 8004410:	e03c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	461a      	mov	r2, r3
 8004420:	f000 faf2 	bl	8004a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2150      	movs	r1, #80	@ 0x50
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fbfc 	bl	8004c28 <TIM_ITRx_SetConfig>
      break;
 8004430:	e02c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800443e:	461a      	mov	r2, r3
 8004440:	f000 fb4c 	bl	8004adc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2160      	movs	r1, #96	@ 0x60
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fbec 	bl	8004c28 <TIM_ITRx_SetConfig>
      break;
 8004450:	e01c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	461a      	mov	r2, r3
 8004460:	f000 fad2 	bl	8004a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2140      	movs	r1, #64	@ 0x40
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fbdc 	bl	8004c28 <TIM_ITRx_SetConfig>
      break;
 8004470:	e00c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f000 fbd3 	bl	8004c28 <TIM_ITRx_SetConfig>
      break;
 8004482:	e003      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      break;
 8004488:	e000      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800448a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d831      	bhi.n	8004520 <HAL_TIM_ReadCapturedValue+0x78>
 80044bc:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	08004521 	.word	0x08004521
 80044cc:	08004521 	.word	0x08004521
 80044d0:	08004521 	.word	0x08004521
 80044d4:	08004503 	.word	0x08004503
 80044d8:	08004521 	.word	0x08004521
 80044dc:	08004521 	.word	0x08004521
 80044e0:	08004521 	.word	0x08004521
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004521 	.word	0x08004521
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004521 	.word	0x08004521
 80044f4:	08004517 	.word	0x08004517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fe:	60fb      	str	r3, [r7, #12]

      break;
 8004500:	e00f      	b.n	8004522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004508:	60fb      	str	r3, [r7, #12]

      break;
 800450a:	e00a      	b.n	8004522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	60fb      	str	r3, [r7, #12]

      break;
 8004514:	e005      	b.n	8004522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	60fb      	str	r3, [r7, #12]

      break;
 800451e:	e000      	b.n	8004522 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004520:	bf00      	nop
  }

  return tmpreg;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop

08004530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
	...

08004568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a2f      	ldr	r2, [pc, #188]	@ (8004638 <TIM_Base_SetConfig+0xd0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <TIM_Base_SetConfig+0x30>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004586:	d007      	beq.n	8004598 <TIM_Base_SetConfig+0x30>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a2c      	ldr	r2, [pc, #176]	@ (800463c <TIM_Base_SetConfig+0xd4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0x30>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a2b      	ldr	r2, [pc, #172]	@ (8004640 <TIM_Base_SetConfig+0xd8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d108      	bne.n	80045aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a22      	ldr	r2, [pc, #136]	@ (8004638 <TIM_Base_SetConfig+0xd0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0x62>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0x62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1f      	ldr	r2, [pc, #124]	@ (800463c <TIM_Base_SetConfig+0xd4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0x62>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004640 <TIM_Base_SetConfig+0xd8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0d      	ldr	r2, [pc, #52]	@ (8004638 <TIM_Base_SetConfig+0xd0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]
  }
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800

08004644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f023 0201 	bic.w	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f023 0302 	bic.w	r3, r3, #2
 800468c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a1c      	ldr	r2, [pc, #112]	@ (800470c <TIM_OC1_SetConfig+0xc8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10c      	bne.n	80046ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f023 0308 	bic.w	r3, r3, #8
 80046a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f023 0304 	bic.w	r3, r3, #4
 80046b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a13      	ldr	r2, [pc, #76]	@ (800470c <TIM_OC1_SetConfig+0xc8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d111      	bne.n	80046e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	621a      	str	r2, [r3, #32]
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00

08004710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f023 0210 	bic.w	r2, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800473e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 0320 	bic.w	r3, r3, #32
 800475a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a1d      	ldr	r2, [pc, #116]	@ (80047e0 <TIM_OC2_SetConfig+0xd0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10d      	bne.n	800478c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800478a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a14      	ldr	r2, [pc, #80]	@ (80047e0 <TIM_OC2_SetConfig+0xd0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d113      	bne.n	80047bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800479a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	40012c00 	.word	0x40012c00

080047e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800482c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1d      	ldr	r2, [pc, #116]	@ (80048b4 <TIM_OC3_SetConfig+0xd0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10d      	bne.n	800485e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800485c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a14      	ldr	r2, [pc, #80]	@ (80048b4 <TIM_OC3_SetConfig+0xd0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d113      	bne.n	800488e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800486c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	621a      	str	r2, [r3, #32]
}
 80048a8:	bf00      	nop
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40012c00 	.word	0x40012c00

080048b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	031b      	lsls	r3, r3, #12
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a0f      	ldr	r2, [pc, #60]	@ (8004950 <TIM_OC4_SetConfig+0x98>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d109      	bne.n	800492c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800491e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	019b      	lsls	r3, r3, #6
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr
 8004950:	40012c00 	.word	0x40012c00

08004954 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f023 0201 	bic.w	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a1f      	ldr	r2, [pc, #124]	@ (80049fc <TIM_TI1_SetConfig+0xa8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_TI1_SetConfig+0x46>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004988:	d007      	beq.n	800499a <TIM_TI1_SetConfig+0x46>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a00 <TIM_TI1_SetConfig+0xac>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_TI1_SetConfig+0x46>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <TIM_TI1_SetConfig+0xb0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <TIM_TI1_SetConfig+0x4a>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <TIM_TI1_SetConfig+0x4c>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e003      	b.n	80049be <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f023 030a 	bic.w	r3, r3, #10
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f003 030a 	and.w	r3, r3, #10
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800

08004a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 030a 	bic.w	r3, r3, #10
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f023 0210 	bic.w	r2, r3, #16
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	031b      	lsls	r3, r3, #12
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ab6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f023 0210 	bic.w	r2, r3, #16
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	031b      	lsls	r3, r3, #12
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	621a      	str	r2, [r3, #32]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b087      	sub	sp, #28
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	031b      	lsls	r3, r3, #12
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c02:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	031b      	lsls	r3, r3, #12
 8004c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f043 0307 	orr.w	r3, r3, #7
 8004c4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	609a      	str	r2, [r3, #8]
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	021a      	lsls	r2, r3, #8
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	609a      	str	r2, [r3, #8]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr

08004c9a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b087      	sub	sp, #28
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	2201      	movs	r2, #1
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	401a      	ands	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1a      	ldr	r2, [r3, #32]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
	...

08004ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e046      	b.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	@ (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d48:	d009      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a12      	ldr	r2, [pc, #72]	@ (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a10      	ldr	r2, [pc, #64]	@ (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10c      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr
 8004d94:	40012c00 	.word	0x40012c00
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800

08004da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e042      	b.n	8004e5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fd fdae 	bl	800294c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2224      	movs	r2, #36	@ 0x24
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fcd5 	bl	80057b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	d112      	bne.n	8004ea4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_UART_Receive_IT+0x26>
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e00b      	b.n	8004ea6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	461a      	mov	r2, r3
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fab7 	bl	800540e <UART_Start_Receive_IT>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	e000      	b.n	8004ea6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
  }
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b0ba      	sub	sp, #232	@ 0xe8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <HAL_UART_IRQHandler+0x66>
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fb93 	bl	800563a <UART_Receive_IT>
      return;
 8004f14:	e25b      	b.n	80053ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80de 	beq.w	80050dc <HAL_UART_IRQHandler+0x22c>
 8004f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80d1 	beq.w	80050dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_UART_IRQHandler+0xae>
 8004f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f56:	f043 0201 	orr.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_UART_IRQHandler+0xd2>
 8004f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7a:	f043 0202 	orr.w	r2, r3, #2
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <HAL_UART_IRQHandler+0xf6>
 8004f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9e:	f043 0204 	orr.w	r2, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d011      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x126>
 8004fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d105      	bne.n	8004fca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fce:	f043 0208 	orr.w	r2, r3, #8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 81f2 	beq.w	80053c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_UART_IRQHandler+0x14e>
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fb1e 	bl	800563a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <HAL_UART_IRQHandler+0x17a>
 8005022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04f      	beq.n	80050ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa28 	bl	8005480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d041      	beq.n	80050c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800505c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3314      	adds	r3, #20
 8005066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800506a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800506e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1d9      	bne.n	800503e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d013      	beq.n	80050ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	4a7e      	ldr	r2, [pc, #504]	@ (8005290 <HAL_UART_IRQHandler+0x3e0>)
 8005098:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd ff04 	bl	8002eac <HAL_DMA_Abort_IT>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d016      	beq.n	80050d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050b4:	4610      	mov	r0, r2
 80050b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b8:	e00e      	b.n	80050d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f993 	bl	80053e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c0:	e00a      	b.n	80050d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f98f 	bl	80053e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c8:	e006      	b.n	80050d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f98b 	bl	80053e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80050d6:	e175      	b.n	80053c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	bf00      	nop
    return;
 80050da:	e173      	b.n	80053c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	f040 814f 	bne.w	8005384 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8148 	beq.w	8005384 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8141 	beq.w	8005384 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 80b6 	beq.w	8005294 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005134:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8145 	beq.w	80053c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005146:	429a      	cmp	r2, r3
 8005148:	f080 813e 	bcs.w	80053c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005152:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b20      	cmp	r3, #32
 800515c:	f000 8088 	beq.w	8005270 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005176:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800517a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800517e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800518c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005190:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005198:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1d9      	bne.n	8005160 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3314      	adds	r3, #20
 80051b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051be:	f023 0301 	bic.w	r3, r3, #1
 80051c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3314      	adds	r3, #20
 80051cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e1      	bne.n	80051ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800520c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800520e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005212:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800521a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e3      	bne.n	80051e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800523e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005240:	f023 0310 	bic.w	r3, r3, #16
 8005244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005252:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005254:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005258:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e3      	bne.n	800522e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526a:	4618      	mov	r0, r3
 800526c:	f7fd fde3 	bl	8002e36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800527e:	b29b      	uxth	r3, r3
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	b29b      	uxth	r3, r3
 8005284:	4619      	mov	r1, r3
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8b6 	bl	80053f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800528c:	e09c      	b.n	80053c8 <HAL_UART_IRQHandler+0x518>
 800528e:	bf00      	nop
 8005290:	08005545 	.word	0x08005545
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800529c:	b29b      	uxth	r3, r3
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 808e 	beq.w	80053cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8089 	beq.w	80053cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80052de:	647a      	str	r2, [r7, #68]	@ 0x44
 80052e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e3      	bne.n	80052ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	623b      	str	r3, [r7, #32]
   return(result);
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005316:	633a      	str	r2, [r7, #48]	@ 0x30
 8005318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800531c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e3      	bne.n	80052f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	60fb      	str	r3, [r7, #12]
   return(result);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0310 	bic.w	r3, r3, #16
 800534e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	330c      	adds	r3, #12
 8005358:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800535c:	61fa      	str	r2, [r7, #28]
 800535e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	69b9      	ldr	r1, [r7, #24]
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	617b      	str	r3, [r7, #20]
   return(result);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e3      	bne.n	8005338 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f83b 	bl	80053f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005382:	e023      	b.n	80053cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <HAL_UART_IRQHandler+0x4f4>
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8e5 	bl	800556c <UART_Transmit_IT>
    return;
 80053a2:	e014      	b.n	80053ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00e      	beq.n	80053ce <HAL_UART_IRQHandler+0x51e>
 80053b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f924 	bl	800560a <UART_EndTransmit_IT>
    return;
 80053c2:	e004      	b.n	80053ce <HAL_UART_IRQHandler+0x51e>
    return;
 80053c4:	bf00      	nop
 80053c6:	e002      	b.n	80053ce <HAL_UART_IRQHandler+0x51e>
      return;
 80053c8:	bf00      	nop
 80053ca:	e000      	b.n	80053ce <HAL_UART_IRQHandler+0x51e>
      return;
 80053cc:	bf00      	nop
  }
}
 80053ce:	37e8      	adds	r7, #232	@ 0xe8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	4613      	mov	r3, r2
 800541a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2222      	movs	r2, #34	@ 0x22
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005452:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0220 	orr.w	r2, r2, #32
 8005472:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005480:	b480      	push	{r7}
 8005482:	b095      	sub	sp, #84	@ 0x54
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800549e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80054aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e5      	bne.n	8005488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3314      	adds	r3, #20
 80054c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3314      	adds	r3, #20
 80054da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d119      	bne.n	800552c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	60bb      	str	r3, [r7, #8]
   return(result);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f023 0310 	bic.w	r3, r3, #16
 800550e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005518:	61ba      	str	r2, [r7, #24]
 800551a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6979      	ldr	r1, [r7, #20]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	613b      	str	r3, [r7, #16]
   return(result);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e5      	bne.n	80054f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800553a:	bf00      	nop
 800553c:	3754      	adds	r7, #84	@ 0x54
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff ff41 	bl	80053e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b21      	cmp	r3, #33	@ 0x21
 800557e:	d13e      	bne.n	80055fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005588:	d114      	bne.n	80055b4 <UART_Transmit_IT+0x48>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d110      	bne.n	80055b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	1c9a      	adds	r2, r3, #2
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	621a      	str	r2, [r3, #32]
 80055b2:	e008      	b.n	80055c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	1c59      	adds	r1, r3, #1
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6211      	str	r1, [r2, #32]
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	4619      	mov	r1, r3
 80055d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005620:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fed2 	bl	80053d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b08c      	sub	sp, #48	@ 0x30
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b22      	cmp	r3, #34	@ 0x22
 800564c:	f040 80ae 	bne.w	80057ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005658:	d117      	bne.n	800568a <UART_Receive_IT+0x50>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d113      	bne.n	800568a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005678:	b29a      	uxth	r2, r3
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005682:	1c9a      	adds	r2, r3, #2
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	629a      	str	r2, [r3, #40]	@ 0x28
 8005688:	e026      	b.n	80056d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005690:	2300      	movs	r3, #0
 8005692:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569c:	d007      	beq.n	80056ae <UART_Receive_IT+0x74>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <UART_Receive_IT+0x82>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	e008      	b.n	80056ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4619      	mov	r1, r3
 80056e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d15d      	bne.n	80057a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0220 	bic.w	r2, r2, #32
 80056fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800570a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572e:	2b01      	cmp	r3, #1
 8005730:	d135      	bne.n	800579e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	613b      	str	r3, [r7, #16]
   return(result);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f023 0310 	bic.w	r3, r3, #16
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005758:	623a      	str	r2, [r7, #32]
 800575a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	61bb      	str	r3, [r7, #24]
   return(result);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b10      	cmp	r3, #16
 8005778:	d10a      	bne.n	8005790 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff fe2e 	bl	80053f8 <HAL_UARTEx_RxEventCallback>
 800579c:	e002      	b.n	80057a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fc f96e 	bl	8001a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e002      	b.n	80057ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e000      	b.n	80057ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
  }
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3730      	adds	r7, #48	@ 0x30
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80057f2:	f023 030c 	bic.w	r3, r3, #12
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	430b      	orrs	r3, r1
 80057fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2c      	ldr	r2, [pc, #176]	@ (80058cc <UART_SetConfig+0x114>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d103      	bne.n	8005828 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fe f958 	bl	8003ad4 <HAL_RCC_GetPCLK2Freq>
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	e002      	b.n	800582e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005828:	f7fe f940 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 800582c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	4a22      	ldr	r2, [pc, #136]	@ (80058d0 <UART_SetConfig+0x118>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	0119      	lsls	r1, r3, #4
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009a      	lsls	r2, r3, #2
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	fbb2 f2f3 	udiv	r2, r2, r3
 8005864:	4b1a      	ldr	r3, [pc, #104]	@ (80058d0 <UART_SetConfig+0x118>)
 8005866:	fba3 0302 	umull	r0, r3, r3, r2
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	2064      	movs	r0, #100	@ 0x64
 800586e:	fb00 f303 	mul.w	r3, r0, r3
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	3332      	adds	r3, #50	@ 0x32
 8005878:	4a15      	ldr	r2, [pc, #84]	@ (80058d0 <UART_SetConfig+0x118>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005884:	4419      	add	r1, r3
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009a      	lsls	r2, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	fbb2 f2f3 	udiv	r2, r2, r3
 800589c:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <UART_SetConfig+0x118>)
 800589e:	fba3 0302 	umull	r0, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2064      	movs	r0, #100	@ 0x64
 80058a6:	fb00 f303 	mul.w	r3, r0, r3
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	3332      	adds	r3, #50	@ 0x32
 80058b0:	4a07      	ldr	r2, [pc, #28]	@ (80058d0 <UART_SetConfig+0x118>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	f003 020f 	and.w	r2, r3, #15
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	440a      	add	r2, r1
 80058c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40013800 	.word	0x40013800
 80058d0:	51eb851f 	.word	0x51eb851f

080058d4 <_scanf_float>:
 80058d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d8:	b087      	sub	sp, #28
 80058da:	9303      	str	r3, [sp, #12]
 80058dc:	688b      	ldr	r3, [r1, #8]
 80058de:	4617      	mov	r7, r2
 80058e0:	1e5a      	subs	r2, r3, #1
 80058e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80058e6:	bf82      	ittt	hi
 80058e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80058ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80058f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80058f4:	460a      	mov	r2, r1
 80058f6:	f04f 0500 	mov.w	r5, #0
 80058fa:	bf88      	it	hi
 80058fc:	608b      	strhi	r3, [r1, #8]
 80058fe:	680b      	ldr	r3, [r1, #0]
 8005900:	4680      	mov	r8, r0
 8005902:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005906:	f842 3b1c 	str.w	r3, [r2], #28
 800590a:	460c      	mov	r4, r1
 800590c:	bf98      	it	ls
 800590e:	f04f 0b00 	movls.w	fp, #0
 8005912:	4616      	mov	r6, r2
 8005914:	46aa      	mov	sl, r5
 8005916:	46a9      	mov	r9, r5
 8005918:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800591c:	9201      	str	r2, [sp, #4]
 800591e:	9502      	str	r5, [sp, #8]
 8005920:	68a2      	ldr	r2, [r4, #8]
 8005922:	b152      	cbz	r2, 800593a <_scanf_float+0x66>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b4e      	cmp	r3, #78	@ 0x4e
 800592a:	d865      	bhi.n	80059f8 <_scanf_float+0x124>
 800592c:	2b40      	cmp	r3, #64	@ 0x40
 800592e:	d83d      	bhi.n	80059ac <_scanf_float+0xd8>
 8005930:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005934:	b2c8      	uxtb	r0, r1
 8005936:	280e      	cmp	r0, #14
 8005938:	d93b      	bls.n	80059b2 <_scanf_float+0xde>
 800593a:	f1b9 0f00 	cmp.w	r9, #0
 800593e:	d003      	beq.n	8005948 <_scanf_float+0x74>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	f10a 3aff 	add.w	sl, sl, #4294967295
 800594c:	f1ba 0f01 	cmp.w	sl, #1
 8005950:	f200 8118 	bhi.w	8005b84 <_scanf_float+0x2b0>
 8005954:	9b01      	ldr	r3, [sp, #4]
 8005956:	429e      	cmp	r6, r3
 8005958:	f200 8109 	bhi.w	8005b6e <_scanf_float+0x29a>
 800595c:	2001      	movs	r0, #1
 800595e:	b007      	add	sp, #28
 8005960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005964:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005968:	2a0d      	cmp	r2, #13
 800596a:	d8e6      	bhi.n	800593a <_scanf_float+0x66>
 800596c:	a101      	add	r1, pc, #4	@ (adr r1, 8005974 <_scanf_float+0xa0>)
 800596e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005972:	bf00      	nop
 8005974:	08005abb 	.word	0x08005abb
 8005978:	0800593b 	.word	0x0800593b
 800597c:	0800593b 	.word	0x0800593b
 8005980:	0800593b 	.word	0x0800593b
 8005984:	08005b1b 	.word	0x08005b1b
 8005988:	08005af3 	.word	0x08005af3
 800598c:	0800593b 	.word	0x0800593b
 8005990:	0800593b 	.word	0x0800593b
 8005994:	08005ac9 	.word	0x08005ac9
 8005998:	0800593b 	.word	0x0800593b
 800599c:	0800593b 	.word	0x0800593b
 80059a0:	0800593b 	.word	0x0800593b
 80059a4:	0800593b 	.word	0x0800593b
 80059a8:	08005a81 	.word	0x08005a81
 80059ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80059b0:	e7da      	b.n	8005968 <_scanf_float+0x94>
 80059b2:	290e      	cmp	r1, #14
 80059b4:	d8c1      	bhi.n	800593a <_scanf_float+0x66>
 80059b6:	a001      	add	r0, pc, #4	@ (adr r0, 80059bc <_scanf_float+0xe8>)
 80059b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059bc:	08005a71 	.word	0x08005a71
 80059c0:	0800593b 	.word	0x0800593b
 80059c4:	08005a71 	.word	0x08005a71
 80059c8:	08005b07 	.word	0x08005b07
 80059cc:	0800593b 	.word	0x0800593b
 80059d0:	08005a19 	.word	0x08005a19
 80059d4:	08005a57 	.word	0x08005a57
 80059d8:	08005a57 	.word	0x08005a57
 80059dc:	08005a57 	.word	0x08005a57
 80059e0:	08005a57 	.word	0x08005a57
 80059e4:	08005a57 	.word	0x08005a57
 80059e8:	08005a57 	.word	0x08005a57
 80059ec:	08005a57 	.word	0x08005a57
 80059f0:	08005a57 	.word	0x08005a57
 80059f4:	08005a57 	.word	0x08005a57
 80059f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80059fa:	d809      	bhi.n	8005a10 <_scanf_float+0x13c>
 80059fc:	2b60      	cmp	r3, #96	@ 0x60
 80059fe:	d8b1      	bhi.n	8005964 <_scanf_float+0x90>
 8005a00:	2b54      	cmp	r3, #84	@ 0x54
 8005a02:	d07b      	beq.n	8005afc <_scanf_float+0x228>
 8005a04:	2b59      	cmp	r3, #89	@ 0x59
 8005a06:	d198      	bne.n	800593a <_scanf_float+0x66>
 8005a08:	2d07      	cmp	r5, #7
 8005a0a:	d196      	bne.n	800593a <_scanf_float+0x66>
 8005a0c:	2508      	movs	r5, #8
 8005a0e:	e02c      	b.n	8005a6a <_scanf_float+0x196>
 8005a10:	2b74      	cmp	r3, #116	@ 0x74
 8005a12:	d073      	beq.n	8005afc <_scanf_float+0x228>
 8005a14:	2b79      	cmp	r3, #121	@ 0x79
 8005a16:	e7f6      	b.n	8005a06 <_scanf_float+0x132>
 8005a18:	6821      	ldr	r1, [r4, #0]
 8005a1a:	05c8      	lsls	r0, r1, #23
 8005a1c:	d51b      	bpl.n	8005a56 <_scanf_float+0x182>
 8005a1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005a22:	6021      	str	r1, [r4, #0]
 8005a24:	f109 0901 	add.w	r9, r9, #1
 8005a28:	f1bb 0f00 	cmp.w	fp, #0
 8005a2c:	d003      	beq.n	8005a36 <_scanf_float+0x162>
 8005a2e:	3201      	adds	r2, #1
 8005a30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a34:	60a2      	str	r2, [r4, #8]
 8005a36:	68a3      	ldr	r3, [r4, #8]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	60a3      	str	r3, [r4, #8]
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	6123      	str	r3, [r4, #16]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	f340 8087 	ble.w	8005b5c <_scanf_float+0x288>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	3301      	adds	r3, #1
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	e764      	b.n	8005920 <_scanf_float+0x4c>
 8005a56:	eb1a 0105 	adds.w	r1, sl, r5
 8005a5a:	f47f af6e 	bne.w	800593a <_scanf_float+0x66>
 8005a5e:	460d      	mov	r5, r1
 8005a60:	468a      	mov	sl, r1
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	f806 3b01 	strb.w	r3, [r6], #1
 8005a6e:	e7e2      	b.n	8005a36 <_scanf_float+0x162>
 8005a70:	6822      	ldr	r2, [r4, #0]
 8005a72:	0610      	lsls	r0, r2, #24
 8005a74:	f57f af61 	bpl.w	800593a <_scanf_float+0x66>
 8005a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a7c:	6022      	str	r2, [r4, #0]
 8005a7e:	e7f4      	b.n	8005a6a <_scanf_float+0x196>
 8005a80:	f1ba 0f00 	cmp.w	sl, #0
 8005a84:	d10e      	bne.n	8005aa4 <_scanf_float+0x1d0>
 8005a86:	f1b9 0f00 	cmp.w	r9, #0
 8005a8a:	d10e      	bne.n	8005aaa <_scanf_float+0x1d6>
 8005a8c:	6822      	ldr	r2, [r4, #0]
 8005a8e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005a92:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005a96:	d108      	bne.n	8005aaa <_scanf_float+0x1d6>
 8005a98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a9c:	f04f 0a01 	mov.w	sl, #1
 8005aa0:	6022      	str	r2, [r4, #0]
 8005aa2:	e7e2      	b.n	8005a6a <_scanf_float+0x196>
 8005aa4:	f1ba 0f02 	cmp.w	sl, #2
 8005aa8:	d055      	beq.n	8005b56 <_scanf_float+0x282>
 8005aaa:	2d01      	cmp	r5, #1
 8005aac:	d002      	beq.n	8005ab4 <_scanf_float+0x1e0>
 8005aae:	2d04      	cmp	r5, #4
 8005ab0:	f47f af43 	bne.w	800593a <_scanf_float+0x66>
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	b2ed      	uxtb	r5, r5
 8005ab8:	e7d7      	b.n	8005a6a <_scanf_float+0x196>
 8005aba:	f1ba 0f01 	cmp.w	sl, #1
 8005abe:	f47f af3c 	bne.w	800593a <_scanf_float+0x66>
 8005ac2:	f04f 0a02 	mov.w	sl, #2
 8005ac6:	e7d0      	b.n	8005a6a <_scanf_float+0x196>
 8005ac8:	b97d      	cbnz	r5, 8005aea <_scanf_float+0x216>
 8005aca:	f1b9 0f00 	cmp.w	r9, #0
 8005ace:	f47f af37 	bne.w	8005940 <_scanf_float+0x6c>
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005ad8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005adc:	f040 8103 	bne.w	8005ce6 <_scanf_float+0x412>
 8005ae0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ae4:	2501      	movs	r5, #1
 8005ae6:	6022      	str	r2, [r4, #0]
 8005ae8:	e7bf      	b.n	8005a6a <_scanf_float+0x196>
 8005aea:	2d03      	cmp	r5, #3
 8005aec:	d0e2      	beq.n	8005ab4 <_scanf_float+0x1e0>
 8005aee:	2d05      	cmp	r5, #5
 8005af0:	e7de      	b.n	8005ab0 <_scanf_float+0x1dc>
 8005af2:	2d02      	cmp	r5, #2
 8005af4:	f47f af21 	bne.w	800593a <_scanf_float+0x66>
 8005af8:	2503      	movs	r5, #3
 8005afa:	e7b6      	b.n	8005a6a <_scanf_float+0x196>
 8005afc:	2d06      	cmp	r5, #6
 8005afe:	f47f af1c 	bne.w	800593a <_scanf_float+0x66>
 8005b02:	2507      	movs	r5, #7
 8005b04:	e7b1      	b.n	8005a6a <_scanf_float+0x196>
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	0591      	lsls	r1, r2, #22
 8005b0a:	f57f af16 	bpl.w	800593a <_scanf_float+0x66>
 8005b0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005b12:	6022      	str	r2, [r4, #0]
 8005b14:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b18:	e7a7      	b.n	8005a6a <_scanf_float+0x196>
 8005b1a:	6822      	ldr	r2, [r4, #0]
 8005b1c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005b20:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005b24:	d006      	beq.n	8005b34 <_scanf_float+0x260>
 8005b26:	0550      	lsls	r0, r2, #21
 8005b28:	f57f af07 	bpl.w	800593a <_scanf_float+0x66>
 8005b2c:	f1b9 0f00 	cmp.w	r9, #0
 8005b30:	f000 80d9 	beq.w	8005ce6 <_scanf_float+0x412>
 8005b34:	0591      	lsls	r1, r2, #22
 8005b36:	bf58      	it	pl
 8005b38:	9902      	ldrpl	r1, [sp, #8]
 8005b3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b3e:	bf58      	it	pl
 8005b40:	eba9 0101 	subpl.w	r1, r9, r1
 8005b44:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005b48:	f04f 0900 	mov.w	r9, #0
 8005b4c:	bf58      	it	pl
 8005b4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b52:	6022      	str	r2, [r4, #0]
 8005b54:	e789      	b.n	8005a6a <_scanf_float+0x196>
 8005b56:	f04f 0a03 	mov.w	sl, #3
 8005b5a:	e786      	b.n	8005a6a <_scanf_float+0x196>
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	4640      	mov	r0, r8
 8005b60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005b64:	4798      	blx	r3
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f43f aeda 	beq.w	8005920 <_scanf_float+0x4c>
 8005b6c:	e6e5      	b.n	800593a <_scanf_float+0x66>
 8005b6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b72:	463a      	mov	r2, r7
 8005b74:	4640      	mov	r0, r8
 8005b76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b7a:	4798      	blx	r3
 8005b7c:	6923      	ldr	r3, [r4, #16]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	6123      	str	r3, [r4, #16]
 8005b82:	e6e7      	b.n	8005954 <_scanf_float+0x80>
 8005b84:	1e6b      	subs	r3, r5, #1
 8005b86:	2b06      	cmp	r3, #6
 8005b88:	d824      	bhi.n	8005bd4 <_scanf_float+0x300>
 8005b8a:	2d02      	cmp	r5, #2
 8005b8c:	d836      	bhi.n	8005bfc <_scanf_float+0x328>
 8005b8e:	9b01      	ldr	r3, [sp, #4]
 8005b90:	429e      	cmp	r6, r3
 8005b92:	f67f aee3 	bls.w	800595c <_scanf_float+0x88>
 8005b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b9a:	463a      	mov	r2, r7
 8005b9c:	4640      	mov	r0, r8
 8005b9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ba2:	4798      	blx	r3
 8005ba4:	6923      	ldr	r3, [r4, #16]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	6123      	str	r3, [r4, #16]
 8005baa:	e7f0      	b.n	8005b8e <_scanf_float+0x2ba>
 8005bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bb0:	463a      	mov	r2, r7
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005bb8:	4798      	blx	r3
 8005bba:	6923      	ldr	r3, [r4, #16]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bc4:	fa5f fa8a 	uxtb.w	sl, sl
 8005bc8:	f1ba 0f02 	cmp.w	sl, #2
 8005bcc:	d1ee      	bne.n	8005bac <_scanf_float+0x2d8>
 8005bce:	3d03      	subs	r5, #3
 8005bd0:	b2ed      	uxtb	r5, r5
 8005bd2:	1b76      	subs	r6, r6, r5
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	05da      	lsls	r2, r3, #23
 8005bd8:	d530      	bpl.n	8005c3c <_scanf_float+0x368>
 8005bda:	055b      	lsls	r3, r3, #21
 8005bdc:	d511      	bpl.n	8005c02 <_scanf_float+0x32e>
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	429e      	cmp	r6, r3
 8005be2:	f67f aebb 	bls.w	800595c <_scanf_float+0x88>
 8005be6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bea:	463a      	mov	r2, r7
 8005bec:	4640      	mov	r0, r8
 8005bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bf2:	4798      	blx	r3
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	6123      	str	r3, [r4, #16]
 8005bfa:	e7f0      	b.n	8005bde <_scanf_float+0x30a>
 8005bfc:	46aa      	mov	sl, r5
 8005bfe:	46b3      	mov	fp, r6
 8005c00:	e7de      	b.n	8005bc0 <_scanf_float+0x2ec>
 8005c02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	2965      	cmp	r1, #101	@ 0x65
 8005c0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	d00c      	beq.n	8005c30 <_scanf_float+0x35c>
 8005c16:	2945      	cmp	r1, #69	@ 0x45
 8005c18:	d00a      	beq.n	8005c30 <_scanf_float+0x35c>
 8005c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c1e:	463a      	mov	r2, r7
 8005c20:	4640      	mov	r0, r8
 8005c22:	4798      	blx	r3
 8005c24:	6923      	ldr	r3, [r4, #16]
 8005c26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	1eb5      	subs	r5, r6, #2
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	463a      	mov	r2, r7
 8005c32:	4640      	mov	r0, r8
 8005c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c38:	4798      	blx	r3
 8005c3a:	462e      	mov	r6, r5
 8005c3c:	6822      	ldr	r2, [r4, #0]
 8005c3e:	f012 0210 	ands.w	r2, r2, #16
 8005c42:	d001      	beq.n	8005c48 <_scanf_float+0x374>
 8005c44:	2000      	movs	r0, #0
 8005c46:	e68a      	b.n	800595e <_scanf_float+0x8a>
 8005c48:	7032      	strb	r2, [r6, #0]
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c54:	d11c      	bne.n	8005c90 <_scanf_float+0x3bc>
 8005c56:	9b02      	ldr	r3, [sp, #8]
 8005c58:	454b      	cmp	r3, r9
 8005c5a:	eba3 0209 	sub.w	r2, r3, r9
 8005c5e:	d123      	bne.n	8005ca8 <_scanf_float+0x3d4>
 8005c60:	2200      	movs	r2, #0
 8005c62:	4640      	mov	r0, r8
 8005c64:	9901      	ldr	r1, [sp, #4]
 8005c66:	f001 f907 	bl	8006e78 <_strtod_r>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	6825      	ldr	r5, [r4, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f015 0f02 	tst.w	r5, #2
 8005c74:	4606      	mov	r6, r0
 8005c76:	460f      	mov	r7, r1
 8005c78:	f103 0204 	add.w	r2, r3, #4
 8005c7c:	d01f      	beq.n	8005cbe <_scanf_float+0x3ea>
 8005c7e:	9903      	ldr	r1, [sp, #12]
 8005c80:	600a      	str	r2, [r1, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	e9c3 6700 	strd	r6, r7, [r3]
 8005c88:	68e3      	ldr	r3, [r4, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60e3      	str	r3, [r4, #12]
 8005c8e:	e7d9      	b.n	8005c44 <_scanf_float+0x370>
 8005c90:	9b04      	ldr	r3, [sp, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0e4      	beq.n	8005c60 <_scanf_float+0x38c>
 8005c96:	9905      	ldr	r1, [sp, #20]
 8005c98:	230a      	movs	r3, #10
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	3101      	adds	r1, #1
 8005c9e:	f001 f96b 	bl	8006f78 <_strtol_r>
 8005ca2:	9b04      	ldr	r3, [sp, #16]
 8005ca4:	9e05      	ldr	r6, [sp, #20]
 8005ca6:	1ac2      	subs	r2, r0, r3
 8005ca8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005cac:	429e      	cmp	r6, r3
 8005cae:	bf28      	it	cs
 8005cb0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	490d      	ldr	r1, [pc, #52]	@ (8005cec <_scanf_float+0x418>)
 8005cb8:	f000 f8de 	bl	8005e78 <siprintf>
 8005cbc:	e7d0      	b.n	8005c60 <_scanf_float+0x38c>
 8005cbe:	076d      	lsls	r5, r5, #29
 8005cc0:	d4dd      	bmi.n	8005c7e <_scanf_float+0x3aa>
 8005cc2:	9d03      	ldr	r5, [sp, #12]
 8005cc4:	602a      	str	r2, [r5, #0]
 8005cc6:	681d      	ldr	r5, [r3, #0]
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	f7fa fe9e 	bl	8000a0c <__aeabi_dcmpun>
 8005cd0:	b120      	cbz	r0, 8005cdc <_scanf_float+0x408>
 8005cd2:	4807      	ldr	r0, [pc, #28]	@ (8005cf0 <_scanf_float+0x41c>)
 8005cd4:	f000 f9dc 	bl	8006090 <nanf>
 8005cd8:	6028      	str	r0, [r5, #0]
 8005cda:	e7d5      	b.n	8005c88 <_scanf_float+0x3b4>
 8005cdc:	4630      	mov	r0, r6
 8005cde:	4639      	mov	r1, r7
 8005ce0:	f7fa feca 	bl	8000a78 <__aeabi_d2f>
 8005ce4:	e7f8      	b.n	8005cd8 <_scanf_float+0x404>
 8005ce6:	f04f 0900 	mov.w	r9, #0
 8005cea:	e62d      	b.n	8005948 <_scanf_float+0x74>
 8005cec:	08009636 	.word	0x08009636
 8005cf0:	08009a13 	.word	0x08009a13

08005cf4 <std>:
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8005cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d02:	6083      	str	r3, [r0, #8]
 8005d04:	8181      	strh	r1, [r0, #12]
 8005d06:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d08:	81c2      	strh	r2, [r0, #14]
 8005d0a:	6183      	str	r3, [r0, #24]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	2208      	movs	r2, #8
 8005d10:	305c      	adds	r0, #92	@ 0x5c
 8005d12:	f000 f940 	bl	8005f96 <memset>
 8005d16:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <std+0x58>)
 8005d18:	6224      	str	r4, [r4, #32]
 8005d1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <std+0x5c>)
 8005d1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d20:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <std+0x60>)
 8005d22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d24:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <std+0x64>)
 8005d26:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d28:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <std+0x68>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d006      	beq.n	8005d3c <std+0x48>
 8005d2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d32:	4294      	cmp	r4, r2
 8005d34:	d002      	beq.n	8005d3c <std+0x48>
 8005d36:	33d0      	adds	r3, #208	@ 0xd0
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	d105      	bne.n	8005d48 <std+0x54>
 8005d3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f000 b9a0 	b.w	8006088 <__retarget_lock_init_recursive>
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08005f0d 	.word	0x08005f0d
 8005d50:	08005f33 	.word	0x08005f33
 8005d54:	08005f6b 	.word	0x08005f6b
 8005d58:	08005f8f 	.word	0x08005f8f
 8005d5c:	200004a0 	.word	0x200004a0

08005d60 <stdio_exit_handler>:
 8005d60:	4a02      	ldr	r2, [pc, #8]	@ (8005d6c <stdio_exit_handler+0xc>)
 8005d62:	4903      	ldr	r1, [pc, #12]	@ (8005d70 <stdio_exit_handler+0x10>)
 8005d64:	4803      	ldr	r0, [pc, #12]	@ (8005d74 <stdio_exit_handler+0x14>)
 8005d66:	f000 b869 	b.w	8005e3c <_fwalk_sglue>
 8005d6a:	bf00      	nop
 8005d6c:	2000001c 	.word	0x2000001c
 8005d70:	08007c7d 	.word	0x08007c7d
 8005d74:	2000002c 	.word	0x2000002c

08005d78 <cleanup_stdio>:
 8005d78:	6841      	ldr	r1, [r0, #4]
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dac <cleanup_stdio+0x34>)
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	4604      	mov	r4, r0
 8005d82:	d001      	beq.n	8005d88 <cleanup_stdio+0x10>
 8005d84:	f001 ff7a 	bl	8007c7c <_fflush_r>
 8005d88:	68a1      	ldr	r1, [r4, #8]
 8005d8a:	4b09      	ldr	r3, [pc, #36]	@ (8005db0 <cleanup_stdio+0x38>)
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	d002      	beq.n	8005d96 <cleanup_stdio+0x1e>
 8005d90:	4620      	mov	r0, r4
 8005d92:	f001 ff73 	bl	8007c7c <_fflush_r>
 8005d96:	68e1      	ldr	r1, [r4, #12]
 8005d98:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <cleanup_stdio+0x3c>)
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	d004      	beq.n	8005da8 <cleanup_stdio+0x30>
 8005d9e:	4620      	mov	r0, r4
 8005da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da4:	f001 bf6a 	b.w	8007c7c <_fflush_r>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	200004a0 	.word	0x200004a0
 8005db0:	20000508 	.word	0x20000508
 8005db4:	20000570 	.word	0x20000570

08005db8 <global_stdio_init.part.0>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4b0b      	ldr	r3, [pc, #44]	@ (8005de8 <global_stdio_init.part.0+0x30>)
 8005dbc:	4c0b      	ldr	r4, [pc, #44]	@ (8005dec <global_stdio_init.part.0+0x34>)
 8005dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8005df0 <global_stdio_init.part.0+0x38>)
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	2104      	movs	r1, #4
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f7ff ff94 	bl	8005cf4 <std>
 8005dcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	2109      	movs	r1, #9
 8005dd4:	f7ff ff8e 	bl	8005cf4 <std>
 8005dd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ddc:	2202      	movs	r2, #2
 8005dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de2:	2112      	movs	r1, #18
 8005de4:	f7ff bf86 	b.w	8005cf4 <std>
 8005de8:	200005d8 	.word	0x200005d8
 8005dec:	200004a0 	.word	0x200004a0
 8005df0:	08005d61 	.word	0x08005d61

08005df4 <__sfp_lock_acquire>:
 8005df4:	4801      	ldr	r0, [pc, #4]	@ (8005dfc <__sfp_lock_acquire+0x8>)
 8005df6:	f000 b948 	b.w	800608a <__retarget_lock_acquire_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	200005e1 	.word	0x200005e1

08005e00 <__sfp_lock_release>:
 8005e00:	4801      	ldr	r0, [pc, #4]	@ (8005e08 <__sfp_lock_release+0x8>)
 8005e02:	f000 b943 	b.w	800608c <__retarget_lock_release_recursive>
 8005e06:	bf00      	nop
 8005e08:	200005e1 	.word	0x200005e1

08005e0c <__sinit>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4604      	mov	r4, r0
 8005e10:	f7ff fff0 	bl	8005df4 <__sfp_lock_acquire>
 8005e14:	6a23      	ldr	r3, [r4, #32]
 8005e16:	b11b      	cbz	r3, 8005e20 <__sinit+0x14>
 8005e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e1c:	f7ff bff0 	b.w	8005e00 <__sfp_lock_release>
 8005e20:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <__sinit+0x28>)
 8005e22:	6223      	str	r3, [r4, #32]
 8005e24:	4b04      	ldr	r3, [pc, #16]	@ (8005e38 <__sinit+0x2c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f5      	bne.n	8005e18 <__sinit+0xc>
 8005e2c:	f7ff ffc4 	bl	8005db8 <global_stdio_init.part.0>
 8005e30:	e7f2      	b.n	8005e18 <__sinit+0xc>
 8005e32:	bf00      	nop
 8005e34:	08005d79 	.word	0x08005d79
 8005e38:	200005d8 	.word	0x200005d8

08005e3c <_fwalk_sglue>:
 8005e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	4607      	mov	r7, r0
 8005e42:	4688      	mov	r8, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	2600      	movs	r6, #0
 8005e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e50:	d505      	bpl.n	8005e5e <_fwalk_sglue+0x22>
 8005e52:	6824      	ldr	r4, [r4, #0]
 8005e54:	2c00      	cmp	r4, #0
 8005e56:	d1f7      	bne.n	8005e48 <_fwalk_sglue+0xc>
 8005e58:	4630      	mov	r0, r6
 8005e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d907      	bls.n	8005e74 <_fwalk_sglue+0x38>
 8005e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	d003      	beq.n	8005e74 <_fwalk_sglue+0x38>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c0      	blx	r8
 8005e72:	4306      	orrs	r6, r0
 8005e74:	3568      	adds	r5, #104	@ 0x68
 8005e76:	e7e9      	b.n	8005e4c <_fwalk_sglue+0x10>

08005e78 <siprintf>:
 8005e78:	b40e      	push	{r1, r2, r3}
 8005e7a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e7e:	b500      	push	{lr}
 8005e80:	b09c      	sub	sp, #112	@ 0x70
 8005e82:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e84:	9002      	str	r0, [sp, #8]
 8005e86:	9006      	str	r0, [sp, #24]
 8005e88:	9107      	str	r1, [sp, #28]
 8005e8a:	9104      	str	r1, [sp, #16]
 8005e8c:	4808      	ldr	r0, [pc, #32]	@ (8005eb0 <siprintf+0x38>)
 8005e8e:	4909      	ldr	r1, [pc, #36]	@ (8005eb4 <siprintf+0x3c>)
 8005e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e94:	9105      	str	r1, [sp, #20]
 8005e96:	6800      	ldr	r0, [r0, #0]
 8005e98:	a902      	add	r1, sp, #8
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	f001 f8ca 	bl	8007034 <_svfiprintf_r>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	9b02      	ldr	r3, [sp, #8]
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	b01c      	add	sp, #112	@ 0x70
 8005ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eac:	b003      	add	sp, #12
 8005eae:	4770      	bx	lr
 8005eb0:	20000028 	.word	0x20000028
 8005eb4:	ffff0208 	.word	0xffff0208

08005eb8 <siscanf>:
 8005eb8:	b40e      	push	{r1, r2, r3}
 8005eba:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005ebe:	b530      	push	{r4, r5, lr}
 8005ec0:	b09c      	sub	sp, #112	@ 0x70
 8005ec2:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005ec4:	f854 5b04 	ldr.w	r5, [r4], #4
 8005ec8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005ecc:	9002      	str	r0, [sp, #8]
 8005ece:	9006      	str	r0, [sp, #24]
 8005ed0:	f7fa f93e 	bl	8000150 <strlen>
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <siscanf+0x4c>)
 8005ed6:	9003      	str	r0, [sp, #12]
 8005ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eda:	2300      	movs	r3, #0
 8005edc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ede:	9314      	str	r3, [sp, #80]	@ 0x50
 8005ee0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ee4:	9007      	str	r0, [sp, #28]
 8005ee6:	4808      	ldr	r0, [pc, #32]	@ (8005f08 <siscanf+0x50>)
 8005ee8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005eec:	462a      	mov	r2, r5
 8005eee:	4623      	mov	r3, r4
 8005ef0:	a902      	add	r1, sp, #8
 8005ef2:	6800      	ldr	r0, [r0, #0]
 8005ef4:	9401      	str	r4, [sp, #4]
 8005ef6:	f001 f9f1 	bl	80072dc <__ssvfiscanf_r>
 8005efa:	b01c      	add	sp, #112	@ 0x70
 8005efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f00:	b003      	add	sp, #12
 8005f02:	4770      	bx	lr
 8005f04:	08005f2f 	.word	0x08005f2f
 8005f08:	20000028 	.word	0x20000028

08005f0c <__sread>:
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	460c      	mov	r4, r1
 8005f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f14:	f000 f86a 	bl	8005fec <_read_r>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	bfab      	itete	ge
 8005f1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f20:	181b      	addge	r3, r3, r0
 8005f22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f26:	bfac      	ite	ge
 8005f28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f2a:	81a3      	strhlt	r3, [r4, #12]
 8005f2c:	bd10      	pop	{r4, pc}

08005f2e <__seofread>:
 8005f2e:	2000      	movs	r0, #0
 8005f30:	4770      	bx	lr

08005f32 <__swrite>:
 8005f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f36:	461f      	mov	r7, r3
 8005f38:	898b      	ldrh	r3, [r1, #12]
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	05db      	lsls	r3, r3, #23
 8005f3e:	460c      	mov	r4, r1
 8005f40:	4616      	mov	r6, r2
 8005f42:	d505      	bpl.n	8005f50 <__swrite+0x1e>
 8005f44:	2302      	movs	r3, #2
 8005f46:	2200      	movs	r2, #0
 8005f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4c:	f000 f83c 	bl	8005fc8 <_lseek_r>
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	4632      	mov	r2, r6
 8005f54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f66:	f000 b853 	b.w	8006010 <_write_r>

08005f6a <__sseek>:
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f72:	f000 f829 	bl	8005fc8 <_lseek_r>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	bf15      	itete	ne
 8005f7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f86:	81a3      	strheq	r3, [r4, #12]
 8005f88:	bf18      	it	ne
 8005f8a:	81a3      	strhne	r3, [r4, #12]
 8005f8c:	bd10      	pop	{r4, pc}

08005f8e <__sclose>:
 8005f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f92:	f000 b809 	b.w	8005fa8 <_close_r>

08005f96 <memset>:
 8005f96:	4603      	mov	r3, r0
 8005f98:	4402      	add	r2, r0
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d100      	bne.n	8005fa0 <memset+0xa>
 8005f9e:	4770      	bx	lr
 8005fa0:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa4:	e7f9      	b.n	8005f9a <memset+0x4>
	...

08005fa8 <_close_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	2300      	movs	r3, #0
 8005fac:	4d05      	ldr	r5, [pc, #20]	@ (8005fc4 <_close_r+0x1c>)
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	f7fc f903 	bl	80021be <_close>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_close_r+0x1a>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_close_r+0x1a>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	200005dc 	.word	0x200005dc

08005fc8 <_lseek_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4608      	mov	r0, r1
 8005fce:	4611      	mov	r1, r2
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4d05      	ldr	r5, [pc, #20]	@ (8005fe8 <_lseek_r+0x20>)
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f7fc f915 	bl	8002206 <_lseek>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_lseek_r+0x1e>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_lseek_r+0x1e>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	200005dc 	.word	0x200005dc

08005fec <_read_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4d05      	ldr	r5, [pc, #20]	@ (800600c <_read_r+0x20>)
 8005ff8:	602a      	str	r2, [r5, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f7fc f8a6 	bl	800214c <_read>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_read_r+0x1e>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_read_r+0x1e>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	200005dc 	.word	0x200005dc

08006010 <_write_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	2200      	movs	r2, #0
 800601a:	4d05      	ldr	r5, [pc, #20]	@ (8006030 <_write_r+0x20>)
 800601c:	602a      	str	r2, [r5, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f7fc f8b1 	bl	8002186 <_write>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_write_r+0x1e>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_write_r+0x1e>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	200005dc 	.word	0x200005dc

08006034 <__errno>:
 8006034:	4b01      	ldr	r3, [pc, #4]	@ (800603c <__errno+0x8>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20000028 	.word	0x20000028

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	2600      	movs	r6, #0
 8006044:	4d0c      	ldr	r5, [pc, #48]	@ (8006078 <__libc_init_array+0x38>)
 8006046:	4c0d      	ldr	r4, [pc, #52]	@ (800607c <__libc_init_array+0x3c>)
 8006048:	1b64      	subs	r4, r4, r5
 800604a:	10a4      	asrs	r4, r4, #2
 800604c:	42a6      	cmp	r6, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	f003 fac4 	bl	80095dc <_init>
 8006054:	2600      	movs	r6, #0
 8006056:	4d0a      	ldr	r5, [pc, #40]	@ (8006080 <__libc_init_array+0x40>)
 8006058:	4c0a      	ldr	r4, [pc, #40]	@ (8006084 <__libc_init_array+0x44>)
 800605a:	1b64      	subs	r4, r4, r5
 800605c:	10a4      	asrs	r4, r4, #2
 800605e:	42a6      	cmp	r6, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	f855 3b04 	ldr.w	r3, [r5], #4
 8006068:	4798      	blx	r3
 800606a:	3601      	adds	r6, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006072:	4798      	blx	r3
 8006074:	3601      	adds	r6, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	08009a1c 	.word	0x08009a1c
 800607c:	08009a1c 	.word	0x08009a1c
 8006080:	08009a1c 	.word	0x08009a1c
 8006084:	08009a20 	.word	0x08009a20

08006088 <__retarget_lock_init_recursive>:
 8006088:	4770      	bx	lr

0800608a <__retarget_lock_acquire_recursive>:
 800608a:	4770      	bx	lr

0800608c <__retarget_lock_release_recursive>:
 800608c:	4770      	bx	lr
	...

08006090 <nanf>:
 8006090:	4800      	ldr	r0, [pc, #0]	@ (8006094 <nanf+0x4>)
 8006092:	4770      	bx	lr
 8006094:	7fc00000 	.word	0x7fc00000

08006098 <_free_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4605      	mov	r5, r0
 800609c:	2900      	cmp	r1, #0
 800609e:	d040      	beq.n	8006122 <_free_r+0x8a>
 80060a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a4:	1f0c      	subs	r4, r1, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfb8      	it	lt
 80060aa:	18e4      	addlt	r4, r4, r3
 80060ac:	f000 f8de 	bl	800626c <__malloc_lock>
 80060b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <_free_r+0x8c>)
 80060b2:	6813      	ldr	r3, [r2, #0]
 80060b4:	b933      	cbnz	r3, 80060c4 <_free_r+0x2c>
 80060b6:	6063      	str	r3, [r4, #4]
 80060b8:	6014      	str	r4, [r2, #0]
 80060ba:	4628      	mov	r0, r5
 80060bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060c0:	f000 b8da 	b.w	8006278 <__malloc_unlock>
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	d908      	bls.n	80060da <_free_r+0x42>
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	1821      	adds	r1, r4, r0
 80060cc:	428b      	cmp	r3, r1
 80060ce:	bf01      	itttt	eq
 80060d0:	6819      	ldreq	r1, [r3, #0]
 80060d2:	685b      	ldreq	r3, [r3, #4]
 80060d4:	1809      	addeq	r1, r1, r0
 80060d6:	6021      	streq	r1, [r4, #0]
 80060d8:	e7ed      	b.n	80060b6 <_free_r+0x1e>
 80060da:	461a      	mov	r2, r3
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	b10b      	cbz	r3, 80060e4 <_free_r+0x4c>
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d9fa      	bls.n	80060da <_free_r+0x42>
 80060e4:	6811      	ldr	r1, [r2, #0]
 80060e6:	1850      	adds	r0, r2, r1
 80060e8:	42a0      	cmp	r0, r4
 80060ea:	d10b      	bne.n	8006104 <_free_r+0x6c>
 80060ec:	6820      	ldr	r0, [r4, #0]
 80060ee:	4401      	add	r1, r0
 80060f0:	1850      	adds	r0, r2, r1
 80060f2:	4283      	cmp	r3, r0
 80060f4:	6011      	str	r1, [r2, #0]
 80060f6:	d1e0      	bne.n	80060ba <_free_r+0x22>
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	4408      	add	r0, r1
 80060fe:	6010      	str	r0, [r2, #0]
 8006100:	6053      	str	r3, [r2, #4]
 8006102:	e7da      	b.n	80060ba <_free_r+0x22>
 8006104:	d902      	bls.n	800610c <_free_r+0x74>
 8006106:	230c      	movs	r3, #12
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	e7d6      	b.n	80060ba <_free_r+0x22>
 800610c:	6820      	ldr	r0, [r4, #0]
 800610e:	1821      	adds	r1, r4, r0
 8006110:	428b      	cmp	r3, r1
 8006112:	bf01      	itttt	eq
 8006114:	6819      	ldreq	r1, [r3, #0]
 8006116:	685b      	ldreq	r3, [r3, #4]
 8006118:	1809      	addeq	r1, r1, r0
 800611a:	6021      	streq	r1, [r4, #0]
 800611c:	6063      	str	r3, [r4, #4]
 800611e:	6054      	str	r4, [r2, #4]
 8006120:	e7cb      	b.n	80060ba <_free_r+0x22>
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	200005e8 	.word	0x200005e8

08006128 <sbrk_aligned>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4e0f      	ldr	r6, [pc, #60]	@ (8006168 <sbrk_aligned+0x40>)
 800612c:	460c      	mov	r4, r1
 800612e:	6831      	ldr	r1, [r6, #0]
 8006130:	4605      	mov	r5, r0
 8006132:	b911      	cbnz	r1, 800613a <sbrk_aligned+0x12>
 8006134:	f001 fe68 	bl	8007e08 <_sbrk_r>
 8006138:	6030      	str	r0, [r6, #0]
 800613a:	4621      	mov	r1, r4
 800613c:	4628      	mov	r0, r5
 800613e:	f001 fe63 	bl	8007e08 <_sbrk_r>
 8006142:	1c43      	adds	r3, r0, #1
 8006144:	d103      	bne.n	800614e <sbrk_aligned+0x26>
 8006146:	f04f 34ff 	mov.w	r4, #4294967295
 800614a:	4620      	mov	r0, r4
 800614c:	bd70      	pop	{r4, r5, r6, pc}
 800614e:	1cc4      	adds	r4, r0, #3
 8006150:	f024 0403 	bic.w	r4, r4, #3
 8006154:	42a0      	cmp	r0, r4
 8006156:	d0f8      	beq.n	800614a <sbrk_aligned+0x22>
 8006158:	1a21      	subs	r1, r4, r0
 800615a:	4628      	mov	r0, r5
 800615c:	f001 fe54 	bl	8007e08 <_sbrk_r>
 8006160:	3001      	adds	r0, #1
 8006162:	d1f2      	bne.n	800614a <sbrk_aligned+0x22>
 8006164:	e7ef      	b.n	8006146 <sbrk_aligned+0x1e>
 8006166:	bf00      	nop
 8006168:	200005e4 	.word	0x200005e4

0800616c <_malloc_r>:
 800616c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006170:	1ccd      	adds	r5, r1, #3
 8006172:	f025 0503 	bic.w	r5, r5, #3
 8006176:	3508      	adds	r5, #8
 8006178:	2d0c      	cmp	r5, #12
 800617a:	bf38      	it	cc
 800617c:	250c      	movcc	r5, #12
 800617e:	2d00      	cmp	r5, #0
 8006180:	4606      	mov	r6, r0
 8006182:	db01      	blt.n	8006188 <_malloc_r+0x1c>
 8006184:	42a9      	cmp	r1, r5
 8006186:	d904      	bls.n	8006192 <_malloc_r+0x26>
 8006188:	230c      	movs	r3, #12
 800618a:	6033      	str	r3, [r6, #0]
 800618c:	2000      	movs	r0, #0
 800618e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006268 <_malloc_r+0xfc>
 8006196:	f000 f869 	bl	800626c <__malloc_lock>
 800619a:	f8d8 3000 	ldr.w	r3, [r8]
 800619e:	461c      	mov	r4, r3
 80061a0:	bb44      	cbnz	r4, 80061f4 <_malloc_r+0x88>
 80061a2:	4629      	mov	r1, r5
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7ff ffbf 	bl	8006128 <sbrk_aligned>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	4604      	mov	r4, r0
 80061ae:	d158      	bne.n	8006262 <_malloc_r+0xf6>
 80061b0:	f8d8 4000 	ldr.w	r4, [r8]
 80061b4:	4627      	mov	r7, r4
 80061b6:	2f00      	cmp	r7, #0
 80061b8:	d143      	bne.n	8006242 <_malloc_r+0xd6>
 80061ba:	2c00      	cmp	r4, #0
 80061bc:	d04b      	beq.n	8006256 <_malloc_r+0xea>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	4639      	mov	r1, r7
 80061c2:	4630      	mov	r0, r6
 80061c4:	eb04 0903 	add.w	r9, r4, r3
 80061c8:	f001 fe1e 	bl	8007e08 <_sbrk_r>
 80061cc:	4581      	cmp	r9, r0
 80061ce:	d142      	bne.n	8006256 <_malloc_r+0xea>
 80061d0:	6821      	ldr	r1, [r4, #0]
 80061d2:	4630      	mov	r0, r6
 80061d4:	1a6d      	subs	r5, r5, r1
 80061d6:	4629      	mov	r1, r5
 80061d8:	f7ff ffa6 	bl	8006128 <sbrk_aligned>
 80061dc:	3001      	adds	r0, #1
 80061de:	d03a      	beq.n	8006256 <_malloc_r+0xea>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	442b      	add	r3, r5
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	f8d8 3000 	ldr.w	r3, [r8]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	bb62      	cbnz	r2, 8006248 <_malloc_r+0xdc>
 80061ee:	f8c8 7000 	str.w	r7, [r8]
 80061f2:	e00f      	b.n	8006214 <_malloc_r+0xa8>
 80061f4:	6822      	ldr	r2, [r4, #0]
 80061f6:	1b52      	subs	r2, r2, r5
 80061f8:	d420      	bmi.n	800623c <_malloc_r+0xd0>
 80061fa:	2a0b      	cmp	r2, #11
 80061fc:	d917      	bls.n	800622e <_malloc_r+0xc2>
 80061fe:	1961      	adds	r1, r4, r5
 8006200:	42a3      	cmp	r3, r4
 8006202:	6025      	str	r5, [r4, #0]
 8006204:	bf18      	it	ne
 8006206:	6059      	strne	r1, [r3, #4]
 8006208:	6863      	ldr	r3, [r4, #4]
 800620a:	bf08      	it	eq
 800620c:	f8c8 1000 	streq.w	r1, [r8]
 8006210:	5162      	str	r2, [r4, r5]
 8006212:	604b      	str	r3, [r1, #4]
 8006214:	4630      	mov	r0, r6
 8006216:	f000 f82f 	bl	8006278 <__malloc_unlock>
 800621a:	f104 000b 	add.w	r0, r4, #11
 800621e:	1d23      	adds	r3, r4, #4
 8006220:	f020 0007 	bic.w	r0, r0, #7
 8006224:	1ac2      	subs	r2, r0, r3
 8006226:	bf1c      	itt	ne
 8006228:	1a1b      	subne	r3, r3, r0
 800622a:	50a3      	strne	r3, [r4, r2]
 800622c:	e7af      	b.n	800618e <_malloc_r+0x22>
 800622e:	6862      	ldr	r2, [r4, #4]
 8006230:	42a3      	cmp	r3, r4
 8006232:	bf0c      	ite	eq
 8006234:	f8c8 2000 	streq.w	r2, [r8]
 8006238:	605a      	strne	r2, [r3, #4]
 800623a:	e7eb      	b.n	8006214 <_malloc_r+0xa8>
 800623c:	4623      	mov	r3, r4
 800623e:	6864      	ldr	r4, [r4, #4]
 8006240:	e7ae      	b.n	80061a0 <_malloc_r+0x34>
 8006242:	463c      	mov	r4, r7
 8006244:	687f      	ldr	r7, [r7, #4]
 8006246:	e7b6      	b.n	80061b6 <_malloc_r+0x4a>
 8006248:	461a      	mov	r2, r3
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	42a3      	cmp	r3, r4
 800624e:	d1fb      	bne.n	8006248 <_malloc_r+0xdc>
 8006250:	2300      	movs	r3, #0
 8006252:	6053      	str	r3, [r2, #4]
 8006254:	e7de      	b.n	8006214 <_malloc_r+0xa8>
 8006256:	230c      	movs	r3, #12
 8006258:	4630      	mov	r0, r6
 800625a:	6033      	str	r3, [r6, #0]
 800625c:	f000 f80c 	bl	8006278 <__malloc_unlock>
 8006260:	e794      	b.n	800618c <_malloc_r+0x20>
 8006262:	6005      	str	r5, [r0, #0]
 8006264:	e7d6      	b.n	8006214 <_malloc_r+0xa8>
 8006266:	bf00      	nop
 8006268:	200005e8 	.word	0x200005e8

0800626c <__malloc_lock>:
 800626c:	4801      	ldr	r0, [pc, #4]	@ (8006274 <__malloc_lock+0x8>)
 800626e:	f7ff bf0c 	b.w	800608a <__retarget_lock_acquire_recursive>
 8006272:	bf00      	nop
 8006274:	200005e0 	.word	0x200005e0

08006278 <__malloc_unlock>:
 8006278:	4801      	ldr	r0, [pc, #4]	@ (8006280 <__malloc_unlock+0x8>)
 800627a:	f7ff bf07 	b.w	800608c <__retarget_lock_release_recursive>
 800627e:	bf00      	nop
 8006280:	200005e0 	.word	0x200005e0

08006284 <sulp>:
 8006284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006288:	460f      	mov	r7, r1
 800628a:	4690      	mov	r8, r2
 800628c:	f002 fcac 	bl	8008be8 <__ulp>
 8006290:	4604      	mov	r4, r0
 8006292:	460d      	mov	r5, r1
 8006294:	f1b8 0f00 	cmp.w	r8, #0
 8006298:	d011      	beq.n	80062be <sulp+0x3a>
 800629a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800629e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dd0b      	ble.n	80062be <sulp+0x3a>
 80062a6:	2400      	movs	r4, #0
 80062a8:	051b      	lsls	r3, r3, #20
 80062aa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80062ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80062b2:	4622      	mov	r2, r4
 80062b4:	462b      	mov	r3, r5
 80062b6:	f7fa f90f 	bl	80004d8 <__aeabi_dmul>
 80062ba:	4604      	mov	r4, r0
 80062bc:	460d      	mov	r5, r1
 80062be:	4620      	mov	r0, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080062c8 <_strtod_l>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	b09f      	sub	sp, #124	@ 0x7c
 80062ce:	9217      	str	r2, [sp, #92]	@ 0x5c
 80062d0:	2200      	movs	r2, #0
 80062d2:	460c      	mov	r4, r1
 80062d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80062d6:	f04f 0a00 	mov.w	sl, #0
 80062da:	f04f 0b00 	mov.w	fp, #0
 80062de:	460a      	mov	r2, r1
 80062e0:	9005      	str	r0, [sp, #20]
 80062e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80062e4:	7811      	ldrb	r1, [r2, #0]
 80062e6:	292b      	cmp	r1, #43	@ 0x2b
 80062e8:	d048      	beq.n	800637c <_strtod_l+0xb4>
 80062ea:	d836      	bhi.n	800635a <_strtod_l+0x92>
 80062ec:	290d      	cmp	r1, #13
 80062ee:	d830      	bhi.n	8006352 <_strtod_l+0x8a>
 80062f0:	2908      	cmp	r1, #8
 80062f2:	d830      	bhi.n	8006356 <_strtod_l+0x8e>
 80062f4:	2900      	cmp	r1, #0
 80062f6:	d039      	beq.n	800636c <_strtod_l+0xa4>
 80062f8:	2200      	movs	r2, #0
 80062fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80062fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80062fe:	782a      	ldrb	r2, [r5, #0]
 8006300:	2a30      	cmp	r2, #48	@ 0x30
 8006302:	f040 80b1 	bne.w	8006468 <_strtod_l+0x1a0>
 8006306:	786a      	ldrb	r2, [r5, #1]
 8006308:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800630c:	2a58      	cmp	r2, #88	@ 0x58
 800630e:	d16c      	bne.n	80063ea <_strtod_l+0x122>
 8006310:	9302      	str	r3, [sp, #8]
 8006312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006314:	4a8e      	ldr	r2, [pc, #568]	@ (8006550 <_strtod_l+0x288>)
 8006316:	9301      	str	r3, [sp, #4]
 8006318:	ab1a      	add	r3, sp, #104	@ 0x68
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	9805      	ldr	r0, [sp, #20]
 800631e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006320:	a919      	add	r1, sp, #100	@ 0x64
 8006322:	f001 fe0b 	bl	8007f3c <__gethex>
 8006326:	f010 060f 	ands.w	r6, r0, #15
 800632a:	4604      	mov	r4, r0
 800632c:	d005      	beq.n	800633a <_strtod_l+0x72>
 800632e:	2e06      	cmp	r6, #6
 8006330:	d126      	bne.n	8006380 <_strtod_l+0xb8>
 8006332:	2300      	movs	r3, #0
 8006334:	3501      	adds	r5, #1
 8006336:	9519      	str	r5, [sp, #100]	@ 0x64
 8006338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800633a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800633c:	2b00      	cmp	r3, #0
 800633e:	f040 8584 	bne.w	8006e4a <_strtod_l+0xb82>
 8006342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006344:	b1bb      	cbz	r3, 8006376 <_strtod_l+0xae>
 8006346:	4650      	mov	r0, sl
 8006348:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800634c:	b01f      	add	sp, #124	@ 0x7c
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	2920      	cmp	r1, #32
 8006354:	d1d0      	bne.n	80062f8 <_strtod_l+0x30>
 8006356:	3201      	adds	r2, #1
 8006358:	e7c3      	b.n	80062e2 <_strtod_l+0x1a>
 800635a:	292d      	cmp	r1, #45	@ 0x2d
 800635c:	d1cc      	bne.n	80062f8 <_strtod_l+0x30>
 800635e:	2101      	movs	r1, #1
 8006360:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006362:	1c51      	adds	r1, r2, #1
 8006364:	9119      	str	r1, [sp, #100]	@ 0x64
 8006366:	7852      	ldrb	r2, [r2, #1]
 8006368:	2a00      	cmp	r2, #0
 800636a:	d1c7      	bne.n	80062fc <_strtod_l+0x34>
 800636c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800636e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 8568 	bne.w	8006e46 <_strtod_l+0xb7e>
 8006376:	4650      	mov	r0, sl
 8006378:	4659      	mov	r1, fp
 800637a:	e7e7      	b.n	800634c <_strtod_l+0x84>
 800637c:	2100      	movs	r1, #0
 800637e:	e7ef      	b.n	8006360 <_strtod_l+0x98>
 8006380:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006382:	b13a      	cbz	r2, 8006394 <_strtod_l+0xcc>
 8006384:	2135      	movs	r1, #53	@ 0x35
 8006386:	a81c      	add	r0, sp, #112	@ 0x70
 8006388:	f002 fd1e 	bl	8008dc8 <__copybits>
 800638c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800638e:	9805      	ldr	r0, [sp, #20]
 8006390:	f002 f8f8 	bl	8008584 <_Bfree>
 8006394:	3e01      	subs	r6, #1
 8006396:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006398:	2e04      	cmp	r6, #4
 800639a:	d806      	bhi.n	80063aa <_strtod_l+0xe2>
 800639c:	e8df f006 	tbb	[pc, r6]
 80063a0:	201d0314 	.word	0x201d0314
 80063a4:	14          	.byte	0x14
 80063a5:	00          	.byte	0x00
 80063a6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80063aa:	05e1      	lsls	r1, r4, #23
 80063ac:	bf48      	it	mi
 80063ae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80063b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063b6:	0d1b      	lsrs	r3, r3, #20
 80063b8:	051b      	lsls	r3, r3, #20
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1bd      	bne.n	800633a <_strtod_l+0x72>
 80063be:	f7ff fe39 	bl	8006034 <__errno>
 80063c2:	2322      	movs	r3, #34	@ 0x22
 80063c4:	6003      	str	r3, [r0, #0]
 80063c6:	e7b8      	b.n	800633a <_strtod_l+0x72>
 80063c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80063cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80063d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063d4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80063d8:	e7e7      	b.n	80063aa <_strtod_l+0xe2>
 80063da:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006554 <_strtod_l+0x28c>
 80063de:	e7e4      	b.n	80063aa <_strtod_l+0xe2>
 80063e0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80063e4:	f04f 3aff 	mov.w	sl, #4294967295
 80063e8:	e7df      	b.n	80063aa <_strtod_l+0xe2>
 80063ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	2b30      	cmp	r3, #48	@ 0x30
 80063f4:	d0f9      	beq.n	80063ea <_strtod_l+0x122>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d09f      	beq.n	800633a <_strtod_l+0x72>
 80063fa:	2301      	movs	r3, #1
 80063fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006400:	220a      	movs	r2, #10
 8006402:	930c      	str	r3, [sp, #48]	@ 0x30
 8006404:	2300      	movs	r3, #0
 8006406:	461f      	mov	r7, r3
 8006408:	9308      	str	r3, [sp, #32]
 800640a:	930a      	str	r3, [sp, #40]	@ 0x28
 800640c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800640e:	7805      	ldrb	r5, [r0, #0]
 8006410:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006414:	b2d9      	uxtb	r1, r3
 8006416:	2909      	cmp	r1, #9
 8006418:	d928      	bls.n	800646c <_strtod_l+0x1a4>
 800641a:	2201      	movs	r2, #1
 800641c:	494e      	ldr	r1, [pc, #312]	@ (8006558 <_strtod_l+0x290>)
 800641e:	f001 fce0 	bl	8007de2 <strncmp>
 8006422:	2800      	cmp	r0, #0
 8006424:	d032      	beq.n	800648c <_strtod_l+0x1c4>
 8006426:	2000      	movs	r0, #0
 8006428:	462a      	mov	r2, r5
 800642a:	4681      	mov	r9, r0
 800642c:	463d      	mov	r5, r7
 800642e:	4603      	mov	r3, r0
 8006430:	2a65      	cmp	r2, #101	@ 0x65
 8006432:	d001      	beq.n	8006438 <_strtod_l+0x170>
 8006434:	2a45      	cmp	r2, #69	@ 0x45
 8006436:	d114      	bne.n	8006462 <_strtod_l+0x19a>
 8006438:	b91d      	cbnz	r5, 8006442 <_strtod_l+0x17a>
 800643a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800643c:	4302      	orrs	r2, r0
 800643e:	d095      	beq.n	800636c <_strtod_l+0xa4>
 8006440:	2500      	movs	r5, #0
 8006442:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006444:	1c62      	adds	r2, r4, #1
 8006446:	9219      	str	r2, [sp, #100]	@ 0x64
 8006448:	7862      	ldrb	r2, [r4, #1]
 800644a:	2a2b      	cmp	r2, #43	@ 0x2b
 800644c:	d077      	beq.n	800653e <_strtod_l+0x276>
 800644e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006450:	d07b      	beq.n	800654a <_strtod_l+0x282>
 8006452:	f04f 0c00 	mov.w	ip, #0
 8006456:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800645a:	2909      	cmp	r1, #9
 800645c:	f240 8082 	bls.w	8006564 <_strtod_l+0x29c>
 8006460:	9419      	str	r4, [sp, #100]	@ 0x64
 8006462:	f04f 0800 	mov.w	r8, #0
 8006466:	e0a2      	b.n	80065ae <_strtod_l+0x2e6>
 8006468:	2300      	movs	r3, #0
 800646a:	e7c7      	b.n	80063fc <_strtod_l+0x134>
 800646c:	2f08      	cmp	r7, #8
 800646e:	bfd5      	itete	le
 8006470:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006472:	9908      	ldrgt	r1, [sp, #32]
 8006474:	fb02 3301 	mlale	r3, r2, r1, r3
 8006478:	fb02 3301 	mlagt	r3, r2, r1, r3
 800647c:	f100 0001 	add.w	r0, r0, #1
 8006480:	bfd4      	ite	le
 8006482:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006484:	9308      	strgt	r3, [sp, #32]
 8006486:	3701      	adds	r7, #1
 8006488:	9019      	str	r0, [sp, #100]	@ 0x64
 800648a:	e7bf      	b.n	800640c <_strtod_l+0x144>
 800648c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	9219      	str	r2, [sp, #100]	@ 0x64
 8006492:	785a      	ldrb	r2, [r3, #1]
 8006494:	b37f      	cbz	r7, 80064f6 <_strtod_l+0x22e>
 8006496:	4681      	mov	r9, r0
 8006498:	463d      	mov	r5, r7
 800649a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800649e:	2b09      	cmp	r3, #9
 80064a0:	d912      	bls.n	80064c8 <_strtod_l+0x200>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7c4      	b.n	8006430 <_strtod_l+0x168>
 80064a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064a8:	3001      	adds	r0, #1
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80064ae:	785a      	ldrb	r2, [r3, #1]
 80064b0:	2a30      	cmp	r2, #48	@ 0x30
 80064b2:	d0f8      	beq.n	80064a6 <_strtod_l+0x1de>
 80064b4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	f200 84cb 	bhi.w	8006e54 <_strtod_l+0xb8c>
 80064be:	4681      	mov	r9, r0
 80064c0:	2000      	movs	r0, #0
 80064c2:	4605      	mov	r5, r0
 80064c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80064c8:	3a30      	subs	r2, #48	@ 0x30
 80064ca:	f100 0301 	add.w	r3, r0, #1
 80064ce:	d02a      	beq.n	8006526 <_strtod_l+0x25e>
 80064d0:	4499      	add	r9, r3
 80064d2:	210a      	movs	r1, #10
 80064d4:	462b      	mov	r3, r5
 80064d6:	eb00 0c05 	add.w	ip, r0, r5
 80064da:	4563      	cmp	r3, ip
 80064dc:	d10d      	bne.n	80064fa <_strtod_l+0x232>
 80064de:	1c69      	adds	r1, r5, #1
 80064e0:	4401      	add	r1, r0
 80064e2:	4428      	add	r0, r5
 80064e4:	2808      	cmp	r0, #8
 80064e6:	dc16      	bgt.n	8006516 <_strtod_l+0x24e>
 80064e8:	230a      	movs	r3, #10
 80064ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80064ec:	fb03 2300 	mla	r3, r3, r0, r2
 80064f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80064f2:	2300      	movs	r3, #0
 80064f4:	e018      	b.n	8006528 <_strtod_l+0x260>
 80064f6:	4638      	mov	r0, r7
 80064f8:	e7da      	b.n	80064b0 <_strtod_l+0x1e8>
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	f103 0301 	add.w	r3, r3, #1
 8006500:	dc03      	bgt.n	800650a <_strtod_l+0x242>
 8006502:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006504:	434e      	muls	r6, r1
 8006506:	960a      	str	r6, [sp, #40]	@ 0x28
 8006508:	e7e7      	b.n	80064da <_strtod_l+0x212>
 800650a:	2b10      	cmp	r3, #16
 800650c:	bfde      	ittt	le
 800650e:	9e08      	ldrle	r6, [sp, #32]
 8006510:	434e      	mulle	r6, r1
 8006512:	9608      	strle	r6, [sp, #32]
 8006514:	e7e1      	b.n	80064da <_strtod_l+0x212>
 8006516:	280f      	cmp	r0, #15
 8006518:	dceb      	bgt.n	80064f2 <_strtod_l+0x22a>
 800651a:	230a      	movs	r3, #10
 800651c:	9808      	ldr	r0, [sp, #32]
 800651e:	fb03 2300 	mla	r3, r3, r0, r2
 8006522:	9308      	str	r3, [sp, #32]
 8006524:	e7e5      	b.n	80064f2 <_strtod_l+0x22a>
 8006526:	4629      	mov	r1, r5
 8006528:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800652a:	460d      	mov	r5, r1
 800652c:	1c50      	adds	r0, r2, #1
 800652e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006530:	7852      	ldrb	r2, [r2, #1]
 8006532:	4618      	mov	r0, r3
 8006534:	e7b1      	b.n	800649a <_strtod_l+0x1d2>
 8006536:	f04f 0900 	mov.w	r9, #0
 800653a:	2301      	movs	r3, #1
 800653c:	e77d      	b.n	800643a <_strtod_l+0x172>
 800653e:	f04f 0c00 	mov.w	ip, #0
 8006542:	1ca2      	adds	r2, r4, #2
 8006544:	9219      	str	r2, [sp, #100]	@ 0x64
 8006546:	78a2      	ldrb	r2, [r4, #2]
 8006548:	e785      	b.n	8006456 <_strtod_l+0x18e>
 800654a:	f04f 0c01 	mov.w	ip, #1
 800654e:	e7f8      	b.n	8006542 <_strtod_l+0x27a>
 8006550:	08009660 	.word	0x08009660
 8006554:	7ff00000 	.word	0x7ff00000
 8006558:	0800963b 	.word	0x0800963b
 800655c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800655e:	1c51      	adds	r1, r2, #1
 8006560:	9119      	str	r1, [sp, #100]	@ 0x64
 8006562:	7852      	ldrb	r2, [r2, #1]
 8006564:	2a30      	cmp	r2, #48	@ 0x30
 8006566:	d0f9      	beq.n	800655c <_strtod_l+0x294>
 8006568:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800656c:	2908      	cmp	r1, #8
 800656e:	f63f af78 	bhi.w	8006462 <_strtod_l+0x19a>
 8006572:	f04f 080a 	mov.w	r8, #10
 8006576:	3a30      	subs	r2, #48	@ 0x30
 8006578:	920e      	str	r2, [sp, #56]	@ 0x38
 800657a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800657c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800657e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006580:	1c56      	adds	r6, r2, #1
 8006582:	9619      	str	r6, [sp, #100]	@ 0x64
 8006584:	7852      	ldrb	r2, [r2, #1]
 8006586:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800658a:	f1be 0f09 	cmp.w	lr, #9
 800658e:	d939      	bls.n	8006604 <_strtod_l+0x33c>
 8006590:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006592:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006596:	1a76      	subs	r6, r6, r1
 8006598:	2e08      	cmp	r6, #8
 800659a:	dc03      	bgt.n	80065a4 <_strtod_l+0x2dc>
 800659c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800659e:	4588      	cmp	r8, r1
 80065a0:	bfa8      	it	ge
 80065a2:	4688      	movge	r8, r1
 80065a4:	f1bc 0f00 	cmp.w	ip, #0
 80065a8:	d001      	beq.n	80065ae <_strtod_l+0x2e6>
 80065aa:	f1c8 0800 	rsb	r8, r8, #0
 80065ae:	2d00      	cmp	r5, #0
 80065b0:	d14e      	bne.n	8006650 <_strtod_l+0x388>
 80065b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065b4:	4308      	orrs	r0, r1
 80065b6:	f47f aec0 	bne.w	800633a <_strtod_l+0x72>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f47f aed6 	bne.w	800636c <_strtod_l+0xa4>
 80065c0:	2a69      	cmp	r2, #105	@ 0x69
 80065c2:	d028      	beq.n	8006616 <_strtod_l+0x34e>
 80065c4:	dc25      	bgt.n	8006612 <_strtod_l+0x34a>
 80065c6:	2a49      	cmp	r2, #73	@ 0x49
 80065c8:	d025      	beq.n	8006616 <_strtod_l+0x34e>
 80065ca:	2a4e      	cmp	r2, #78	@ 0x4e
 80065cc:	f47f aece 	bne.w	800636c <_strtod_l+0xa4>
 80065d0:	499a      	ldr	r1, [pc, #616]	@ (800683c <_strtod_l+0x574>)
 80065d2:	a819      	add	r0, sp, #100	@ 0x64
 80065d4:	f001 fed4 	bl	8008380 <__match>
 80065d8:	2800      	cmp	r0, #0
 80065da:	f43f aec7 	beq.w	800636c <_strtod_l+0xa4>
 80065de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b28      	cmp	r3, #40	@ 0x28
 80065e4:	d12e      	bne.n	8006644 <_strtod_l+0x37c>
 80065e6:	4996      	ldr	r1, [pc, #600]	@ (8006840 <_strtod_l+0x578>)
 80065e8:	aa1c      	add	r2, sp, #112	@ 0x70
 80065ea:	a819      	add	r0, sp, #100	@ 0x64
 80065ec:	f001 fedc 	bl	80083a8 <__hexnan>
 80065f0:	2805      	cmp	r0, #5
 80065f2:	d127      	bne.n	8006644 <_strtod_l+0x37c>
 80065f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80065f6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80065fa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80065fe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006602:	e69a      	b.n	800633a <_strtod_l+0x72>
 8006604:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006606:	fb08 2101 	mla	r1, r8, r1, r2
 800660a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800660e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006610:	e7b5      	b.n	800657e <_strtod_l+0x2b6>
 8006612:	2a6e      	cmp	r2, #110	@ 0x6e
 8006614:	e7da      	b.n	80065cc <_strtod_l+0x304>
 8006616:	498b      	ldr	r1, [pc, #556]	@ (8006844 <_strtod_l+0x57c>)
 8006618:	a819      	add	r0, sp, #100	@ 0x64
 800661a:	f001 feb1 	bl	8008380 <__match>
 800661e:	2800      	cmp	r0, #0
 8006620:	f43f aea4 	beq.w	800636c <_strtod_l+0xa4>
 8006624:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006626:	4988      	ldr	r1, [pc, #544]	@ (8006848 <_strtod_l+0x580>)
 8006628:	3b01      	subs	r3, #1
 800662a:	a819      	add	r0, sp, #100	@ 0x64
 800662c:	9319      	str	r3, [sp, #100]	@ 0x64
 800662e:	f001 fea7 	bl	8008380 <__match>
 8006632:	b910      	cbnz	r0, 800663a <_strtod_l+0x372>
 8006634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006636:	3301      	adds	r3, #1
 8006638:	9319      	str	r3, [sp, #100]	@ 0x64
 800663a:	f04f 0a00 	mov.w	sl, #0
 800663e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800684c <_strtod_l+0x584>
 8006642:	e67a      	b.n	800633a <_strtod_l+0x72>
 8006644:	4882      	ldr	r0, [pc, #520]	@ (8006850 <_strtod_l+0x588>)
 8006646:	f001 fc0b 	bl	8007e60 <nan>
 800664a:	4682      	mov	sl, r0
 800664c:	468b      	mov	fp, r1
 800664e:	e674      	b.n	800633a <_strtod_l+0x72>
 8006650:	eba8 0309 	sub.w	r3, r8, r9
 8006654:	2f00      	cmp	r7, #0
 8006656:	bf08      	it	eq
 8006658:	462f      	moveq	r7, r5
 800665a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800665c:	2d10      	cmp	r5, #16
 800665e:	462c      	mov	r4, r5
 8006660:	9309      	str	r3, [sp, #36]	@ 0x24
 8006662:	bfa8      	it	ge
 8006664:	2410      	movge	r4, #16
 8006666:	f7f9 febd 	bl	80003e4 <__aeabi_ui2d>
 800666a:	2d09      	cmp	r5, #9
 800666c:	4682      	mov	sl, r0
 800666e:	468b      	mov	fp, r1
 8006670:	dc11      	bgt.n	8006696 <_strtod_l+0x3ce>
 8006672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	f43f ae60 	beq.w	800633a <_strtod_l+0x72>
 800667a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800667c:	dd76      	ble.n	800676c <_strtod_l+0x4a4>
 800667e:	2b16      	cmp	r3, #22
 8006680:	dc5d      	bgt.n	800673e <_strtod_l+0x476>
 8006682:	4974      	ldr	r1, [pc, #464]	@ (8006854 <_strtod_l+0x58c>)
 8006684:	4652      	mov	r2, sl
 8006686:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800668a:	465b      	mov	r3, fp
 800668c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006690:	f7f9 ff22 	bl	80004d8 <__aeabi_dmul>
 8006694:	e7d9      	b.n	800664a <_strtod_l+0x382>
 8006696:	4b6f      	ldr	r3, [pc, #444]	@ (8006854 <_strtod_l+0x58c>)
 8006698:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800669c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80066a0:	f7f9 ff1a 	bl	80004d8 <__aeabi_dmul>
 80066a4:	4682      	mov	sl, r0
 80066a6:	9808      	ldr	r0, [sp, #32]
 80066a8:	468b      	mov	fp, r1
 80066aa:	f7f9 fe9b 	bl	80003e4 <__aeabi_ui2d>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4650      	mov	r0, sl
 80066b4:	4659      	mov	r1, fp
 80066b6:	f7f9 fd59 	bl	800016c <__adddf3>
 80066ba:	2d0f      	cmp	r5, #15
 80066bc:	4682      	mov	sl, r0
 80066be:	468b      	mov	fp, r1
 80066c0:	ddd7      	ble.n	8006672 <_strtod_l+0x3aa>
 80066c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c4:	1b2c      	subs	r4, r5, r4
 80066c6:	441c      	add	r4, r3
 80066c8:	2c00      	cmp	r4, #0
 80066ca:	f340 8096 	ble.w	80067fa <_strtod_l+0x532>
 80066ce:	f014 030f 	ands.w	r3, r4, #15
 80066d2:	d00a      	beq.n	80066ea <_strtod_l+0x422>
 80066d4:	495f      	ldr	r1, [pc, #380]	@ (8006854 <_strtod_l+0x58c>)
 80066d6:	4652      	mov	r2, sl
 80066d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066e0:	465b      	mov	r3, fp
 80066e2:	f7f9 fef9 	bl	80004d8 <__aeabi_dmul>
 80066e6:	4682      	mov	sl, r0
 80066e8:	468b      	mov	fp, r1
 80066ea:	f034 040f 	bics.w	r4, r4, #15
 80066ee:	d073      	beq.n	80067d8 <_strtod_l+0x510>
 80066f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80066f4:	dd48      	ble.n	8006788 <_strtod_l+0x4c0>
 80066f6:	2400      	movs	r4, #0
 80066f8:	46a0      	mov	r8, r4
 80066fa:	46a1      	mov	r9, r4
 80066fc:	940a      	str	r4, [sp, #40]	@ 0x28
 80066fe:	2322      	movs	r3, #34	@ 0x22
 8006700:	f04f 0a00 	mov.w	sl, #0
 8006704:	9a05      	ldr	r2, [sp, #20]
 8006706:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800684c <_strtod_l+0x584>
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	f43f ae13 	beq.w	800633a <_strtod_l+0x72>
 8006714:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006716:	9805      	ldr	r0, [sp, #20]
 8006718:	f001 ff34 	bl	8008584 <_Bfree>
 800671c:	4649      	mov	r1, r9
 800671e:	9805      	ldr	r0, [sp, #20]
 8006720:	f001 ff30 	bl	8008584 <_Bfree>
 8006724:	4641      	mov	r1, r8
 8006726:	9805      	ldr	r0, [sp, #20]
 8006728:	f001 ff2c 	bl	8008584 <_Bfree>
 800672c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800672e:	9805      	ldr	r0, [sp, #20]
 8006730:	f001 ff28 	bl	8008584 <_Bfree>
 8006734:	4621      	mov	r1, r4
 8006736:	9805      	ldr	r0, [sp, #20]
 8006738:	f001 ff24 	bl	8008584 <_Bfree>
 800673c:	e5fd      	b.n	800633a <_strtod_l+0x72>
 800673e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006740:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006744:	4293      	cmp	r3, r2
 8006746:	dbbc      	blt.n	80066c2 <_strtod_l+0x3fa>
 8006748:	4c42      	ldr	r4, [pc, #264]	@ (8006854 <_strtod_l+0x58c>)
 800674a:	f1c5 050f 	rsb	r5, r5, #15
 800674e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006752:	4652      	mov	r2, sl
 8006754:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006758:	465b      	mov	r3, fp
 800675a:	f7f9 febd 	bl	80004d8 <__aeabi_dmul>
 800675e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006760:	1b5d      	subs	r5, r3, r5
 8006762:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006766:	e9d4 2300 	ldrd	r2, r3, [r4]
 800676a:	e791      	b.n	8006690 <_strtod_l+0x3c8>
 800676c:	3316      	adds	r3, #22
 800676e:	dba8      	blt.n	80066c2 <_strtod_l+0x3fa>
 8006770:	4b38      	ldr	r3, [pc, #224]	@ (8006854 <_strtod_l+0x58c>)
 8006772:	eba9 0808 	sub.w	r8, r9, r8
 8006776:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800677a:	4650      	mov	r0, sl
 800677c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006780:	4659      	mov	r1, fp
 8006782:	f7f9 ffd3 	bl	800072c <__aeabi_ddiv>
 8006786:	e760      	b.n	800664a <_strtod_l+0x382>
 8006788:	4b33      	ldr	r3, [pc, #204]	@ (8006858 <_strtod_l+0x590>)
 800678a:	4650      	mov	r0, sl
 800678c:	9308      	str	r3, [sp, #32]
 800678e:	2300      	movs	r3, #0
 8006790:	4659      	mov	r1, fp
 8006792:	461e      	mov	r6, r3
 8006794:	1124      	asrs	r4, r4, #4
 8006796:	2c01      	cmp	r4, #1
 8006798:	dc21      	bgt.n	80067de <_strtod_l+0x516>
 800679a:	b10b      	cbz	r3, 80067a0 <_strtod_l+0x4d8>
 800679c:	4682      	mov	sl, r0
 800679e:	468b      	mov	fp, r1
 80067a0:	492d      	ldr	r1, [pc, #180]	@ (8006858 <_strtod_l+0x590>)
 80067a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80067a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80067aa:	4652      	mov	r2, sl
 80067ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067b0:	465b      	mov	r3, fp
 80067b2:	f7f9 fe91 	bl	80004d8 <__aeabi_dmul>
 80067b6:	4b25      	ldr	r3, [pc, #148]	@ (800684c <_strtod_l+0x584>)
 80067b8:	460a      	mov	r2, r1
 80067ba:	400b      	ands	r3, r1
 80067bc:	4927      	ldr	r1, [pc, #156]	@ (800685c <_strtod_l+0x594>)
 80067be:	4682      	mov	sl, r0
 80067c0:	428b      	cmp	r3, r1
 80067c2:	d898      	bhi.n	80066f6 <_strtod_l+0x42e>
 80067c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf86      	itte	hi
 80067cc:	f04f 3aff 	movhi.w	sl, #4294967295
 80067d0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006860 <_strtod_l+0x598>
 80067d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80067d8:	2300      	movs	r3, #0
 80067da:	9308      	str	r3, [sp, #32]
 80067dc:	e07a      	b.n	80068d4 <_strtod_l+0x60c>
 80067de:	07e2      	lsls	r2, r4, #31
 80067e0:	d505      	bpl.n	80067ee <_strtod_l+0x526>
 80067e2:	9b08      	ldr	r3, [sp, #32]
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f7f9 fe76 	bl	80004d8 <__aeabi_dmul>
 80067ec:	2301      	movs	r3, #1
 80067ee:	9a08      	ldr	r2, [sp, #32]
 80067f0:	3601      	adds	r6, #1
 80067f2:	3208      	adds	r2, #8
 80067f4:	1064      	asrs	r4, r4, #1
 80067f6:	9208      	str	r2, [sp, #32]
 80067f8:	e7cd      	b.n	8006796 <_strtod_l+0x4ce>
 80067fa:	d0ed      	beq.n	80067d8 <_strtod_l+0x510>
 80067fc:	4264      	negs	r4, r4
 80067fe:	f014 020f 	ands.w	r2, r4, #15
 8006802:	d00a      	beq.n	800681a <_strtod_l+0x552>
 8006804:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <_strtod_l+0x58c>)
 8006806:	4650      	mov	r0, sl
 8006808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800680c:	4659      	mov	r1, fp
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f7f9 ff8b 	bl	800072c <__aeabi_ddiv>
 8006816:	4682      	mov	sl, r0
 8006818:	468b      	mov	fp, r1
 800681a:	1124      	asrs	r4, r4, #4
 800681c:	d0dc      	beq.n	80067d8 <_strtod_l+0x510>
 800681e:	2c1f      	cmp	r4, #31
 8006820:	dd20      	ble.n	8006864 <_strtod_l+0x59c>
 8006822:	2400      	movs	r4, #0
 8006824:	46a0      	mov	r8, r4
 8006826:	46a1      	mov	r9, r4
 8006828:	940a      	str	r4, [sp, #40]	@ 0x28
 800682a:	2322      	movs	r3, #34	@ 0x22
 800682c:	9a05      	ldr	r2, [sp, #20]
 800682e:	f04f 0a00 	mov.w	sl, #0
 8006832:	f04f 0b00 	mov.w	fp, #0
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	e768      	b.n	800670c <_strtod_l+0x444>
 800683a:	bf00      	nop
 800683c:	08009646 	.word	0x08009646
 8006840:	0800964c 	.word	0x0800964c
 8006844:	0800963d 	.word	0x0800963d
 8006848:	08009640 	.word	0x08009640
 800684c:	7ff00000 	.word	0x7ff00000
 8006850:	08009a13 	.word	0x08009a13
 8006854:	08009910 	.word	0x08009910
 8006858:	080098e8 	.word	0x080098e8
 800685c:	7ca00000 	.word	0x7ca00000
 8006860:	7fefffff 	.word	0x7fefffff
 8006864:	f014 0310 	ands.w	r3, r4, #16
 8006868:	bf18      	it	ne
 800686a:	236a      	movne	r3, #106	@ 0x6a
 800686c:	4650      	mov	r0, sl
 800686e:	9308      	str	r3, [sp, #32]
 8006870:	4659      	mov	r1, fp
 8006872:	2300      	movs	r3, #0
 8006874:	4ea9      	ldr	r6, [pc, #676]	@ (8006b1c <_strtod_l+0x854>)
 8006876:	07e2      	lsls	r2, r4, #31
 8006878:	d504      	bpl.n	8006884 <_strtod_l+0x5bc>
 800687a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800687e:	f7f9 fe2b 	bl	80004d8 <__aeabi_dmul>
 8006882:	2301      	movs	r3, #1
 8006884:	1064      	asrs	r4, r4, #1
 8006886:	f106 0608 	add.w	r6, r6, #8
 800688a:	d1f4      	bne.n	8006876 <_strtod_l+0x5ae>
 800688c:	b10b      	cbz	r3, 8006892 <_strtod_l+0x5ca>
 800688e:	4682      	mov	sl, r0
 8006890:	468b      	mov	fp, r1
 8006892:	9b08      	ldr	r3, [sp, #32]
 8006894:	b1b3      	cbz	r3, 80068c4 <_strtod_l+0x5fc>
 8006896:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800689a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800689e:	2b00      	cmp	r3, #0
 80068a0:	4659      	mov	r1, fp
 80068a2:	dd0f      	ble.n	80068c4 <_strtod_l+0x5fc>
 80068a4:	2b1f      	cmp	r3, #31
 80068a6:	dd57      	ble.n	8006958 <_strtod_l+0x690>
 80068a8:	2b34      	cmp	r3, #52	@ 0x34
 80068aa:	bfd8      	it	le
 80068ac:	f04f 33ff 	movle.w	r3, #4294967295
 80068b0:	f04f 0a00 	mov.w	sl, #0
 80068b4:	bfcf      	iteee	gt
 80068b6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80068ba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80068be:	4093      	lslle	r3, r2
 80068c0:	ea03 0b01 	andle.w	fp, r3, r1
 80068c4:	2200      	movs	r2, #0
 80068c6:	2300      	movs	r3, #0
 80068c8:	4650      	mov	r0, sl
 80068ca:	4659      	mov	r1, fp
 80068cc:	f7fa f86c 	bl	80009a8 <__aeabi_dcmpeq>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d1a6      	bne.n	8006822 <_strtod_l+0x55a>
 80068d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068d6:	463a      	mov	r2, r7
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80068dc:	462b      	mov	r3, r5
 80068de:	9805      	ldr	r0, [sp, #20]
 80068e0:	f001 feb8 	bl	8008654 <__s2b>
 80068e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f43f af05 	beq.w	80066f6 <_strtod_l+0x42e>
 80068ec:	2400      	movs	r4, #0
 80068ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068f0:	eba9 0308 	sub.w	r3, r9, r8
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	bfa8      	it	ge
 80068f8:	2300      	movge	r3, #0
 80068fa:	46a0      	mov	r8, r4
 80068fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80068fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006902:	9316      	str	r3, [sp, #88]	@ 0x58
 8006904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006906:	9805      	ldr	r0, [sp, #20]
 8006908:	6859      	ldr	r1, [r3, #4]
 800690a:	f001 fdfb 	bl	8008504 <_Balloc>
 800690e:	4681      	mov	r9, r0
 8006910:	2800      	cmp	r0, #0
 8006912:	f43f aef4 	beq.w	80066fe <_strtod_l+0x436>
 8006916:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006918:	300c      	adds	r0, #12
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	f103 010c 	add.w	r1, r3, #12
 8006920:	3202      	adds	r2, #2
 8006922:	0092      	lsls	r2, r2, #2
 8006924:	f001 fa8e 	bl	8007e44 <memcpy>
 8006928:	ab1c      	add	r3, sp, #112	@ 0x70
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4652      	mov	r2, sl
 8006932:	465b      	mov	r3, fp
 8006934:	9805      	ldr	r0, [sp, #20]
 8006936:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800693a:	f002 f9bd 	bl	8008cb8 <__d2b>
 800693e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006940:	2800      	cmp	r0, #0
 8006942:	f43f aedc 	beq.w	80066fe <_strtod_l+0x436>
 8006946:	2101      	movs	r1, #1
 8006948:	9805      	ldr	r0, [sp, #20]
 800694a:	f001 ff19 	bl	8008780 <__i2b>
 800694e:	4680      	mov	r8, r0
 8006950:	b948      	cbnz	r0, 8006966 <_strtod_l+0x69e>
 8006952:	f04f 0800 	mov.w	r8, #0
 8006956:	e6d2      	b.n	80066fe <_strtod_l+0x436>
 8006958:	f04f 32ff 	mov.w	r2, #4294967295
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	ea03 0a0a 	and.w	sl, r3, sl
 8006964:	e7ae      	b.n	80068c4 <_strtod_l+0x5fc>
 8006966:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006968:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800696a:	2d00      	cmp	r5, #0
 800696c:	bfab      	itete	ge
 800696e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006970:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006972:	18ef      	addge	r7, r5, r3
 8006974:	1b5e      	sublt	r6, r3, r5
 8006976:	9b08      	ldr	r3, [sp, #32]
 8006978:	bfa8      	it	ge
 800697a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800697c:	eba5 0503 	sub.w	r5, r5, r3
 8006980:	4415      	add	r5, r2
 8006982:	4b67      	ldr	r3, [pc, #412]	@ (8006b20 <_strtod_l+0x858>)
 8006984:	f105 35ff 	add.w	r5, r5, #4294967295
 8006988:	bfb8      	it	lt
 800698a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800698c:	429d      	cmp	r5, r3
 800698e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006992:	da50      	bge.n	8006a36 <_strtod_l+0x76e>
 8006994:	1b5b      	subs	r3, r3, r5
 8006996:	2b1f      	cmp	r3, #31
 8006998:	f04f 0101 	mov.w	r1, #1
 800699c:	eba2 0203 	sub.w	r2, r2, r3
 80069a0:	dc3d      	bgt.n	8006a1e <_strtod_l+0x756>
 80069a2:	fa01 f303 	lsl.w	r3, r1, r3
 80069a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80069a8:	2300      	movs	r3, #0
 80069aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80069ac:	18bd      	adds	r5, r7, r2
 80069ae:	9b08      	ldr	r3, [sp, #32]
 80069b0:	42af      	cmp	r7, r5
 80069b2:	4416      	add	r6, r2
 80069b4:	441e      	add	r6, r3
 80069b6:	463b      	mov	r3, r7
 80069b8:	bfa8      	it	ge
 80069ba:	462b      	movge	r3, r5
 80069bc:	42b3      	cmp	r3, r6
 80069be:	bfa8      	it	ge
 80069c0:	4633      	movge	r3, r6
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bfc2      	ittt	gt
 80069c6:	1aed      	subgt	r5, r5, r3
 80069c8:	1af6      	subgt	r6, r6, r3
 80069ca:	1aff      	subgt	r7, r7, r3
 80069cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dd16      	ble.n	8006a00 <_strtod_l+0x738>
 80069d2:	4641      	mov	r1, r8
 80069d4:	461a      	mov	r2, r3
 80069d6:	9805      	ldr	r0, [sp, #20]
 80069d8:	f001 ff90 	bl	80088fc <__pow5mult>
 80069dc:	4680      	mov	r8, r0
 80069de:	2800      	cmp	r0, #0
 80069e0:	d0b7      	beq.n	8006952 <_strtod_l+0x68a>
 80069e2:	4601      	mov	r1, r0
 80069e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80069e6:	9805      	ldr	r0, [sp, #20]
 80069e8:	f001 fee0 	bl	80087ac <__multiply>
 80069ec:	900e      	str	r0, [sp, #56]	@ 0x38
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f43f ae85 	beq.w	80066fe <_strtod_l+0x436>
 80069f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069f6:	9805      	ldr	r0, [sp, #20]
 80069f8:	f001 fdc4 	bl	8008584 <_Bfree>
 80069fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a00:	2d00      	cmp	r5, #0
 8006a02:	dc1d      	bgt.n	8006a40 <_strtod_l+0x778>
 8006a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dd23      	ble.n	8006a52 <_strtod_l+0x78a>
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006a0e:	9805      	ldr	r0, [sp, #20]
 8006a10:	f001 ff74 	bl	80088fc <__pow5mult>
 8006a14:	4681      	mov	r9, r0
 8006a16:	b9e0      	cbnz	r0, 8006a52 <_strtod_l+0x78a>
 8006a18:	f04f 0900 	mov.w	r9, #0
 8006a1c:	e66f      	b.n	80066fe <_strtod_l+0x436>
 8006a1e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006a22:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006a26:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006a2a:	35e2      	adds	r5, #226	@ 0xe2
 8006a2c:	fa01 f305 	lsl.w	r3, r1, r5
 8006a30:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a32:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006a34:	e7ba      	b.n	80069ac <_strtod_l+0x6e4>
 8006a36:	2300      	movs	r3, #0
 8006a38:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a3e:	e7b5      	b.n	80069ac <_strtod_l+0x6e4>
 8006a40:	462a      	mov	r2, r5
 8006a42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a44:	9805      	ldr	r0, [sp, #20]
 8006a46:	f001 ffb3 	bl	80089b0 <__lshift>
 8006a4a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d1d9      	bne.n	8006a04 <_strtod_l+0x73c>
 8006a50:	e655      	b.n	80066fe <_strtod_l+0x436>
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	dd07      	ble.n	8006a66 <_strtod_l+0x79e>
 8006a56:	4649      	mov	r1, r9
 8006a58:	4632      	mov	r2, r6
 8006a5a:	9805      	ldr	r0, [sp, #20]
 8006a5c:	f001 ffa8 	bl	80089b0 <__lshift>
 8006a60:	4681      	mov	r9, r0
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d0d8      	beq.n	8006a18 <_strtod_l+0x750>
 8006a66:	2f00      	cmp	r7, #0
 8006a68:	dd08      	ble.n	8006a7c <_strtod_l+0x7b4>
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	463a      	mov	r2, r7
 8006a6e:	9805      	ldr	r0, [sp, #20]
 8006a70:	f001 ff9e 	bl	80089b0 <__lshift>
 8006a74:	4680      	mov	r8, r0
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f43f ae41 	beq.w	80066fe <_strtod_l+0x436>
 8006a7c:	464a      	mov	r2, r9
 8006a7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a80:	9805      	ldr	r0, [sp, #20]
 8006a82:	f002 f81d 	bl	8008ac0 <__mdiff>
 8006a86:	4604      	mov	r4, r0
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	f43f ae38 	beq.w	80066fe <_strtod_l+0x436>
 8006a8e:	68c3      	ldr	r3, [r0, #12]
 8006a90:	4641      	mov	r1, r8
 8006a92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a94:	2300      	movs	r3, #0
 8006a96:	60c3      	str	r3, [r0, #12]
 8006a98:	f001 fff6 	bl	8008a88 <__mcmp>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	da45      	bge.n	8006b2c <_strtod_l+0x864>
 8006aa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006aa2:	ea53 030a 	orrs.w	r3, r3, sl
 8006aa6:	d16b      	bne.n	8006b80 <_strtod_l+0x8b8>
 8006aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d167      	bne.n	8006b80 <_strtod_l+0x8b8>
 8006ab0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ab4:	0d1b      	lsrs	r3, r3, #20
 8006ab6:	051b      	lsls	r3, r3, #20
 8006ab8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006abc:	d960      	bls.n	8006b80 <_strtod_l+0x8b8>
 8006abe:	6963      	ldr	r3, [r4, #20]
 8006ac0:	b913      	cbnz	r3, 8006ac8 <_strtod_l+0x800>
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	dd5b      	ble.n	8006b80 <_strtod_l+0x8b8>
 8006ac8:	4621      	mov	r1, r4
 8006aca:	2201      	movs	r2, #1
 8006acc:	9805      	ldr	r0, [sp, #20]
 8006ace:	f001 ff6f 	bl	80089b0 <__lshift>
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	f001 ffd7 	bl	8008a88 <__mcmp>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	dd50      	ble.n	8006b80 <_strtod_l+0x8b8>
 8006ade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ae2:	9a08      	ldr	r2, [sp, #32]
 8006ae4:	0d1b      	lsrs	r3, r3, #20
 8006ae6:	051b      	lsls	r3, r3, #20
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	d06a      	beq.n	8006bc2 <_strtod_l+0x8fa>
 8006aec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006af0:	d867      	bhi.n	8006bc2 <_strtod_l+0x8fa>
 8006af2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006af6:	f67f ae98 	bls.w	800682a <_strtod_l+0x562>
 8006afa:	4650      	mov	r0, sl
 8006afc:	4659      	mov	r1, fp
 8006afe:	4b09      	ldr	r3, [pc, #36]	@ (8006b24 <_strtod_l+0x85c>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	4b08      	ldr	r3, [pc, #32]	@ (8006b28 <_strtod_l+0x860>)
 8006b08:	4682      	mov	sl, r0
 8006b0a:	400b      	ands	r3, r1
 8006b0c:	468b      	mov	fp, r1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f47f ae00 	bne.w	8006714 <_strtod_l+0x44c>
 8006b14:	2322      	movs	r3, #34	@ 0x22
 8006b16:	9a05      	ldr	r2, [sp, #20]
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e5fb      	b.n	8006714 <_strtod_l+0x44c>
 8006b1c:	08009678 	.word	0x08009678
 8006b20:	fffffc02 	.word	0xfffffc02
 8006b24:	39500000 	.word	0x39500000
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006b30:	d165      	bne.n	8006bfe <_strtod_l+0x936>
 8006b32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006b34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b38:	b35a      	cbz	r2, 8006b92 <_strtod_l+0x8ca>
 8006b3a:	4a99      	ldr	r2, [pc, #612]	@ (8006da0 <_strtod_l+0xad8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d12b      	bne.n	8006b98 <_strtod_l+0x8d0>
 8006b40:	9b08      	ldr	r3, [sp, #32]
 8006b42:	4651      	mov	r1, sl
 8006b44:	b303      	cbz	r3, 8006b88 <_strtod_l+0x8c0>
 8006b46:	465a      	mov	r2, fp
 8006b48:	4b96      	ldr	r3, [pc, #600]	@ (8006da4 <_strtod_l+0xadc>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295
 8006b54:	d81b      	bhi.n	8006b8e <_strtod_l+0x8c6>
 8006b56:	0d1b      	lsrs	r3, r3, #20
 8006b58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	4299      	cmp	r1, r3
 8006b62:	d119      	bne.n	8006b98 <_strtod_l+0x8d0>
 8006b64:	4b90      	ldr	r3, [pc, #576]	@ (8006da8 <_strtod_l+0xae0>)
 8006b66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d102      	bne.n	8006b72 <_strtod_l+0x8aa>
 8006b6c:	3101      	adds	r1, #1
 8006b6e:	f43f adc6 	beq.w	80066fe <_strtod_l+0x436>
 8006b72:	f04f 0a00 	mov.w	sl, #0
 8006b76:	4b8b      	ldr	r3, [pc, #556]	@ (8006da4 <_strtod_l+0xadc>)
 8006b78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006b80:	9b08      	ldr	r3, [sp, #32]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1b9      	bne.n	8006afa <_strtod_l+0x832>
 8006b86:	e5c5      	b.n	8006714 <_strtod_l+0x44c>
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8c:	e7e8      	b.n	8006b60 <_strtod_l+0x898>
 8006b8e:	4613      	mov	r3, r2
 8006b90:	e7e6      	b.n	8006b60 <_strtod_l+0x898>
 8006b92:	ea53 030a 	orrs.w	r3, r3, sl
 8006b96:	d0a2      	beq.n	8006ade <_strtod_l+0x816>
 8006b98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b9a:	b1db      	cbz	r3, 8006bd4 <_strtod_l+0x90c>
 8006b9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b9e:	4213      	tst	r3, r2
 8006ba0:	d0ee      	beq.n	8006b80 <_strtod_l+0x8b8>
 8006ba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	9a08      	ldr	r2, [sp, #32]
 8006baa:	b1bb      	cbz	r3, 8006bdc <_strtod_l+0x914>
 8006bac:	f7ff fb6a 	bl	8006284 <sulp>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bb8:	f7f9 fad8 	bl	800016c <__adddf3>
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	468b      	mov	fp, r1
 8006bc0:	e7de      	b.n	8006b80 <_strtod_l+0x8b8>
 8006bc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006bc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006bca:	f04f 3aff 	mov.w	sl, #4294967295
 8006bce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006bd2:	e7d5      	b.n	8006b80 <_strtod_l+0x8b8>
 8006bd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006bd6:	ea13 0f0a 	tst.w	r3, sl
 8006bda:	e7e1      	b.n	8006ba0 <_strtod_l+0x8d8>
 8006bdc:	f7ff fb52 	bl	8006284 <sulp>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006be8:	f7f9 fabe 	bl	8000168 <__aeabi_dsub>
 8006bec:	2200      	movs	r2, #0
 8006bee:	2300      	movs	r3, #0
 8006bf0:	4682      	mov	sl, r0
 8006bf2:	468b      	mov	fp, r1
 8006bf4:	f7f9 fed8 	bl	80009a8 <__aeabi_dcmpeq>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d0c1      	beq.n	8006b80 <_strtod_l+0x8b8>
 8006bfc:	e615      	b.n	800682a <_strtod_l+0x562>
 8006bfe:	4641      	mov	r1, r8
 8006c00:	4620      	mov	r0, r4
 8006c02:	f002 f8b1 	bl	8008d68 <__ratio>
 8006c06:	2200      	movs	r2, #0
 8006c08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	460f      	mov	r7, r1
 8006c10:	f7f9 fede 	bl	80009d0 <__aeabi_dcmple>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d06d      	beq.n	8006cf4 <_strtod_l+0xa2c>
 8006c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d178      	bne.n	8006d10 <_strtod_l+0xa48>
 8006c1e:	f1ba 0f00 	cmp.w	sl, #0
 8006c22:	d156      	bne.n	8006cd2 <_strtod_l+0xa0a>
 8006c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d158      	bne.n	8006ce0 <_strtod_l+0xa18>
 8006c2e:	2200      	movs	r2, #0
 8006c30:	4630      	mov	r0, r6
 8006c32:	4639      	mov	r1, r7
 8006c34:	4b5d      	ldr	r3, [pc, #372]	@ (8006dac <_strtod_l+0xae4>)
 8006c36:	f7f9 fec1 	bl	80009bc <__aeabi_dcmplt>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d157      	bne.n	8006cee <_strtod_l+0xa26>
 8006c3e:	4630      	mov	r0, r6
 8006c40:	4639      	mov	r1, r7
 8006c42:	2200      	movs	r2, #0
 8006c44:	4b5a      	ldr	r3, [pc, #360]	@ (8006db0 <_strtod_l+0xae8>)
 8006c46:	f7f9 fc47 	bl	80004d8 <__aeabi_dmul>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	460f      	mov	r7, r1
 8006c4e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006c52:	9606      	str	r6, [sp, #24]
 8006c54:	9307      	str	r3, [sp, #28]
 8006c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c5a:	4d52      	ldr	r5, [pc, #328]	@ (8006da4 <_strtod_l+0xadc>)
 8006c5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006c60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c62:	401d      	ands	r5, r3
 8006c64:	4b53      	ldr	r3, [pc, #332]	@ (8006db4 <_strtod_l+0xaec>)
 8006c66:	429d      	cmp	r5, r3
 8006c68:	f040 80aa 	bne.w	8006dc0 <_strtod_l+0xaf8>
 8006c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c6e:	4650      	mov	r0, sl
 8006c70:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006c74:	4659      	mov	r1, fp
 8006c76:	f001 ffb7 	bl	8008be8 <__ulp>
 8006c7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c7e:	f7f9 fc2b 	bl	80004d8 <__aeabi_dmul>
 8006c82:	4652      	mov	r2, sl
 8006c84:	465b      	mov	r3, fp
 8006c86:	f7f9 fa71 	bl	800016c <__adddf3>
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4945      	ldr	r1, [pc, #276]	@ (8006da4 <_strtod_l+0xadc>)
 8006c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8006db8 <_strtod_l+0xaf0>)
 8006c90:	4019      	ands	r1, r3
 8006c92:	4291      	cmp	r1, r2
 8006c94:	4682      	mov	sl, r0
 8006c96:	d942      	bls.n	8006d1e <_strtod_l+0xa56>
 8006c98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c9a:	4b43      	ldr	r3, [pc, #268]	@ (8006da8 <_strtod_l+0xae0>)
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d103      	bne.n	8006ca8 <_strtod_l+0x9e0>
 8006ca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	f43f ad2b 	beq.w	80066fe <_strtod_l+0x436>
 8006ca8:	f04f 3aff 	mov.w	sl, #4294967295
 8006cac:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006da8 <_strtod_l+0xae0>
 8006cb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cb2:	9805      	ldr	r0, [sp, #20]
 8006cb4:	f001 fc66 	bl	8008584 <_Bfree>
 8006cb8:	4649      	mov	r1, r9
 8006cba:	9805      	ldr	r0, [sp, #20]
 8006cbc:	f001 fc62 	bl	8008584 <_Bfree>
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	9805      	ldr	r0, [sp, #20]
 8006cc4:	f001 fc5e 	bl	8008584 <_Bfree>
 8006cc8:	4621      	mov	r1, r4
 8006cca:	9805      	ldr	r0, [sp, #20]
 8006ccc:	f001 fc5a 	bl	8008584 <_Bfree>
 8006cd0:	e618      	b.n	8006904 <_strtod_l+0x63c>
 8006cd2:	f1ba 0f01 	cmp.w	sl, #1
 8006cd6:	d103      	bne.n	8006ce0 <_strtod_l+0xa18>
 8006cd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f43f ada5 	beq.w	800682a <_strtod_l+0x562>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4b36      	ldr	r3, [pc, #216]	@ (8006dbc <_strtod_l+0xaf4>)
 8006ce4:	2600      	movs	r6, #0
 8006ce6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cea:	4f30      	ldr	r7, [pc, #192]	@ (8006dac <_strtod_l+0xae4>)
 8006cec:	e7b3      	b.n	8006c56 <_strtod_l+0x98e>
 8006cee:	2600      	movs	r6, #0
 8006cf0:	4f2f      	ldr	r7, [pc, #188]	@ (8006db0 <_strtod_l+0xae8>)
 8006cf2:	e7ac      	b.n	8006c4e <_strtod_l+0x986>
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8006db0 <_strtod_l+0xae8>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f7f9 fbec 	bl	80004d8 <__aeabi_dmul>
 8006d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d02:	4606      	mov	r6, r0
 8006d04:	460f      	mov	r7, r1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0a1      	beq.n	8006c4e <_strtod_l+0x986>
 8006d0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006d0e:	e7a2      	b.n	8006c56 <_strtod_l+0x98e>
 8006d10:	2200      	movs	r2, #0
 8006d12:	4b26      	ldr	r3, [pc, #152]	@ (8006dac <_strtod_l+0xae4>)
 8006d14:	4616      	mov	r6, r2
 8006d16:	461f      	mov	r7, r3
 8006d18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d1c:	e79b      	b.n	8006c56 <_strtod_l+0x98e>
 8006d1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006d22:	9b08      	ldr	r3, [sp, #32]
 8006d24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1c1      	bne.n	8006cb0 <_strtod_l+0x9e8>
 8006d2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d30:	0d1b      	lsrs	r3, r3, #20
 8006d32:	051b      	lsls	r3, r3, #20
 8006d34:	429d      	cmp	r5, r3
 8006d36:	d1bb      	bne.n	8006cb0 <_strtod_l+0x9e8>
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	f7fa f9c0 	bl	80010c0 <__aeabi_d2lz>
 8006d40:	f7f9 fb9c 	bl	800047c <__aeabi_l2d>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4630      	mov	r0, r6
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	f7f9 fa0c 	bl	8000168 <__aeabi_dsub>
 8006d50:	460b      	mov	r3, r1
 8006d52:	4602      	mov	r2, r0
 8006d54:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006d58:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d5e:	ea46 060a 	orr.w	r6, r6, sl
 8006d62:	431e      	orrs	r6, r3
 8006d64:	d069      	beq.n	8006e3a <_strtod_l+0xb72>
 8006d66:	a30a      	add	r3, pc, #40	@ (adr r3, 8006d90 <_strtod_l+0xac8>)
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f7f9 fe26 	bl	80009bc <__aeabi_dcmplt>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	f47f accf 	bne.w	8006714 <_strtod_l+0x44c>
 8006d76:	a308      	add	r3, pc, #32	@ (adr r3, 8006d98 <_strtod_l+0xad0>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d80:	f7f9 fe3a 	bl	80009f8 <__aeabi_dcmpgt>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d093      	beq.n	8006cb0 <_strtod_l+0x9e8>
 8006d88:	e4c4      	b.n	8006714 <_strtod_l+0x44c>
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w
 8006d90:	94a03595 	.word	0x94a03595
 8006d94:	3fdfffff 	.word	0x3fdfffff
 8006d98:	35afe535 	.word	0x35afe535
 8006d9c:	3fe00000 	.word	0x3fe00000
 8006da0:	000fffff 	.word	0x000fffff
 8006da4:	7ff00000 	.word	0x7ff00000
 8006da8:	7fefffff 	.word	0x7fefffff
 8006dac:	3ff00000 	.word	0x3ff00000
 8006db0:	3fe00000 	.word	0x3fe00000
 8006db4:	7fe00000 	.word	0x7fe00000
 8006db8:	7c9fffff 	.word	0x7c9fffff
 8006dbc:	bff00000 	.word	0xbff00000
 8006dc0:	9b08      	ldr	r3, [sp, #32]
 8006dc2:	b323      	cbz	r3, 8006e0e <_strtod_l+0xb46>
 8006dc4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006dc8:	d821      	bhi.n	8006e0e <_strtod_l+0xb46>
 8006dca:	a327      	add	r3, pc, #156	@ (adr r3, 8006e68 <_strtod_l+0xba0>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	f7f9 fdfc 	bl	80009d0 <__aeabi_dcmple>
 8006dd8:	b1a0      	cbz	r0, 8006e04 <_strtod_l+0xb3c>
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7f9 fe2b 	bl	8000a38 <__aeabi_d2uiz>
 8006de2:	2801      	cmp	r0, #1
 8006de4:	bf38      	it	cc
 8006de6:	2001      	movcc	r0, #1
 8006de8:	f7f9 fafc 	bl	80003e4 <__aeabi_ui2d>
 8006dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dee:	4606      	mov	r6, r0
 8006df0:	460f      	mov	r7, r1
 8006df2:	b9fb      	cbnz	r3, 8006e34 <_strtod_l+0xb6c>
 8006df4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006df8:	9014      	str	r0, [sp, #80]	@ 0x50
 8006dfa:	9315      	str	r3, [sp, #84]	@ 0x54
 8006dfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006e00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e06:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006e0a:	1b5b      	subs	r3, r3, r5
 8006e0c:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e12:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006e16:	f001 fee7 	bl	8008be8 <__ulp>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4650      	mov	r0, sl
 8006e20:	4659      	mov	r1, fp
 8006e22:	f7f9 fb59 	bl	80004d8 <__aeabi_dmul>
 8006e26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006e2a:	f7f9 f99f 	bl	800016c <__adddf3>
 8006e2e:	4682      	mov	sl, r0
 8006e30:	468b      	mov	fp, r1
 8006e32:	e776      	b.n	8006d22 <_strtod_l+0xa5a>
 8006e34:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006e38:	e7e0      	b.n	8006dfc <_strtod_l+0xb34>
 8006e3a:	a30d      	add	r3, pc, #52	@ (adr r3, 8006e70 <_strtod_l+0xba8>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fdbc 	bl	80009bc <__aeabi_dcmplt>
 8006e44:	e79e      	b.n	8006d84 <_strtod_l+0xabc>
 8006e46:	2300      	movs	r3, #0
 8006e48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e4c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	f7ff ba77 	b.w	8006342 <_strtod_l+0x7a>
 8006e54:	2a65      	cmp	r2, #101	@ 0x65
 8006e56:	f43f ab6e 	beq.w	8006536 <_strtod_l+0x26e>
 8006e5a:	2a45      	cmp	r2, #69	@ 0x45
 8006e5c:	f43f ab6b 	beq.w	8006536 <_strtod_l+0x26e>
 8006e60:	2301      	movs	r3, #1
 8006e62:	f7ff bba6 	b.w	80065b2 <_strtod_l+0x2ea>
 8006e66:	bf00      	nop
 8006e68:	ffc00000 	.word	0xffc00000
 8006e6c:	41dfffff 	.word	0x41dfffff
 8006e70:	94a03595 	.word	0x94a03595
 8006e74:	3fcfffff 	.word	0x3fcfffff

08006e78 <_strtod_r>:
 8006e78:	4b01      	ldr	r3, [pc, #4]	@ (8006e80 <_strtod_r+0x8>)
 8006e7a:	f7ff ba25 	b.w	80062c8 <_strtod_l>
 8006e7e:	bf00      	nop
 8006e80:	20000078 	.word	0x20000078

08006e84 <_strtol_l.constprop.0>:
 8006e84:	2b24      	cmp	r3, #36	@ 0x24
 8006e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e8a:	4686      	mov	lr, r0
 8006e8c:	4690      	mov	r8, r2
 8006e8e:	d801      	bhi.n	8006e94 <_strtol_l.constprop.0+0x10>
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d106      	bne.n	8006ea2 <_strtol_l.constprop.0+0x1e>
 8006e94:	f7ff f8ce 	bl	8006034 <__errno>
 8006e98:	2316      	movs	r3, #22
 8006e9a:	6003      	str	r3, [r0, #0]
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	460d      	mov	r5, r1
 8006ea4:	4833      	ldr	r0, [pc, #204]	@ (8006f74 <_strtol_l.constprop.0+0xf0>)
 8006ea6:	462a      	mov	r2, r5
 8006ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006eac:	5d06      	ldrb	r6, [r0, r4]
 8006eae:	f016 0608 	ands.w	r6, r6, #8
 8006eb2:	d1f8      	bne.n	8006ea6 <_strtol_l.constprop.0+0x22>
 8006eb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8006eb6:	d12d      	bne.n	8006f14 <_strtol_l.constprop.0+0x90>
 8006eb8:	2601      	movs	r6, #1
 8006eba:	782c      	ldrb	r4, [r5, #0]
 8006ebc:	1c95      	adds	r5, r2, #2
 8006ebe:	f033 0210 	bics.w	r2, r3, #16
 8006ec2:	d109      	bne.n	8006ed8 <_strtol_l.constprop.0+0x54>
 8006ec4:	2c30      	cmp	r4, #48	@ 0x30
 8006ec6:	d12a      	bne.n	8006f1e <_strtol_l.constprop.0+0x9a>
 8006ec8:	782a      	ldrb	r2, [r5, #0]
 8006eca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ece:	2a58      	cmp	r2, #88	@ 0x58
 8006ed0:	d125      	bne.n	8006f1e <_strtol_l.constprop.0+0x9a>
 8006ed2:	2310      	movs	r3, #16
 8006ed4:	786c      	ldrb	r4, [r5, #1]
 8006ed6:	3502      	adds	r5, #2
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006ede:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006ee2:	fbbc f9f3 	udiv	r9, ip, r3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	fb03 ca19 	mls	sl, r3, r9, ip
 8006eec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006ef0:	2f09      	cmp	r7, #9
 8006ef2:	d81b      	bhi.n	8006f2c <_strtol_l.constprop.0+0xa8>
 8006ef4:	463c      	mov	r4, r7
 8006ef6:	42a3      	cmp	r3, r4
 8006ef8:	dd27      	ble.n	8006f4a <_strtol_l.constprop.0+0xc6>
 8006efa:	1c57      	adds	r7, r2, #1
 8006efc:	d007      	beq.n	8006f0e <_strtol_l.constprop.0+0x8a>
 8006efe:	4581      	cmp	r9, r0
 8006f00:	d320      	bcc.n	8006f44 <_strtol_l.constprop.0+0xc0>
 8006f02:	d101      	bne.n	8006f08 <_strtol_l.constprop.0+0x84>
 8006f04:	45a2      	cmp	sl, r4
 8006f06:	db1d      	blt.n	8006f44 <_strtol_l.constprop.0+0xc0>
 8006f08:	2201      	movs	r2, #1
 8006f0a:	fb00 4003 	mla	r0, r0, r3, r4
 8006f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f12:	e7eb      	b.n	8006eec <_strtol_l.constprop.0+0x68>
 8006f14:	2c2b      	cmp	r4, #43	@ 0x2b
 8006f16:	bf04      	itt	eq
 8006f18:	782c      	ldrbeq	r4, [r5, #0]
 8006f1a:	1c95      	addeq	r5, r2, #2
 8006f1c:	e7cf      	b.n	8006ebe <_strtol_l.constprop.0+0x3a>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1da      	bne.n	8006ed8 <_strtol_l.constprop.0+0x54>
 8006f22:	2c30      	cmp	r4, #48	@ 0x30
 8006f24:	bf0c      	ite	eq
 8006f26:	2308      	moveq	r3, #8
 8006f28:	230a      	movne	r3, #10
 8006f2a:	e7d5      	b.n	8006ed8 <_strtol_l.constprop.0+0x54>
 8006f2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006f30:	2f19      	cmp	r7, #25
 8006f32:	d801      	bhi.n	8006f38 <_strtol_l.constprop.0+0xb4>
 8006f34:	3c37      	subs	r4, #55	@ 0x37
 8006f36:	e7de      	b.n	8006ef6 <_strtol_l.constprop.0+0x72>
 8006f38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006f3c:	2f19      	cmp	r7, #25
 8006f3e:	d804      	bhi.n	8006f4a <_strtol_l.constprop.0+0xc6>
 8006f40:	3c57      	subs	r4, #87	@ 0x57
 8006f42:	e7d8      	b.n	8006ef6 <_strtol_l.constprop.0+0x72>
 8006f44:	f04f 32ff 	mov.w	r2, #4294967295
 8006f48:	e7e1      	b.n	8006f0e <_strtol_l.constprop.0+0x8a>
 8006f4a:	1c53      	adds	r3, r2, #1
 8006f4c:	d108      	bne.n	8006f60 <_strtol_l.constprop.0+0xdc>
 8006f4e:	2322      	movs	r3, #34	@ 0x22
 8006f50:	4660      	mov	r0, ip
 8006f52:	f8ce 3000 	str.w	r3, [lr]
 8006f56:	f1b8 0f00 	cmp.w	r8, #0
 8006f5a:	d0a0      	beq.n	8006e9e <_strtol_l.constprop.0+0x1a>
 8006f5c:	1e69      	subs	r1, r5, #1
 8006f5e:	e006      	b.n	8006f6e <_strtol_l.constprop.0+0xea>
 8006f60:	b106      	cbz	r6, 8006f64 <_strtol_l.constprop.0+0xe0>
 8006f62:	4240      	negs	r0, r0
 8006f64:	f1b8 0f00 	cmp.w	r8, #0
 8006f68:	d099      	beq.n	8006e9e <_strtol_l.constprop.0+0x1a>
 8006f6a:	2a00      	cmp	r2, #0
 8006f6c:	d1f6      	bne.n	8006f5c <_strtol_l.constprop.0+0xd8>
 8006f6e:	f8c8 1000 	str.w	r1, [r8]
 8006f72:	e794      	b.n	8006e9e <_strtol_l.constprop.0+0x1a>
 8006f74:	080096a1 	.word	0x080096a1

08006f78 <_strtol_r>:
 8006f78:	f7ff bf84 	b.w	8006e84 <_strtol_l.constprop.0>

08006f7c <__ssputs_r>:
 8006f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	461f      	mov	r7, r3
 8006f82:	688e      	ldr	r6, [r1, #8]
 8006f84:	4682      	mov	sl, r0
 8006f86:	42be      	cmp	r6, r7
 8006f88:	460c      	mov	r4, r1
 8006f8a:	4690      	mov	r8, r2
 8006f8c:	680b      	ldr	r3, [r1, #0]
 8006f8e:	d82d      	bhi.n	8006fec <__ssputs_r+0x70>
 8006f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f98:	d026      	beq.n	8006fe8 <__ssputs_r+0x6c>
 8006f9a:	6965      	ldr	r5, [r4, #20]
 8006f9c:	6909      	ldr	r1, [r1, #16]
 8006f9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fa2:	eba3 0901 	sub.w	r9, r3, r1
 8006fa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006faa:	1c7b      	adds	r3, r7, #1
 8006fac:	444b      	add	r3, r9
 8006fae:	106d      	asrs	r5, r5, #1
 8006fb0:	429d      	cmp	r5, r3
 8006fb2:	bf38      	it	cc
 8006fb4:	461d      	movcc	r5, r3
 8006fb6:	0553      	lsls	r3, r2, #21
 8006fb8:	d527      	bpl.n	800700a <__ssputs_r+0x8e>
 8006fba:	4629      	mov	r1, r5
 8006fbc:	f7ff f8d6 	bl	800616c <_malloc_r>
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	b360      	cbz	r0, 800701e <__ssputs_r+0xa2>
 8006fc4:	464a      	mov	r2, r9
 8006fc6:	6921      	ldr	r1, [r4, #16]
 8006fc8:	f000 ff3c 	bl	8007e44 <memcpy>
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	6126      	str	r6, [r4, #16]
 8006fda:	444e      	add	r6, r9
 8006fdc:	6026      	str	r6, [r4, #0]
 8006fde:	463e      	mov	r6, r7
 8006fe0:	6165      	str	r5, [r4, #20]
 8006fe2:	eba5 0509 	sub.w	r5, r5, r9
 8006fe6:	60a5      	str	r5, [r4, #8]
 8006fe8:	42be      	cmp	r6, r7
 8006fea:	d900      	bls.n	8006fee <__ssputs_r+0x72>
 8006fec:	463e      	mov	r6, r7
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	6820      	ldr	r0, [r4, #0]
 8006ff4:	f000 fedb 	bl	8007dae <memmove>
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	1b9b      	subs	r3, r3, r6
 8006ffe:	60a3      	str	r3, [r4, #8]
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	4433      	add	r3, r6
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700a:	462a      	mov	r2, r5
 800700c:	f001 ff20 	bl	8008e50 <_realloc_r>
 8007010:	4606      	mov	r6, r0
 8007012:	2800      	cmp	r0, #0
 8007014:	d1e0      	bne.n	8006fd8 <__ssputs_r+0x5c>
 8007016:	4650      	mov	r0, sl
 8007018:	6921      	ldr	r1, [r4, #16]
 800701a:	f7ff f83d 	bl	8006098 <_free_r>
 800701e:	230c      	movs	r3, #12
 8007020:	f8ca 3000 	str.w	r3, [sl]
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f04f 30ff 	mov.w	r0, #4294967295
 800702a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	e7e9      	b.n	8007006 <__ssputs_r+0x8a>
	...

08007034 <_svfiprintf_r>:
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	4698      	mov	r8, r3
 800703a:	898b      	ldrh	r3, [r1, #12]
 800703c:	4607      	mov	r7, r0
 800703e:	061b      	lsls	r3, r3, #24
 8007040:	460d      	mov	r5, r1
 8007042:	4614      	mov	r4, r2
 8007044:	b09d      	sub	sp, #116	@ 0x74
 8007046:	d510      	bpl.n	800706a <_svfiprintf_r+0x36>
 8007048:	690b      	ldr	r3, [r1, #16]
 800704a:	b973      	cbnz	r3, 800706a <_svfiprintf_r+0x36>
 800704c:	2140      	movs	r1, #64	@ 0x40
 800704e:	f7ff f88d 	bl	800616c <_malloc_r>
 8007052:	6028      	str	r0, [r5, #0]
 8007054:	6128      	str	r0, [r5, #16]
 8007056:	b930      	cbnz	r0, 8007066 <_svfiprintf_r+0x32>
 8007058:	230c      	movs	r3, #12
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	b01d      	add	sp, #116	@ 0x74
 8007062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007066:	2340      	movs	r3, #64	@ 0x40
 8007068:	616b      	str	r3, [r5, #20]
 800706a:	2300      	movs	r3, #0
 800706c:	9309      	str	r3, [sp, #36]	@ 0x24
 800706e:	2320      	movs	r3, #32
 8007070:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007074:	2330      	movs	r3, #48	@ 0x30
 8007076:	f04f 0901 	mov.w	r9, #1
 800707a:	f8cd 800c 	str.w	r8, [sp, #12]
 800707e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007218 <_svfiprintf_r+0x1e4>
 8007082:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007086:	4623      	mov	r3, r4
 8007088:	469a      	mov	sl, r3
 800708a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708e:	b10a      	cbz	r2, 8007094 <_svfiprintf_r+0x60>
 8007090:	2a25      	cmp	r2, #37	@ 0x25
 8007092:	d1f9      	bne.n	8007088 <_svfiprintf_r+0x54>
 8007094:	ebba 0b04 	subs.w	fp, sl, r4
 8007098:	d00b      	beq.n	80070b2 <_svfiprintf_r+0x7e>
 800709a:	465b      	mov	r3, fp
 800709c:	4622      	mov	r2, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ff6b 	bl	8006f7c <__ssputs_r>
 80070a6:	3001      	adds	r0, #1
 80070a8:	f000 80a7 	beq.w	80071fa <_svfiprintf_r+0x1c6>
 80070ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070ae:	445a      	add	r2, fp
 80070b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80070b2:	f89a 3000 	ldrb.w	r3, [sl]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 809f 	beq.w	80071fa <_svfiprintf_r+0x1c6>
 80070bc:	2300      	movs	r3, #0
 80070be:	f04f 32ff 	mov.w	r2, #4294967295
 80070c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c6:	f10a 0a01 	add.w	sl, sl, #1
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80070d4:	4654      	mov	r4, sl
 80070d6:	2205      	movs	r2, #5
 80070d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070dc:	484e      	ldr	r0, [pc, #312]	@ (8007218 <_svfiprintf_r+0x1e4>)
 80070de:	f000 fea3 	bl	8007e28 <memchr>
 80070e2:	9a04      	ldr	r2, [sp, #16]
 80070e4:	b9d8      	cbnz	r0, 800711e <_svfiprintf_r+0xea>
 80070e6:	06d0      	lsls	r0, r2, #27
 80070e8:	bf44      	itt	mi
 80070ea:	2320      	movmi	r3, #32
 80070ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070f0:	0711      	lsls	r1, r2, #28
 80070f2:	bf44      	itt	mi
 80070f4:	232b      	movmi	r3, #43	@ 0x2b
 80070f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070fa:	f89a 3000 	ldrb.w	r3, [sl]
 80070fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007100:	d015      	beq.n	800712e <_svfiprintf_r+0xfa>
 8007102:	4654      	mov	r4, sl
 8007104:	2000      	movs	r0, #0
 8007106:	f04f 0c0a 	mov.w	ip, #10
 800710a:	9a07      	ldr	r2, [sp, #28]
 800710c:	4621      	mov	r1, r4
 800710e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007112:	3b30      	subs	r3, #48	@ 0x30
 8007114:	2b09      	cmp	r3, #9
 8007116:	d94b      	bls.n	80071b0 <_svfiprintf_r+0x17c>
 8007118:	b1b0      	cbz	r0, 8007148 <_svfiprintf_r+0x114>
 800711a:	9207      	str	r2, [sp, #28]
 800711c:	e014      	b.n	8007148 <_svfiprintf_r+0x114>
 800711e:	eba0 0308 	sub.w	r3, r0, r8
 8007122:	fa09 f303 	lsl.w	r3, r9, r3
 8007126:	4313      	orrs	r3, r2
 8007128:	46a2      	mov	sl, r4
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	e7d2      	b.n	80070d4 <_svfiprintf_r+0xa0>
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	1d19      	adds	r1, r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	9103      	str	r1, [sp, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfbb      	ittet	lt
 800713a:	425b      	neglt	r3, r3
 800713c:	f042 0202 	orrlt.w	r2, r2, #2
 8007140:	9307      	strge	r3, [sp, #28]
 8007142:	9307      	strlt	r3, [sp, #28]
 8007144:	bfb8      	it	lt
 8007146:	9204      	strlt	r2, [sp, #16]
 8007148:	7823      	ldrb	r3, [r4, #0]
 800714a:	2b2e      	cmp	r3, #46	@ 0x2e
 800714c:	d10a      	bne.n	8007164 <_svfiprintf_r+0x130>
 800714e:	7863      	ldrb	r3, [r4, #1]
 8007150:	2b2a      	cmp	r3, #42	@ 0x2a
 8007152:	d132      	bne.n	80071ba <_svfiprintf_r+0x186>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	3402      	adds	r4, #2
 8007158:	1d1a      	adds	r2, r3, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	9203      	str	r2, [sp, #12]
 800715e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007162:	9305      	str	r3, [sp, #20]
 8007164:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800721c <_svfiprintf_r+0x1e8>
 8007168:	2203      	movs	r2, #3
 800716a:	4650      	mov	r0, sl
 800716c:	7821      	ldrb	r1, [r4, #0]
 800716e:	f000 fe5b 	bl	8007e28 <memchr>
 8007172:	b138      	cbz	r0, 8007184 <_svfiprintf_r+0x150>
 8007174:	2240      	movs	r2, #64	@ 0x40
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	eba0 000a 	sub.w	r0, r0, sl
 800717c:	4082      	lsls	r2, r0
 800717e:	4313      	orrs	r3, r2
 8007180:	3401      	adds	r4, #1
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007188:	2206      	movs	r2, #6
 800718a:	4825      	ldr	r0, [pc, #148]	@ (8007220 <_svfiprintf_r+0x1ec>)
 800718c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007190:	f000 fe4a 	bl	8007e28 <memchr>
 8007194:	2800      	cmp	r0, #0
 8007196:	d036      	beq.n	8007206 <_svfiprintf_r+0x1d2>
 8007198:	4b22      	ldr	r3, [pc, #136]	@ (8007224 <_svfiprintf_r+0x1f0>)
 800719a:	bb1b      	cbnz	r3, 80071e4 <_svfiprintf_r+0x1b0>
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	3307      	adds	r3, #7
 80071a0:	f023 0307 	bic.w	r3, r3, #7
 80071a4:	3308      	adds	r3, #8
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071aa:	4433      	add	r3, r6
 80071ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ae:	e76a      	b.n	8007086 <_svfiprintf_r+0x52>
 80071b0:	460c      	mov	r4, r1
 80071b2:	2001      	movs	r0, #1
 80071b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b8:	e7a8      	b.n	800710c <_svfiprintf_r+0xd8>
 80071ba:	2300      	movs	r3, #0
 80071bc:	f04f 0c0a 	mov.w	ip, #10
 80071c0:	4619      	mov	r1, r3
 80071c2:	3401      	adds	r4, #1
 80071c4:	9305      	str	r3, [sp, #20]
 80071c6:	4620      	mov	r0, r4
 80071c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071cc:	3a30      	subs	r2, #48	@ 0x30
 80071ce:	2a09      	cmp	r2, #9
 80071d0:	d903      	bls.n	80071da <_svfiprintf_r+0x1a6>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0c6      	beq.n	8007164 <_svfiprintf_r+0x130>
 80071d6:	9105      	str	r1, [sp, #20]
 80071d8:	e7c4      	b.n	8007164 <_svfiprintf_r+0x130>
 80071da:	4604      	mov	r4, r0
 80071dc:	2301      	movs	r3, #1
 80071de:	fb0c 2101 	mla	r1, ip, r1, r2
 80071e2:	e7f0      	b.n	80071c6 <_svfiprintf_r+0x192>
 80071e4:	ab03      	add	r3, sp, #12
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	462a      	mov	r2, r5
 80071ea:	4638      	mov	r0, r7
 80071ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007228 <_svfiprintf_r+0x1f4>)
 80071ee:	a904      	add	r1, sp, #16
 80071f0:	f3af 8000 	nop.w
 80071f4:	1c42      	adds	r2, r0, #1
 80071f6:	4606      	mov	r6, r0
 80071f8:	d1d6      	bne.n	80071a8 <_svfiprintf_r+0x174>
 80071fa:	89ab      	ldrh	r3, [r5, #12]
 80071fc:	065b      	lsls	r3, r3, #25
 80071fe:	f53f af2d 	bmi.w	800705c <_svfiprintf_r+0x28>
 8007202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007204:	e72c      	b.n	8007060 <_svfiprintf_r+0x2c>
 8007206:	ab03      	add	r3, sp, #12
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	462a      	mov	r2, r5
 800720c:	4638      	mov	r0, r7
 800720e:	4b06      	ldr	r3, [pc, #24]	@ (8007228 <_svfiprintf_r+0x1f4>)
 8007210:	a904      	add	r1, sp, #16
 8007212:	f000 fa47 	bl	80076a4 <_printf_i>
 8007216:	e7ed      	b.n	80071f4 <_svfiprintf_r+0x1c0>
 8007218:	080097a1 	.word	0x080097a1
 800721c:	080097a7 	.word	0x080097a7
 8007220:	080097ab 	.word	0x080097ab
 8007224:	00000000 	.word	0x00000000
 8007228:	08006f7d 	.word	0x08006f7d

0800722c <_sungetc_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	1c4b      	adds	r3, r1, #1
 8007230:	4614      	mov	r4, r2
 8007232:	d103      	bne.n	800723c <_sungetc_r+0x10>
 8007234:	f04f 35ff 	mov.w	r5, #4294967295
 8007238:	4628      	mov	r0, r5
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	8993      	ldrh	r3, [r2, #12]
 800723e:	b2cd      	uxtb	r5, r1
 8007240:	f023 0320 	bic.w	r3, r3, #32
 8007244:	8193      	strh	r3, [r2, #12]
 8007246:	6853      	ldr	r3, [r2, #4]
 8007248:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800724a:	b18a      	cbz	r2, 8007270 <_sungetc_r+0x44>
 800724c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800724e:	429a      	cmp	r2, r3
 8007250:	dd08      	ble.n	8007264 <_sungetc_r+0x38>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	6022      	str	r2, [r4, #0]
 8007258:	f803 5c01 	strb.w	r5, [r3, #-1]
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	3301      	adds	r3, #1
 8007260:	6063      	str	r3, [r4, #4]
 8007262:	e7e9      	b.n	8007238 <_sungetc_r+0xc>
 8007264:	4621      	mov	r1, r4
 8007266:	f000 fd6a 	bl	8007d3e <__submore>
 800726a:	2800      	cmp	r0, #0
 800726c:	d0f1      	beq.n	8007252 <_sungetc_r+0x26>
 800726e:	e7e1      	b.n	8007234 <_sungetc_r+0x8>
 8007270:	6921      	ldr	r1, [r4, #16]
 8007272:	6822      	ldr	r2, [r4, #0]
 8007274:	b141      	cbz	r1, 8007288 <_sungetc_r+0x5c>
 8007276:	4291      	cmp	r1, r2
 8007278:	d206      	bcs.n	8007288 <_sungetc_r+0x5c>
 800727a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800727e:	42a9      	cmp	r1, r5
 8007280:	d102      	bne.n	8007288 <_sungetc_r+0x5c>
 8007282:	3a01      	subs	r2, #1
 8007284:	6022      	str	r2, [r4, #0]
 8007286:	e7ea      	b.n	800725e <_sungetc_r+0x32>
 8007288:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800728c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007290:	6363      	str	r3, [r4, #52]	@ 0x34
 8007292:	2303      	movs	r3, #3
 8007294:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007296:	4623      	mov	r3, r4
 8007298:	f803 5f46 	strb.w	r5, [r3, #70]!
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	2301      	movs	r3, #1
 80072a0:	e7de      	b.n	8007260 <_sungetc_r+0x34>

080072a2 <__ssrefill_r>:
 80072a2:	b510      	push	{r4, lr}
 80072a4:	460c      	mov	r4, r1
 80072a6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80072a8:	b169      	cbz	r1, 80072c6 <__ssrefill_r+0x24>
 80072aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072ae:	4299      	cmp	r1, r3
 80072b0:	d001      	beq.n	80072b6 <__ssrefill_r+0x14>
 80072b2:	f7fe fef1 	bl	8006098 <_free_r>
 80072b6:	2000      	movs	r0, #0
 80072b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072ba:	6360      	str	r0, [r4, #52]	@ 0x34
 80072bc:	6063      	str	r3, [r4, #4]
 80072be:	b113      	cbz	r3, 80072c6 <__ssrefill_r+0x24>
 80072c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	bd10      	pop	{r4, pc}
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	6063      	str	r3, [r4, #4]
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	f043 0320 	orr.w	r3, r3, #32
 80072d8:	81a3      	strh	r3, [r4, #12]
 80072da:	e7f3      	b.n	80072c4 <__ssrefill_r+0x22>

080072dc <__ssvfiscanf_r>:
 80072dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	460c      	mov	r4, r1
 80072e2:	2100      	movs	r1, #0
 80072e4:	4606      	mov	r6, r0
 80072e6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80072ea:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80072ee:	49aa      	ldr	r1, [pc, #680]	@ (8007598 <__ssvfiscanf_r+0x2bc>)
 80072f0:	f10d 0804 	add.w	r8, sp, #4
 80072f4:	91a0      	str	r1, [sp, #640]	@ 0x280
 80072f6:	49a9      	ldr	r1, [pc, #676]	@ (800759c <__ssvfiscanf_r+0x2c0>)
 80072f8:	4fa9      	ldr	r7, [pc, #676]	@ (80075a0 <__ssvfiscanf_r+0x2c4>)
 80072fa:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80072fe:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	7813      	ldrb	r3, [r2, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8159 	beq.w	80075bc <__ssvfiscanf_r+0x2e0>
 800730a:	5cf9      	ldrb	r1, [r7, r3]
 800730c:	1c55      	adds	r5, r2, #1
 800730e:	f011 0108 	ands.w	r1, r1, #8
 8007312:	d019      	beq.n	8007348 <__ssvfiscanf_r+0x6c>
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	dd0f      	ble.n	800733a <__ssvfiscanf_r+0x5e>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	5cba      	ldrb	r2, [r7, r2]
 8007320:	0712      	lsls	r2, r2, #28
 8007322:	d401      	bmi.n	8007328 <__ssvfiscanf_r+0x4c>
 8007324:	462a      	mov	r2, r5
 8007326:	e7ec      	b.n	8007302 <__ssvfiscanf_r+0x26>
 8007328:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800732a:	3301      	adds	r3, #1
 800732c:	3201      	adds	r2, #1
 800732e:	9245      	str	r2, [sp, #276]	@ 0x114
 8007330:	6862      	ldr	r2, [r4, #4]
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	3a01      	subs	r2, #1
 8007336:	6062      	str	r2, [r4, #4]
 8007338:	e7ec      	b.n	8007314 <__ssvfiscanf_r+0x38>
 800733a:	4621      	mov	r1, r4
 800733c:	4630      	mov	r0, r6
 800733e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007340:	4798      	blx	r3
 8007342:	2800      	cmp	r0, #0
 8007344:	d0e9      	beq.n	800731a <__ssvfiscanf_r+0x3e>
 8007346:	e7ed      	b.n	8007324 <__ssvfiscanf_r+0x48>
 8007348:	2b25      	cmp	r3, #37	@ 0x25
 800734a:	d012      	beq.n	8007372 <__ssvfiscanf_r+0x96>
 800734c:	4699      	mov	r9, r3
 800734e:	6863      	ldr	r3, [r4, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f340 8094 	ble.w	800747e <__ssvfiscanf_r+0x1a2>
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	7813      	ldrb	r3, [r2, #0]
 800735a:	454b      	cmp	r3, r9
 800735c:	f040 812e 	bne.w	80075bc <__ssvfiscanf_r+0x2e0>
 8007360:	6863      	ldr	r3, [r4, #4]
 8007362:	3201      	adds	r2, #1
 8007364:	3b01      	subs	r3, #1
 8007366:	6063      	str	r3, [r4, #4]
 8007368:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800736a:	6022      	str	r2, [r4, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	9345      	str	r3, [sp, #276]	@ 0x114
 8007370:	e7d8      	b.n	8007324 <__ssvfiscanf_r+0x48>
 8007372:	9141      	str	r1, [sp, #260]	@ 0x104
 8007374:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007376:	7853      	ldrb	r3, [r2, #1]
 8007378:	2b2a      	cmp	r3, #42	@ 0x2a
 800737a:	bf04      	itt	eq
 800737c:	2310      	moveq	r3, #16
 800737e:	1c95      	addeq	r5, r2, #2
 8007380:	f04f 020a 	mov.w	r2, #10
 8007384:	bf08      	it	eq
 8007386:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007388:	46a9      	mov	r9, r5
 800738a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800738e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007392:	2b09      	cmp	r3, #9
 8007394:	d91e      	bls.n	80073d4 <__ssvfiscanf_r+0xf8>
 8007396:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80075a4 <__ssvfiscanf_r+0x2c8>
 800739a:	2203      	movs	r2, #3
 800739c:	4650      	mov	r0, sl
 800739e:	f000 fd43 	bl	8007e28 <memchr>
 80073a2:	b138      	cbz	r0, 80073b4 <__ssvfiscanf_r+0xd8>
 80073a4:	2301      	movs	r3, #1
 80073a6:	464d      	mov	r5, r9
 80073a8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80073aa:	eba0 000a 	sub.w	r0, r0, sl
 80073ae:	4083      	lsls	r3, r0
 80073b0:	4313      	orrs	r3, r2
 80073b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80073b4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80073b8:	2b78      	cmp	r3, #120	@ 0x78
 80073ba:	d806      	bhi.n	80073ca <__ssvfiscanf_r+0xee>
 80073bc:	2b57      	cmp	r3, #87	@ 0x57
 80073be:	d810      	bhi.n	80073e2 <__ssvfiscanf_r+0x106>
 80073c0:	2b25      	cmp	r3, #37	@ 0x25
 80073c2:	d0c3      	beq.n	800734c <__ssvfiscanf_r+0x70>
 80073c4:	d856      	bhi.n	8007474 <__ssvfiscanf_r+0x198>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d064      	beq.n	8007494 <__ssvfiscanf_r+0x1b8>
 80073ca:	2303      	movs	r3, #3
 80073cc:	9347      	str	r3, [sp, #284]	@ 0x11c
 80073ce:	230a      	movs	r3, #10
 80073d0:	9342      	str	r3, [sp, #264]	@ 0x108
 80073d2:	e077      	b.n	80074c4 <__ssvfiscanf_r+0x1e8>
 80073d4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80073d6:	464d      	mov	r5, r9
 80073d8:	fb02 1103 	mla	r1, r2, r3, r1
 80073dc:	3930      	subs	r1, #48	@ 0x30
 80073de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80073e0:	e7d2      	b.n	8007388 <__ssvfiscanf_r+0xac>
 80073e2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80073e6:	2a20      	cmp	r2, #32
 80073e8:	d8ef      	bhi.n	80073ca <__ssvfiscanf_r+0xee>
 80073ea:	a101      	add	r1, pc, #4	@ (adr r1, 80073f0 <__ssvfiscanf_r+0x114>)
 80073ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073f0:	080074a3 	.word	0x080074a3
 80073f4:	080073cb 	.word	0x080073cb
 80073f8:	080073cb 	.word	0x080073cb
 80073fc:	080074fd 	.word	0x080074fd
 8007400:	080073cb 	.word	0x080073cb
 8007404:	080073cb 	.word	0x080073cb
 8007408:	080073cb 	.word	0x080073cb
 800740c:	080073cb 	.word	0x080073cb
 8007410:	080073cb 	.word	0x080073cb
 8007414:	080073cb 	.word	0x080073cb
 8007418:	080073cb 	.word	0x080073cb
 800741c:	08007513 	.word	0x08007513
 8007420:	080074f9 	.word	0x080074f9
 8007424:	0800747b 	.word	0x0800747b
 8007428:	0800747b 	.word	0x0800747b
 800742c:	0800747b 	.word	0x0800747b
 8007430:	080073cb 	.word	0x080073cb
 8007434:	080074b5 	.word	0x080074b5
 8007438:	080073cb 	.word	0x080073cb
 800743c:	080073cb 	.word	0x080073cb
 8007440:	080073cb 	.word	0x080073cb
 8007444:	080073cb 	.word	0x080073cb
 8007448:	08007523 	.word	0x08007523
 800744c:	080074bd 	.word	0x080074bd
 8007450:	0800749b 	.word	0x0800749b
 8007454:	080073cb 	.word	0x080073cb
 8007458:	080073cb 	.word	0x080073cb
 800745c:	0800751f 	.word	0x0800751f
 8007460:	080073cb 	.word	0x080073cb
 8007464:	080074f9 	.word	0x080074f9
 8007468:	080073cb 	.word	0x080073cb
 800746c:	080073cb 	.word	0x080073cb
 8007470:	080074a3 	.word	0x080074a3
 8007474:	3b45      	subs	r3, #69	@ 0x45
 8007476:	2b02      	cmp	r3, #2
 8007478:	d8a7      	bhi.n	80073ca <__ssvfiscanf_r+0xee>
 800747a:	2305      	movs	r3, #5
 800747c:	e021      	b.n	80074c2 <__ssvfiscanf_r+0x1e6>
 800747e:	4621      	mov	r1, r4
 8007480:	4630      	mov	r0, r6
 8007482:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007484:	4798      	blx	r3
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f af65 	beq.w	8007356 <__ssvfiscanf_r+0x7a>
 800748c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800748e:	2800      	cmp	r0, #0
 8007490:	f040 808c 	bne.w	80075ac <__ssvfiscanf_r+0x2d0>
 8007494:	f04f 30ff 	mov.w	r0, #4294967295
 8007498:	e08c      	b.n	80075b4 <__ssvfiscanf_r+0x2d8>
 800749a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800749c:	f042 0220 	orr.w	r2, r2, #32
 80074a0:	9241      	str	r2, [sp, #260]	@ 0x104
 80074a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80074a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074a8:	9241      	str	r2, [sp, #260]	@ 0x104
 80074aa:	2210      	movs	r2, #16
 80074ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80074ae:	9242      	str	r2, [sp, #264]	@ 0x108
 80074b0:	d902      	bls.n	80074b8 <__ssvfiscanf_r+0x1dc>
 80074b2:	e005      	b.n	80074c0 <__ssvfiscanf_r+0x1e4>
 80074b4:	2300      	movs	r3, #0
 80074b6:	9342      	str	r3, [sp, #264]	@ 0x108
 80074b8:	2303      	movs	r3, #3
 80074ba:	e002      	b.n	80074c2 <__ssvfiscanf_r+0x1e6>
 80074bc:	2308      	movs	r3, #8
 80074be:	9342      	str	r3, [sp, #264]	@ 0x108
 80074c0:	2304      	movs	r3, #4
 80074c2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	dd39      	ble.n	800753e <__ssvfiscanf_r+0x262>
 80074ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80074cc:	0659      	lsls	r1, r3, #25
 80074ce:	d404      	bmi.n	80074da <__ssvfiscanf_r+0x1fe>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	781a      	ldrb	r2, [r3, #0]
 80074d4:	5cba      	ldrb	r2, [r7, r2]
 80074d6:	0712      	lsls	r2, r2, #28
 80074d8:	d438      	bmi.n	800754c <__ssvfiscanf_r+0x270>
 80074da:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80074dc:	2b02      	cmp	r3, #2
 80074de:	dc47      	bgt.n	8007570 <__ssvfiscanf_r+0x294>
 80074e0:	466b      	mov	r3, sp
 80074e2:	4622      	mov	r2, r4
 80074e4:	4630      	mov	r0, r6
 80074e6:	a941      	add	r1, sp, #260	@ 0x104
 80074e8:	f000 f9fc 	bl	80078e4 <_scanf_chars>
 80074ec:	2801      	cmp	r0, #1
 80074ee:	d065      	beq.n	80075bc <__ssvfiscanf_r+0x2e0>
 80074f0:	2802      	cmp	r0, #2
 80074f2:	f47f af17 	bne.w	8007324 <__ssvfiscanf_r+0x48>
 80074f6:	e7c9      	b.n	800748c <__ssvfiscanf_r+0x1b0>
 80074f8:	220a      	movs	r2, #10
 80074fa:	e7d7      	b.n	80074ac <__ssvfiscanf_r+0x1d0>
 80074fc:	4629      	mov	r1, r5
 80074fe:	4640      	mov	r0, r8
 8007500:	f000 fbe4 	bl	8007ccc <__sccl>
 8007504:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007506:	4605      	mov	r5, r0
 8007508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800750c:	9341      	str	r3, [sp, #260]	@ 0x104
 800750e:	2301      	movs	r3, #1
 8007510:	e7d7      	b.n	80074c2 <__ssvfiscanf_r+0x1e6>
 8007512:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007518:	9341      	str	r3, [sp, #260]	@ 0x104
 800751a:	2300      	movs	r3, #0
 800751c:	e7d1      	b.n	80074c2 <__ssvfiscanf_r+0x1e6>
 800751e:	2302      	movs	r3, #2
 8007520:	e7cf      	b.n	80074c2 <__ssvfiscanf_r+0x1e6>
 8007522:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007524:	06c3      	lsls	r3, r0, #27
 8007526:	f53f aefd 	bmi.w	8007324 <__ssvfiscanf_r+0x48>
 800752a:	9b00      	ldr	r3, [sp, #0]
 800752c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800752e:	1d19      	adds	r1, r3, #4
 8007530:	9100      	str	r1, [sp, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	07c0      	lsls	r0, r0, #31
 8007536:	bf4c      	ite	mi
 8007538:	801a      	strhmi	r2, [r3, #0]
 800753a:	601a      	strpl	r2, [r3, #0]
 800753c:	e6f2      	b.n	8007324 <__ssvfiscanf_r+0x48>
 800753e:	4621      	mov	r1, r4
 8007540:	4630      	mov	r0, r6
 8007542:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007544:	4798      	blx	r3
 8007546:	2800      	cmp	r0, #0
 8007548:	d0bf      	beq.n	80074ca <__ssvfiscanf_r+0x1ee>
 800754a:	e79f      	b.n	800748c <__ssvfiscanf_r+0x1b0>
 800754c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800754e:	3201      	adds	r2, #1
 8007550:	9245      	str	r2, [sp, #276]	@ 0x114
 8007552:	6862      	ldr	r2, [r4, #4]
 8007554:	3a01      	subs	r2, #1
 8007556:	2a00      	cmp	r2, #0
 8007558:	6062      	str	r2, [r4, #4]
 800755a:	dd02      	ble.n	8007562 <__ssvfiscanf_r+0x286>
 800755c:	3301      	adds	r3, #1
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	e7b6      	b.n	80074d0 <__ssvfiscanf_r+0x1f4>
 8007562:	4621      	mov	r1, r4
 8007564:	4630      	mov	r0, r6
 8007566:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007568:	4798      	blx	r3
 800756a:	2800      	cmp	r0, #0
 800756c:	d0b0      	beq.n	80074d0 <__ssvfiscanf_r+0x1f4>
 800756e:	e78d      	b.n	800748c <__ssvfiscanf_r+0x1b0>
 8007570:	2b04      	cmp	r3, #4
 8007572:	dc06      	bgt.n	8007582 <__ssvfiscanf_r+0x2a6>
 8007574:	466b      	mov	r3, sp
 8007576:	4622      	mov	r2, r4
 8007578:	4630      	mov	r0, r6
 800757a:	a941      	add	r1, sp, #260	@ 0x104
 800757c:	f000 fa0c 	bl	8007998 <_scanf_i>
 8007580:	e7b4      	b.n	80074ec <__ssvfiscanf_r+0x210>
 8007582:	4b09      	ldr	r3, [pc, #36]	@ (80075a8 <__ssvfiscanf_r+0x2cc>)
 8007584:	2b00      	cmp	r3, #0
 8007586:	f43f aecd 	beq.w	8007324 <__ssvfiscanf_r+0x48>
 800758a:	466b      	mov	r3, sp
 800758c:	4622      	mov	r2, r4
 800758e:	4630      	mov	r0, r6
 8007590:	a941      	add	r1, sp, #260	@ 0x104
 8007592:	f7fe f99f 	bl	80058d4 <_scanf_float>
 8007596:	e7a9      	b.n	80074ec <__ssvfiscanf_r+0x210>
 8007598:	0800722d 	.word	0x0800722d
 800759c:	080072a3 	.word	0x080072a3
 80075a0:	080096a1 	.word	0x080096a1
 80075a4:	080097a7 	.word	0x080097a7
 80075a8:	080058d5 	.word	0x080058d5
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	065b      	lsls	r3, r3, #25
 80075b0:	f53f af70 	bmi.w	8007494 <__ssvfiscanf_r+0x1b8>
 80075b4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80075b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075bc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80075be:	e7f9      	b.n	80075b4 <__ssvfiscanf_r+0x2d8>

080075c0 <_printf_common>:
 80075c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c4:	4616      	mov	r6, r2
 80075c6:	4698      	mov	r8, r3
 80075c8:	688a      	ldr	r2, [r1, #8]
 80075ca:	690b      	ldr	r3, [r1, #16]
 80075cc:	4607      	mov	r7, r0
 80075ce:	4293      	cmp	r3, r2
 80075d0:	bfb8      	it	lt
 80075d2:	4613      	movlt	r3, r2
 80075d4:	6033      	str	r3, [r6, #0]
 80075d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075da:	460c      	mov	r4, r1
 80075dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075e0:	b10a      	cbz	r2, 80075e6 <_printf_common+0x26>
 80075e2:	3301      	adds	r3, #1
 80075e4:	6033      	str	r3, [r6, #0]
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	0699      	lsls	r1, r3, #26
 80075ea:	bf42      	ittt	mi
 80075ec:	6833      	ldrmi	r3, [r6, #0]
 80075ee:	3302      	addmi	r3, #2
 80075f0:	6033      	strmi	r3, [r6, #0]
 80075f2:	6825      	ldr	r5, [r4, #0]
 80075f4:	f015 0506 	ands.w	r5, r5, #6
 80075f8:	d106      	bne.n	8007608 <_printf_common+0x48>
 80075fa:	f104 0a19 	add.w	sl, r4, #25
 80075fe:	68e3      	ldr	r3, [r4, #12]
 8007600:	6832      	ldr	r2, [r6, #0]
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	42ab      	cmp	r3, r5
 8007606:	dc2b      	bgt.n	8007660 <_printf_common+0xa0>
 8007608:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800760c:	6822      	ldr	r2, [r4, #0]
 800760e:	3b00      	subs	r3, #0
 8007610:	bf18      	it	ne
 8007612:	2301      	movne	r3, #1
 8007614:	0692      	lsls	r2, r2, #26
 8007616:	d430      	bmi.n	800767a <_printf_common+0xba>
 8007618:	4641      	mov	r1, r8
 800761a:	4638      	mov	r0, r7
 800761c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007620:	47c8      	blx	r9
 8007622:	3001      	adds	r0, #1
 8007624:	d023      	beq.n	800766e <_printf_common+0xae>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	6922      	ldr	r2, [r4, #16]
 800762a:	f003 0306 	and.w	r3, r3, #6
 800762e:	2b04      	cmp	r3, #4
 8007630:	bf14      	ite	ne
 8007632:	2500      	movne	r5, #0
 8007634:	6833      	ldreq	r3, [r6, #0]
 8007636:	f04f 0600 	mov.w	r6, #0
 800763a:	bf08      	it	eq
 800763c:	68e5      	ldreq	r5, [r4, #12]
 800763e:	f104 041a 	add.w	r4, r4, #26
 8007642:	bf08      	it	eq
 8007644:	1aed      	subeq	r5, r5, r3
 8007646:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800764a:	bf08      	it	eq
 800764c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007650:	4293      	cmp	r3, r2
 8007652:	bfc4      	itt	gt
 8007654:	1a9b      	subgt	r3, r3, r2
 8007656:	18ed      	addgt	r5, r5, r3
 8007658:	42b5      	cmp	r5, r6
 800765a:	d11a      	bne.n	8007692 <_printf_common+0xd2>
 800765c:	2000      	movs	r0, #0
 800765e:	e008      	b.n	8007672 <_printf_common+0xb2>
 8007660:	2301      	movs	r3, #1
 8007662:	4652      	mov	r2, sl
 8007664:	4641      	mov	r1, r8
 8007666:	4638      	mov	r0, r7
 8007668:	47c8      	blx	r9
 800766a:	3001      	adds	r0, #1
 800766c:	d103      	bne.n	8007676 <_printf_common+0xb6>
 800766e:	f04f 30ff 	mov.w	r0, #4294967295
 8007672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007676:	3501      	adds	r5, #1
 8007678:	e7c1      	b.n	80075fe <_printf_common+0x3e>
 800767a:	2030      	movs	r0, #48	@ 0x30
 800767c:	18e1      	adds	r1, r4, r3
 800767e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007688:	4422      	add	r2, r4
 800768a:	3302      	adds	r3, #2
 800768c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007690:	e7c2      	b.n	8007618 <_printf_common+0x58>
 8007692:	2301      	movs	r3, #1
 8007694:	4622      	mov	r2, r4
 8007696:	4641      	mov	r1, r8
 8007698:	4638      	mov	r0, r7
 800769a:	47c8      	blx	r9
 800769c:	3001      	adds	r0, #1
 800769e:	d0e6      	beq.n	800766e <_printf_common+0xae>
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7d9      	b.n	8007658 <_printf_common+0x98>

080076a4 <_printf_i>:
 80076a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	7e0f      	ldrb	r7, [r1, #24]
 80076aa:	4691      	mov	r9, r2
 80076ac:	2f78      	cmp	r7, #120	@ 0x78
 80076ae:	4680      	mov	r8, r0
 80076b0:	460c      	mov	r4, r1
 80076b2:	469a      	mov	sl, r3
 80076b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ba:	d807      	bhi.n	80076cc <_printf_i+0x28>
 80076bc:	2f62      	cmp	r7, #98	@ 0x62
 80076be:	d80a      	bhi.n	80076d6 <_printf_i+0x32>
 80076c0:	2f00      	cmp	r7, #0
 80076c2:	f000 80d3 	beq.w	800786c <_printf_i+0x1c8>
 80076c6:	2f58      	cmp	r7, #88	@ 0x58
 80076c8:	f000 80ba 	beq.w	8007840 <_printf_i+0x19c>
 80076cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076d4:	e03a      	b.n	800774c <_printf_i+0xa8>
 80076d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076da:	2b15      	cmp	r3, #21
 80076dc:	d8f6      	bhi.n	80076cc <_printf_i+0x28>
 80076de:	a101      	add	r1, pc, #4	@ (adr r1, 80076e4 <_printf_i+0x40>)
 80076e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076e4:	0800773d 	.word	0x0800773d
 80076e8:	08007751 	.word	0x08007751
 80076ec:	080076cd 	.word	0x080076cd
 80076f0:	080076cd 	.word	0x080076cd
 80076f4:	080076cd 	.word	0x080076cd
 80076f8:	080076cd 	.word	0x080076cd
 80076fc:	08007751 	.word	0x08007751
 8007700:	080076cd 	.word	0x080076cd
 8007704:	080076cd 	.word	0x080076cd
 8007708:	080076cd 	.word	0x080076cd
 800770c:	080076cd 	.word	0x080076cd
 8007710:	08007853 	.word	0x08007853
 8007714:	0800777b 	.word	0x0800777b
 8007718:	0800780d 	.word	0x0800780d
 800771c:	080076cd 	.word	0x080076cd
 8007720:	080076cd 	.word	0x080076cd
 8007724:	08007875 	.word	0x08007875
 8007728:	080076cd 	.word	0x080076cd
 800772c:	0800777b 	.word	0x0800777b
 8007730:	080076cd 	.word	0x080076cd
 8007734:	080076cd 	.word	0x080076cd
 8007738:	08007815 	.word	0x08007815
 800773c:	6833      	ldr	r3, [r6, #0]
 800773e:	1d1a      	adds	r2, r3, #4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6032      	str	r2, [r6, #0]
 8007744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800774c:	2301      	movs	r3, #1
 800774e:	e09e      	b.n	800788e <_printf_i+0x1ea>
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	6820      	ldr	r0, [r4, #0]
 8007754:	1d19      	adds	r1, r3, #4
 8007756:	6031      	str	r1, [r6, #0]
 8007758:	0606      	lsls	r6, r0, #24
 800775a:	d501      	bpl.n	8007760 <_printf_i+0xbc>
 800775c:	681d      	ldr	r5, [r3, #0]
 800775e:	e003      	b.n	8007768 <_printf_i+0xc4>
 8007760:	0645      	lsls	r5, r0, #25
 8007762:	d5fb      	bpl.n	800775c <_printf_i+0xb8>
 8007764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007768:	2d00      	cmp	r5, #0
 800776a:	da03      	bge.n	8007774 <_printf_i+0xd0>
 800776c:	232d      	movs	r3, #45	@ 0x2d
 800776e:	426d      	negs	r5, r5
 8007770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007774:	230a      	movs	r3, #10
 8007776:	4859      	ldr	r0, [pc, #356]	@ (80078dc <_printf_i+0x238>)
 8007778:	e011      	b.n	800779e <_printf_i+0xfa>
 800777a:	6821      	ldr	r1, [r4, #0]
 800777c:	6833      	ldr	r3, [r6, #0]
 800777e:	0608      	lsls	r0, r1, #24
 8007780:	f853 5b04 	ldr.w	r5, [r3], #4
 8007784:	d402      	bmi.n	800778c <_printf_i+0xe8>
 8007786:	0649      	lsls	r1, r1, #25
 8007788:	bf48      	it	mi
 800778a:	b2ad      	uxthmi	r5, r5
 800778c:	2f6f      	cmp	r7, #111	@ 0x6f
 800778e:	6033      	str	r3, [r6, #0]
 8007790:	bf14      	ite	ne
 8007792:	230a      	movne	r3, #10
 8007794:	2308      	moveq	r3, #8
 8007796:	4851      	ldr	r0, [pc, #324]	@ (80078dc <_printf_i+0x238>)
 8007798:	2100      	movs	r1, #0
 800779a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800779e:	6866      	ldr	r6, [r4, #4]
 80077a0:	2e00      	cmp	r6, #0
 80077a2:	bfa8      	it	ge
 80077a4:	6821      	ldrge	r1, [r4, #0]
 80077a6:	60a6      	str	r6, [r4, #8]
 80077a8:	bfa4      	itt	ge
 80077aa:	f021 0104 	bicge.w	r1, r1, #4
 80077ae:	6021      	strge	r1, [r4, #0]
 80077b0:	b90d      	cbnz	r5, 80077b6 <_printf_i+0x112>
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d04b      	beq.n	800784e <_printf_i+0x1aa>
 80077b6:	4616      	mov	r6, r2
 80077b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80077bc:	fb03 5711 	mls	r7, r3, r1, r5
 80077c0:	5dc7      	ldrb	r7, [r0, r7]
 80077c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077c6:	462f      	mov	r7, r5
 80077c8:	42bb      	cmp	r3, r7
 80077ca:	460d      	mov	r5, r1
 80077cc:	d9f4      	bls.n	80077b8 <_printf_i+0x114>
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d10b      	bne.n	80077ea <_printf_i+0x146>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	07df      	lsls	r7, r3, #31
 80077d6:	d508      	bpl.n	80077ea <_printf_i+0x146>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	6861      	ldr	r1, [r4, #4]
 80077dc:	4299      	cmp	r1, r3
 80077de:	bfde      	ittt	le
 80077e0:	2330      	movle	r3, #48	@ 0x30
 80077e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077ea:	1b92      	subs	r2, r2, r6
 80077ec:	6122      	str	r2, [r4, #16]
 80077ee:	464b      	mov	r3, r9
 80077f0:	4621      	mov	r1, r4
 80077f2:	4640      	mov	r0, r8
 80077f4:	f8cd a000 	str.w	sl, [sp]
 80077f8:	aa03      	add	r2, sp, #12
 80077fa:	f7ff fee1 	bl	80075c0 <_printf_common>
 80077fe:	3001      	adds	r0, #1
 8007800:	d14a      	bne.n	8007898 <_printf_i+0x1f4>
 8007802:	f04f 30ff 	mov.w	r0, #4294967295
 8007806:	b004      	add	sp, #16
 8007808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	f043 0320 	orr.w	r3, r3, #32
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	2778      	movs	r7, #120	@ 0x78
 8007816:	4832      	ldr	r0, [pc, #200]	@ (80078e0 <_printf_i+0x23c>)
 8007818:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	6831      	ldr	r1, [r6, #0]
 8007820:	061f      	lsls	r7, r3, #24
 8007822:	f851 5b04 	ldr.w	r5, [r1], #4
 8007826:	d402      	bmi.n	800782e <_printf_i+0x18a>
 8007828:	065f      	lsls	r7, r3, #25
 800782a:	bf48      	it	mi
 800782c:	b2ad      	uxthmi	r5, r5
 800782e:	6031      	str	r1, [r6, #0]
 8007830:	07d9      	lsls	r1, r3, #31
 8007832:	bf44      	itt	mi
 8007834:	f043 0320 	orrmi.w	r3, r3, #32
 8007838:	6023      	strmi	r3, [r4, #0]
 800783a:	b11d      	cbz	r5, 8007844 <_printf_i+0x1a0>
 800783c:	2310      	movs	r3, #16
 800783e:	e7ab      	b.n	8007798 <_printf_i+0xf4>
 8007840:	4826      	ldr	r0, [pc, #152]	@ (80078dc <_printf_i+0x238>)
 8007842:	e7e9      	b.n	8007818 <_printf_i+0x174>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	f023 0320 	bic.w	r3, r3, #32
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	e7f6      	b.n	800783c <_printf_i+0x198>
 800784e:	4616      	mov	r6, r2
 8007850:	e7bd      	b.n	80077ce <_printf_i+0x12a>
 8007852:	6833      	ldr	r3, [r6, #0]
 8007854:	6825      	ldr	r5, [r4, #0]
 8007856:	1d18      	adds	r0, r3, #4
 8007858:	6961      	ldr	r1, [r4, #20]
 800785a:	6030      	str	r0, [r6, #0]
 800785c:	062e      	lsls	r6, r5, #24
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	d501      	bpl.n	8007866 <_printf_i+0x1c2>
 8007862:	6019      	str	r1, [r3, #0]
 8007864:	e002      	b.n	800786c <_printf_i+0x1c8>
 8007866:	0668      	lsls	r0, r5, #25
 8007868:	d5fb      	bpl.n	8007862 <_printf_i+0x1be>
 800786a:	8019      	strh	r1, [r3, #0]
 800786c:	2300      	movs	r3, #0
 800786e:	4616      	mov	r6, r2
 8007870:	6123      	str	r3, [r4, #16]
 8007872:	e7bc      	b.n	80077ee <_printf_i+0x14a>
 8007874:	6833      	ldr	r3, [r6, #0]
 8007876:	2100      	movs	r1, #0
 8007878:	1d1a      	adds	r2, r3, #4
 800787a:	6032      	str	r2, [r6, #0]
 800787c:	681e      	ldr	r6, [r3, #0]
 800787e:	6862      	ldr	r2, [r4, #4]
 8007880:	4630      	mov	r0, r6
 8007882:	f000 fad1 	bl	8007e28 <memchr>
 8007886:	b108      	cbz	r0, 800788c <_printf_i+0x1e8>
 8007888:	1b80      	subs	r0, r0, r6
 800788a:	6060      	str	r0, [r4, #4]
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	6123      	str	r3, [r4, #16]
 8007890:	2300      	movs	r3, #0
 8007892:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007896:	e7aa      	b.n	80077ee <_printf_i+0x14a>
 8007898:	4632      	mov	r2, r6
 800789a:	4649      	mov	r1, r9
 800789c:	4640      	mov	r0, r8
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	47d0      	blx	sl
 80078a2:	3001      	adds	r0, #1
 80078a4:	d0ad      	beq.n	8007802 <_printf_i+0x15e>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	079b      	lsls	r3, r3, #30
 80078aa:	d413      	bmi.n	80078d4 <_printf_i+0x230>
 80078ac:	68e0      	ldr	r0, [r4, #12]
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	4298      	cmp	r0, r3
 80078b2:	bfb8      	it	lt
 80078b4:	4618      	movlt	r0, r3
 80078b6:	e7a6      	b.n	8007806 <_printf_i+0x162>
 80078b8:	2301      	movs	r3, #1
 80078ba:	4632      	mov	r2, r6
 80078bc:	4649      	mov	r1, r9
 80078be:	4640      	mov	r0, r8
 80078c0:	47d0      	blx	sl
 80078c2:	3001      	adds	r0, #1
 80078c4:	d09d      	beq.n	8007802 <_printf_i+0x15e>
 80078c6:	3501      	adds	r5, #1
 80078c8:	68e3      	ldr	r3, [r4, #12]
 80078ca:	9903      	ldr	r1, [sp, #12]
 80078cc:	1a5b      	subs	r3, r3, r1
 80078ce:	42ab      	cmp	r3, r5
 80078d0:	dcf2      	bgt.n	80078b8 <_printf_i+0x214>
 80078d2:	e7eb      	b.n	80078ac <_printf_i+0x208>
 80078d4:	2500      	movs	r5, #0
 80078d6:	f104 0619 	add.w	r6, r4, #25
 80078da:	e7f5      	b.n	80078c8 <_printf_i+0x224>
 80078dc:	080097b2 	.word	0x080097b2
 80078e0:	080097c3 	.word	0x080097c3

080078e4 <_scanf_chars>:
 80078e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e8:	4615      	mov	r5, r2
 80078ea:	688a      	ldr	r2, [r1, #8]
 80078ec:	4680      	mov	r8, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	b932      	cbnz	r2, 8007900 <_scanf_chars+0x1c>
 80078f2:	698a      	ldr	r2, [r1, #24]
 80078f4:	2a00      	cmp	r2, #0
 80078f6:	bf14      	ite	ne
 80078f8:	f04f 32ff 	movne.w	r2, #4294967295
 80078fc:	2201      	moveq	r2, #1
 80078fe:	608a      	str	r2, [r1, #8]
 8007900:	2700      	movs	r7, #0
 8007902:	6822      	ldr	r2, [r4, #0]
 8007904:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8007994 <_scanf_chars+0xb0>
 8007908:	06d1      	lsls	r1, r2, #27
 800790a:	bf5f      	itttt	pl
 800790c:	681a      	ldrpl	r2, [r3, #0]
 800790e:	1d11      	addpl	r1, r2, #4
 8007910:	6019      	strpl	r1, [r3, #0]
 8007912:	6816      	ldrpl	r6, [r2, #0]
 8007914:	69a0      	ldr	r0, [r4, #24]
 8007916:	b188      	cbz	r0, 800793c <_scanf_chars+0x58>
 8007918:	2801      	cmp	r0, #1
 800791a:	d107      	bne.n	800792c <_scanf_chars+0x48>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	6963      	ldr	r3, [r4, #20]
 8007922:	5c9b      	ldrb	r3, [r3, r2]
 8007924:	b953      	cbnz	r3, 800793c <_scanf_chars+0x58>
 8007926:	2f00      	cmp	r7, #0
 8007928:	d031      	beq.n	800798e <_scanf_chars+0xaa>
 800792a:	e022      	b.n	8007972 <_scanf_chars+0x8e>
 800792c:	2802      	cmp	r0, #2
 800792e:	d120      	bne.n	8007972 <_scanf_chars+0x8e>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007938:	071b      	lsls	r3, r3, #28
 800793a:	d41a      	bmi.n	8007972 <_scanf_chars+0x8e>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	3701      	adds	r7, #1
 8007940:	06da      	lsls	r2, r3, #27
 8007942:	bf5e      	ittt	pl
 8007944:	682b      	ldrpl	r3, [r5, #0]
 8007946:	781b      	ldrbpl	r3, [r3, #0]
 8007948:	f806 3b01 	strbpl.w	r3, [r6], #1
 800794c:	682a      	ldr	r2, [r5, #0]
 800794e:	686b      	ldr	r3, [r5, #4]
 8007950:	3201      	adds	r2, #1
 8007952:	602a      	str	r2, [r5, #0]
 8007954:	68a2      	ldr	r2, [r4, #8]
 8007956:	3b01      	subs	r3, #1
 8007958:	3a01      	subs	r2, #1
 800795a:	606b      	str	r3, [r5, #4]
 800795c:	60a2      	str	r2, [r4, #8]
 800795e:	b142      	cbz	r2, 8007972 <_scanf_chars+0x8e>
 8007960:	2b00      	cmp	r3, #0
 8007962:	dcd7      	bgt.n	8007914 <_scanf_chars+0x30>
 8007964:	4629      	mov	r1, r5
 8007966:	4640      	mov	r0, r8
 8007968:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800796c:	4798      	blx	r3
 800796e:	2800      	cmp	r0, #0
 8007970:	d0d0      	beq.n	8007914 <_scanf_chars+0x30>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	f013 0310 	ands.w	r3, r3, #16
 8007978:	d105      	bne.n	8007986 <_scanf_chars+0xa2>
 800797a:	68e2      	ldr	r2, [r4, #12]
 800797c:	3201      	adds	r2, #1
 800797e:	60e2      	str	r2, [r4, #12]
 8007980:	69a2      	ldr	r2, [r4, #24]
 8007982:	b102      	cbz	r2, 8007986 <_scanf_chars+0xa2>
 8007984:	7033      	strb	r3, [r6, #0]
 8007986:	2000      	movs	r0, #0
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	443b      	add	r3, r7
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007992:	bf00      	nop
 8007994:	080096a1 	.word	0x080096a1

08007998 <_scanf_i>:
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	460c      	mov	r4, r1
 800799e:	4698      	mov	r8, r3
 80079a0:	4b72      	ldr	r3, [pc, #456]	@ (8007b6c <_scanf_i+0x1d4>)
 80079a2:	b087      	sub	sp, #28
 80079a4:	4682      	mov	sl, r0
 80079a6:	4616      	mov	r6, r2
 80079a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079ac:	ab03      	add	r3, sp, #12
 80079ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80079b2:	4b6f      	ldr	r3, [pc, #444]	@ (8007b70 <_scanf_i+0x1d8>)
 80079b4:	69a1      	ldr	r1, [r4, #24]
 80079b6:	4a6f      	ldr	r2, [pc, #444]	@ (8007b74 <_scanf_i+0x1dc>)
 80079b8:	4627      	mov	r7, r4
 80079ba:	2903      	cmp	r1, #3
 80079bc:	bf08      	it	eq
 80079be:	461a      	moveq	r2, r3
 80079c0:	68a3      	ldr	r3, [r4, #8]
 80079c2:	9201      	str	r2, [sp, #4]
 80079c4:	1e5a      	subs	r2, r3, #1
 80079c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80079ca:	bf81      	itttt	hi
 80079cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80079d0:	eb03 0905 	addhi.w	r9, r3, r5
 80079d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80079d8:	60a3      	strhi	r3, [r4, #8]
 80079da:	f857 3b1c 	ldr.w	r3, [r7], #28
 80079de:	bf98      	it	ls
 80079e0:	f04f 0900 	movls.w	r9, #0
 80079e4:	463d      	mov	r5, r7
 80079e6:	f04f 0b00 	mov.w	fp, #0
 80079ea:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	6831      	ldr	r1, [r6, #0]
 80079f2:	ab03      	add	r3, sp, #12
 80079f4:	2202      	movs	r2, #2
 80079f6:	7809      	ldrb	r1, [r1, #0]
 80079f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80079fc:	f000 fa14 	bl	8007e28 <memchr>
 8007a00:	b328      	cbz	r0, 8007a4e <_scanf_i+0xb6>
 8007a02:	f1bb 0f01 	cmp.w	fp, #1
 8007a06:	d159      	bne.n	8007abc <_scanf_i+0x124>
 8007a08:	6862      	ldr	r2, [r4, #4]
 8007a0a:	b92a      	cbnz	r2, 8007a18 <_scanf_i+0x80>
 8007a0c:	2108      	movs	r1, #8
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	6061      	str	r1, [r4, #4]
 8007a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a16:	6022      	str	r2, [r4, #0]
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007a1e:	6022      	str	r2, [r4, #0]
 8007a20:	68a2      	ldr	r2, [r4, #8]
 8007a22:	1e51      	subs	r1, r2, #1
 8007a24:	60a1      	str	r1, [r4, #8]
 8007a26:	b192      	cbz	r2, 8007a4e <_scanf_i+0xb6>
 8007a28:	6832      	ldr	r2, [r6, #0]
 8007a2a:	1c51      	adds	r1, r2, #1
 8007a2c:	6031      	str	r1, [r6, #0]
 8007a2e:	7812      	ldrb	r2, [r2, #0]
 8007a30:	f805 2b01 	strb.w	r2, [r5], #1
 8007a34:	6872      	ldr	r2, [r6, #4]
 8007a36:	3a01      	subs	r2, #1
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	6072      	str	r2, [r6, #4]
 8007a3c:	dc07      	bgt.n	8007a4e <_scanf_i+0xb6>
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4650      	mov	r0, sl
 8007a42:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007a46:	4790      	blx	r2
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f040 8085 	bne.w	8007b58 <_scanf_i+0x1c0>
 8007a4e:	f10b 0b01 	add.w	fp, fp, #1
 8007a52:	f1bb 0f03 	cmp.w	fp, #3
 8007a56:	d1cb      	bne.n	80079f0 <_scanf_i+0x58>
 8007a58:	6863      	ldr	r3, [r4, #4]
 8007a5a:	b90b      	cbnz	r3, 8007a60 <_scanf_i+0xc8>
 8007a5c:	230a      	movs	r3, #10
 8007a5e:	6063      	str	r3, [r4, #4]
 8007a60:	6863      	ldr	r3, [r4, #4]
 8007a62:	4945      	ldr	r1, [pc, #276]	@ (8007b78 <_scanf_i+0x1e0>)
 8007a64:	6960      	ldr	r0, [r4, #20]
 8007a66:	1ac9      	subs	r1, r1, r3
 8007a68:	f000 f930 	bl	8007ccc <__sccl>
 8007a6c:	f04f 0b00 	mov.w	fp, #0
 8007a70:	68a3      	ldr	r3, [r4, #8]
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d03d      	beq.n	8007af4 <_scanf_i+0x15c>
 8007a78:	6831      	ldr	r1, [r6, #0]
 8007a7a:	6960      	ldr	r0, [r4, #20]
 8007a7c:	f891 c000 	ldrb.w	ip, [r1]
 8007a80:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d035      	beq.n	8007af4 <_scanf_i+0x15c>
 8007a88:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007a8c:	d124      	bne.n	8007ad8 <_scanf_i+0x140>
 8007a8e:	0510      	lsls	r0, r2, #20
 8007a90:	d522      	bpl.n	8007ad8 <_scanf_i+0x140>
 8007a92:	f10b 0b01 	add.w	fp, fp, #1
 8007a96:	f1b9 0f00 	cmp.w	r9, #0
 8007a9a:	d003      	beq.n	8007aa4 <_scanf_i+0x10c>
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007aa2:	60a3      	str	r3, [r4, #8]
 8007aa4:	6873      	ldr	r3, [r6, #4]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	6073      	str	r3, [r6, #4]
 8007aac:	dd1b      	ble.n	8007ae6 <_scanf_i+0x14e>
 8007aae:	6833      	ldr	r3, [r6, #0]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	6033      	str	r3, [r6, #0]
 8007ab4:	68a3      	ldr	r3, [r4, #8]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	60a3      	str	r3, [r4, #8]
 8007aba:	e7d9      	b.n	8007a70 <_scanf_i+0xd8>
 8007abc:	f1bb 0f02 	cmp.w	fp, #2
 8007ac0:	d1ae      	bne.n	8007a20 <_scanf_i+0x88>
 8007ac2:	6822      	ldr	r2, [r4, #0]
 8007ac4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007ac8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007acc:	d1bf      	bne.n	8007a4e <_scanf_i+0xb6>
 8007ace:	2110      	movs	r1, #16
 8007ad0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ad4:	6061      	str	r1, [r4, #4]
 8007ad6:	e7a2      	b.n	8007a1e <_scanf_i+0x86>
 8007ad8:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007adc:	6022      	str	r2, [r4, #0]
 8007ade:	780b      	ldrb	r3, [r1, #0]
 8007ae0:	f805 3b01 	strb.w	r3, [r5], #1
 8007ae4:	e7de      	b.n	8007aa4 <_scanf_i+0x10c>
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4650      	mov	r0, sl
 8007aea:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007aee:	4798      	blx	r3
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0df      	beq.n	8007ab4 <_scanf_i+0x11c>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	05d9      	lsls	r1, r3, #23
 8007af8:	d50d      	bpl.n	8007b16 <_scanf_i+0x17e>
 8007afa:	42bd      	cmp	r5, r7
 8007afc:	d909      	bls.n	8007b12 <_scanf_i+0x17a>
 8007afe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007b02:	4632      	mov	r2, r6
 8007b04:	4650      	mov	r0, sl
 8007b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007b0e:	4798      	blx	r3
 8007b10:	464d      	mov	r5, r9
 8007b12:	42bd      	cmp	r5, r7
 8007b14:	d028      	beq.n	8007b68 <_scanf_i+0x1d0>
 8007b16:	6822      	ldr	r2, [r4, #0]
 8007b18:	f012 0210 	ands.w	r2, r2, #16
 8007b1c:	d113      	bne.n	8007b46 <_scanf_i+0x1ae>
 8007b1e:	702a      	strb	r2, [r5, #0]
 8007b20:	4639      	mov	r1, r7
 8007b22:	6863      	ldr	r3, [r4, #4]
 8007b24:	4650      	mov	r0, sl
 8007b26:	9e01      	ldr	r6, [sp, #4]
 8007b28:	47b0      	blx	r6
 8007b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b2e:	6821      	ldr	r1, [r4, #0]
 8007b30:	1d1a      	adds	r2, r3, #4
 8007b32:	f8c8 2000 	str.w	r2, [r8]
 8007b36:	f011 0f20 	tst.w	r1, #32
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	d00f      	beq.n	8007b5e <_scanf_i+0x1c6>
 8007b3e:	6018      	str	r0, [r3, #0]
 8007b40:	68e3      	ldr	r3, [r4, #12]
 8007b42:	3301      	adds	r3, #1
 8007b44:	60e3      	str	r3, [r4, #12]
 8007b46:	2000      	movs	r0, #0
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	1bed      	subs	r5, r5, r7
 8007b4c:	445d      	add	r5, fp
 8007b4e:	442b      	add	r3, r5
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	b007      	add	sp, #28
 8007b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b58:	f04f 0b00 	mov.w	fp, #0
 8007b5c:	e7ca      	b.n	8007af4 <_scanf_i+0x15c>
 8007b5e:	07ca      	lsls	r2, r1, #31
 8007b60:	bf4c      	ite	mi
 8007b62:	8018      	strhmi	r0, [r3, #0]
 8007b64:	6018      	strpl	r0, [r3, #0]
 8007b66:	e7eb      	b.n	8007b40 <_scanf_i+0x1a8>
 8007b68:	2001      	movs	r0, #1
 8007b6a:	e7f2      	b.n	8007b52 <_scanf_i+0x1ba>
 8007b6c:	08009600 	.word	0x08009600
 8007b70:	08006f79 	.word	0x08006f79
 8007b74:	08008f89 	.word	0x08008f89
 8007b78:	080097e4 	.word	0x080097e4

08007b7c <__sflush_r>:
 8007b7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	0716      	lsls	r6, r2, #28
 8007b84:	4605      	mov	r5, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	d454      	bmi.n	8007c34 <__sflush_r+0xb8>
 8007b8a:	684b      	ldr	r3, [r1, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dc02      	bgt.n	8007b96 <__sflush_r+0x1a>
 8007b90:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dd48      	ble.n	8007c28 <__sflush_r+0xac>
 8007b96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b98:	2e00      	cmp	r6, #0
 8007b9a:	d045      	beq.n	8007c28 <__sflush_r+0xac>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ba2:	682f      	ldr	r7, [r5, #0]
 8007ba4:	6a21      	ldr	r1, [r4, #32]
 8007ba6:	602b      	str	r3, [r5, #0]
 8007ba8:	d030      	beq.n	8007c0c <__sflush_r+0x90>
 8007baa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	0759      	lsls	r1, r3, #29
 8007bb0:	d505      	bpl.n	8007bbe <__sflush_r+0x42>
 8007bb2:	6863      	ldr	r3, [r4, #4]
 8007bb4:	1ad2      	subs	r2, r2, r3
 8007bb6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bb8:	b10b      	cbz	r3, 8007bbe <__sflush_r+0x42>
 8007bba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bbc:	1ad2      	subs	r2, r2, r3
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bc4:	6a21      	ldr	r1, [r4, #32]
 8007bc6:	47b0      	blx	r6
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	d106      	bne.n	8007bdc <__sflush_r+0x60>
 8007bce:	6829      	ldr	r1, [r5, #0]
 8007bd0:	291d      	cmp	r1, #29
 8007bd2:	d82b      	bhi.n	8007c2c <__sflush_r+0xb0>
 8007bd4:	4a28      	ldr	r2, [pc, #160]	@ (8007c78 <__sflush_r+0xfc>)
 8007bd6:	410a      	asrs	r2, r1
 8007bd8:	07d6      	lsls	r6, r2, #31
 8007bda:	d427      	bmi.n	8007c2c <__sflush_r+0xb0>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	6062      	str	r2, [r4, #4]
 8007be0:	6922      	ldr	r2, [r4, #16]
 8007be2:	04d9      	lsls	r1, r3, #19
 8007be4:	6022      	str	r2, [r4, #0]
 8007be6:	d504      	bpl.n	8007bf2 <__sflush_r+0x76>
 8007be8:	1c42      	adds	r2, r0, #1
 8007bea:	d101      	bne.n	8007bf0 <__sflush_r+0x74>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b903      	cbnz	r3, 8007bf2 <__sflush_r+0x76>
 8007bf0:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bf4:	602f      	str	r7, [r5, #0]
 8007bf6:	b1b9      	cbz	r1, 8007c28 <__sflush_r+0xac>
 8007bf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bfc:	4299      	cmp	r1, r3
 8007bfe:	d002      	beq.n	8007c06 <__sflush_r+0x8a>
 8007c00:	4628      	mov	r0, r5
 8007c02:	f7fe fa49 	bl	8006098 <_free_r>
 8007c06:	2300      	movs	r3, #0
 8007c08:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c0a:	e00d      	b.n	8007c28 <__sflush_r+0xac>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b0      	blx	r6
 8007c12:	4602      	mov	r2, r0
 8007c14:	1c50      	adds	r0, r2, #1
 8007c16:	d1c9      	bne.n	8007bac <__sflush_r+0x30>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0c6      	beq.n	8007bac <__sflush_r+0x30>
 8007c1e:	2b1d      	cmp	r3, #29
 8007c20:	d001      	beq.n	8007c26 <__sflush_r+0xaa>
 8007c22:	2b16      	cmp	r3, #22
 8007c24:	d11d      	bne.n	8007c62 <__sflush_r+0xe6>
 8007c26:	602f      	str	r7, [r5, #0]
 8007c28:	2000      	movs	r0, #0
 8007c2a:	e021      	b.n	8007c70 <__sflush_r+0xf4>
 8007c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c30:	b21b      	sxth	r3, r3
 8007c32:	e01a      	b.n	8007c6a <__sflush_r+0xee>
 8007c34:	690f      	ldr	r7, [r1, #16]
 8007c36:	2f00      	cmp	r7, #0
 8007c38:	d0f6      	beq.n	8007c28 <__sflush_r+0xac>
 8007c3a:	0793      	lsls	r3, r2, #30
 8007c3c:	bf18      	it	ne
 8007c3e:	2300      	movne	r3, #0
 8007c40:	680e      	ldr	r6, [r1, #0]
 8007c42:	bf08      	it	eq
 8007c44:	694b      	ldreq	r3, [r1, #20]
 8007c46:	1bf6      	subs	r6, r6, r7
 8007c48:	600f      	str	r7, [r1, #0]
 8007c4a:	608b      	str	r3, [r1, #8]
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	ddeb      	ble.n	8007c28 <__sflush_r+0xac>
 8007c50:	4633      	mov	r3, r6
 8007c52:	463a      	mov	r2, r7
 8007c54:	4628      	mov	r0, r5
 8007c56:	6a21      	ldr	r1, [r4, #32]
 8007c58:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c5c:	47e0      	blx	ip
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	dc07      	bgt.n	8007c72 <__sflush_r+0xf6>
 8007c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c72:	4407      	add	r7, r0
 8007c74:	1a36      	subs	r6, r6, r0
 8007c76:	e7e9      	b.n	8007c4c <__sflush_r+0xd0>
 8007c78:	dfbffffe 	.word	0xdfbffffe

08007c7c <_fflush_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	690b      	ldr	r3, [r1, #16]
 8007c80:	4605      	mov	r5, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	b913      	cbnz	r3, 8007c8c <_fflush_r+0x10>
 8007c86:	2500      	movs	r5, #0
 8007c88:	4628      	mov	r0, r5
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	b118      	cbz	r0, 8007c96 <_fflush_r+0x1a>
 8007c8e:	6a03      	ldr	r3, [r0, #32]
 8007c90:	b90b      	cbnz	r3, 8007c96 <_fflush_r+0x1a>
 8007c92:	f7fe f8bb 	bl	8005e0c <__sinit>
 8007c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0f3      	beq.n	8007c86 <_fflush_r+0xa>
 8007c9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ca0:	07d0      	lsls	r0, r2, #31
 8007ca2:	d404      	bmi.n	8007cae <_fflush_r+0x32>
 8007ca4:	0599      	lsls	r1, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_fflush_r+0x32>
 8007ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007caa:	f7fe f9ee 	bl	800608a <__retarget_lock_acquire_recursive>
 8007cae:	4628      	mov	r0, r5
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f7ff ff63 	bl	8007b7c <__sflush_r>
 8007cb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cb8:	4605      	mov	r5, r0
 8007cba:	07da      	lsls	r2, r3, #31
 8007cbc:	d4e4      	bmi.n	8007c88 <_fflush_r+0xc>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	059b      	lsls	r3, r3, #22
 8007cc2:	d4e1      	bmi.n	8007c88 <_fflush_r+0xc>
 8007cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cc6:	f7fe f9e1 	bl	800608c <__retarget_lock_release_recursive>
 8007cca:	e7dd      	b.n	8007c88 <_fflush_r+0xc>

08007ccc <__sccl>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	780b      	ldrb	r3, [r1, #0]
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	2b5e      	cmp	r3, #94	@ 0x5e
 8007cd4:	bf0b      	itete	eq
 8007cd6:	784b      	ldrbeq	r3, [r1, #1]
 8007cd8:	1c4a      	addne	r2, r1, #1
 8007cda:	1c8a      	addeq	r2, r1, #2
 8007cdc:	2100      	movne	r1, #0
 8007cde:	bf08      	it	eq
 8007ce0:	2101      	moveq	r1, #1
 8007ce2:	3801      	subs	r0, #1
 8007ce4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007ce8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007cec:	42a8      	cmp	r0, r5
 8007cee:	d1fb      	bne.n	8007ce8 <__sccl+0x1c>
 8007cf0:	b90b      	cbnz	r3, 8007cf6 <__sccl+0x2a>
 8007cf2:	1e50      	subs	r0, r2, #1
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	f081 0101 	eor.w	r1, r1, #1
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	54e1      	strb	r1, [r4, r3]
 8007cfe:	4602      	mov	r2, r0
 8007d00:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d04:	2d2d      	cmp	r5, #45	@ 0x2d
 8007d06:	d005      	beq.n	8007d14 <__sccl+0x48>
 8007d08:	2d5d      	cmp	r5, #93	@ 0x5d
 8007d0a:	d016      	beq.n	8007d3a <__sccl+0x6e>
 8007d0c:	2d00      	cmp	r5, #0
 8007d0e:	d0f1      	beq.n	8007cf4 <__sccl+0x28>
 8007d10:	462b      	mov	r3, r5
 8007d12:	e7f2      	b.n	8007cfa <__sccl+0x2e>
 8007d14:	7846      	ldrb	r6, [r0, #1]
 8007d16:	2e5d      	cmp	r6, #93	@ 0x5d
 8007d18:	d0fa      	beq.n	8007d10 <__sccl+0x44>
 8007d1a:	42b3      	cmp	r3, r6
 8007d1c:	dcf8      	bgt.n	8007d10 <__sccl+0x44>
 8007d1e:	461a      	mov	r2, r3
 8007d20:	3002      	adds	r0, #2
 8007d22:	3201      	adds	r2, #1
 8007d24:	4296      	cmp	r6, r2
 8007d26:	54a1      	strb	r1, [r4, r2]
 8007d28:	dcfb      	bgt.n	8007d22 <__sccl+0x56>
 8007d2a:	1af2      	subs	r2, r6, r3
 8007d2c:	3a01      	subs	r2, #1
 8007d2e:	42b3      	cmp	r3, r6
 8007d30:	bfa8      	it	ge
 8007d32:	2200      	movge	r2, #0
 8007d34:	1c5d      	adds	r5, r3, #1
 8007d36:	18ab      	adds	r3, r5, r2
 8007d38:	e7e1      	b.n	8007cfe <__sccl+0x32>
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	e7da      	b.n	8007cf4 <__sccl+0x28>

08007d3e <__submore>:
 8007d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d42:	460c      	mov	r4, r1
 8007d44:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007d46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d4a:	4299      	cmp	r1, r3
 8007d4c:	d11b      	bne.n	8007d86 <__submore+0x48>
 8007d4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007d52:	f7fe fa0b 	bl	800616c <_malloc_r>
 8007d56:	b918      	cbnz	r0, 8007d60 <__submore+0x22>
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d64:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007d66:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007d6a:	6360      	str	r0, [r4, #52]	@ 0x34
 8007d6c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007d70:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d74:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007d78:	7043      	strb	r3, [r0, #1]
 8007d7a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007d7e:	7003      	strb	r3, [r0, #0]
 8007d80:	6020      	str	r0, [r4, #0]
 8007d82:	2000      	movs	r0, #0
 8007d84:	e7ea      	b.n	8007d5c <__submore+0x1e>
 8007d86:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007d88:	0077      	lsls	r7, r6, #1
 8007d8a:	463a      	mov	r2, r7
 8007d8c:	f001 f860 	bl	8008e50 <_realloc_r>
 8007d90:	4605      	mov	r5, r0
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d0e0      	beq.n	8007d58 <__submore+0x1a>
 8007d96:	eb00 0806 	add.w	r8, r0, r6
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	4632      	mov	r2, r6
 8007d9e:	4640      	mov	r0, r8
 8007da0:	f000 f850 	bl	8007e44 <memcpy>
 8007da4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007da8:	f8c4 8000 	str.w	r8, [r4]
 8007dac:	e7e9      	b.n	8007d82 <__submore+0x44>

08007dae <memmove>:
 8007dae:	4288      	cmp	r0, r1
 8007db0:	b510      	push	{r4, lr}
 8007db2:	eb01 0402 	add.w	r4, r1, r2
 8007db6:	d902      	bls.n	8007dbe <memmove+0x10>
 8007db8:	4284      	cmp	r4, r0
 8007dba:	4623      	mov	r3, r4
 8007dbc:	d807      	bhi.n	8007dce <memmove+0x20>
 8007dbe:	1e43      	subs	r3, r0, #1
 8007dc0:	42a1      	cmp	r1, r4
 8007dc2:	d008      	beq.n	8007dd6 <memmove+0x28>
 8007dc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dcc:	e7f8      	b.n	8007dc0 <memmove+0x12>
 8007dce:	4601      	mov	r1, r0
 8007dd0:	4402      	add	r2, r0
 8007dd2:	428a      	cmp	r2, r1
 8007dd4:	d100      	bne.n	8007dd8 <memmove+0x2a>
 8007dd6:	bd10      	pop	{r4, pc}
 8007dd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ddc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007de0:	e7f7      	b.n	8007dd2 <memmove+0x24>

08007de2 <strncmp>:
 8007de2:	b510      	push	{r4, lr}
 8007de4:	b16a      	cbz	r2, 8007e02 <strncmp+0x20>
 8007de6:	3901      	subs	r1, #1
 8007de8:	1884      	adds	r4, r0, r2
 8007dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d103      	bne.n	8007dfe <strncmp+0x1c>
 8007df6:	42a0      	cmp	r0, r4
 8007df8:	d001      	beq.n	8007dfe <strncmp+0x1c>
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	d1f5      	bne.n	8007dea <strncmp+0x8>
 8007dfe:	1ad0      	subs	r0, r2, r3
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	4610      	mov	r0, r2
 8007e04:	e7fc      	b.n	8007e00 <strncmp+0x1e>
	...

08007e08 <_sbrk_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4d05      	ldr	r5, [pc, #20]	@ (8007e24 <_sbrk_r+0x1c>)
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	f7fa fa04 	bl	8002220 <_sbrk>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_sbrk_r+0x1a>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_sbrk_r+0x1a>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	200005dc 	.word	0x200005dc

08007e28 <memchr>:
 8007e28:	4603      	mov	r3, r0
 8007e2a:	b510      	push	{r4, lr}
 8007e2c:	b2c9      	uxtb	r1, r1
 8007e2e:	4402      	add	r2, r0
 8007e30:	4293      	cmp	r3, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	d101      	bne.n	8007e3a <memchr+0x12>
 8007e36:	2000      	movs	r0, #0
 8007e38:	e003      	b.n	8007e42 <memchr+0x1a>
 8007e3a:	7804      	ldrb	r4, [r0, #0]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	428c      	cmp	r4, r1
 8007e40:	d1f6      	bne.n	8007e30 <memchr+0x8>
 8007e42:	bd10      	pop	{r4, pc}

08007e44 <memcpy>:
 8007e44:	440a      	add	r2, r1
 8007e46:	4291      	cmp	r1, r2
 8007e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e4c:	d100      	bne.n	8007e50 <memcpy+0xc>
 8007e4e:	4770      	bx	lr
 8007e50:	b510      	push	{r4, lr}
 8007e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e56:	4291      	cmp	r1, r2
 8007e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e5c:	d1f9      	bne.n	8007e52 <memcpy+0xe>
 8007e5e:	bd10      	pop	{r4, pc}

08007e60 <nan>:
 8007e60:	2000      	movs	r0, #0
 8007e62:	4901      	ldr	r1, [pc, #4]	@ (8007e68 <nan+0x8>)
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	7ff80000 	.word	0x7ff80000

08007e6c <rshift>:
 8007e6c:	6903      	ldr	r3, [r0, #16]
 8007e6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e76:	f100 0414 	add.w	r4, r0, #20
 8007e7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e7e:	dd46      	ble.n	8007f0e <rshift+0xa2>
 8007e80:	f011 011f 	ands.w	r1, r1, #31
 8007e84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e8c:	d10c      	bne.n	8007ea8 <rshift+0x3c>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	f100 0710 	add.w	r7, r0, #16
 8007e94:	42b1      	cmp	r1, r6
 8007e96:	d335      	bcc.n	8007f04 <rshift+0x98>
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	1eea      	subs	r2, r5, #3
 8007e9e:	4296      	cmp	r6, r2
 8007ea0:	bf38      	it	cc
 8007ea2:	2300      	movcc	r3, #0
 8007ea4:	4423      	add	r3, r4
 8007ea6:	e015      	b.n	8007ed4 <rshift+0x68>
 8007ea8:	46a1      	mov	r9, r4
 8007eaa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007eae:	f1c1 0820 	rsb	r8, r1, #32
 8007eb2:	40cf      	lsrs	r7, r1
 8007eb4:	f105 0e04 	add.w	lr, r5, #4
 8007eb8:	4576      	cmp	r6, lr
 8007eba:	46f4      	mov	ip, lr
 8007ebc:	d816      	bhi.n	8007eec <rshift+0x80>
 8007ebe:	1a9a      	subs	r2, r3, r2
 8007ec0:	0092      	lsls	r2, r2, #2
 8007ec2:	3a04      	subs	r2, #4
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	42ae      	cmp	r6, r5
 8007ec8:	bf38      	it	cc
 8007eca:	2200      	movcc	r2, #0
 8007ecc:	18a3      	adds	r3, r4, r2
 8007ece:	50a7      	str	r7, [r4, r2]
 8007ed0:	b107      	cbz	r7, 8007ed4 <rshift+0x68>
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	eba3 0204 	sub.w	r2, r3, r4
 8007eda:	bf08      	it	eq
 8007edc:	2300      	moveq	r3, #0
 8007ede:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007ee2:	6102      	str	r2, [r0, #16]
 8007ee4:	bf08      	it	eq
 8007ee6:	6143      	streq	r3, [r0, #20]
 8007ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eec:	f8dc c000 	ldr.w	ip, [ip]
 8007ef0:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ef4:	ea4c 0707 	orr.w	r7, ip, r7
 8007ef8:	f849 7b04 	str.w	r7, [r9], #4
 8007efc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f00:	40cf      	lsrs	r7, r1
 8007f02:	e7d9      	b.n	8007eb8 <rshift+0x4c>
 8007f04:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f08:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f0c:	e7c2      	b.n	8007e94 <rshift+0x28>
 8007f0e:	4623      	mov	r3, r4
 8007f10:	e7e0      	b.n	8007ed4 <rshift+0x68>

08007f12 <__hexdig_fun>:
 8007f12:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d802      	bhi.n	8007f20 <__hexdig_fun+0xe>
 8007f1a:	3820      	subs	r0, #32
 8007f1c:	b2c0      	uxtb	r0, r0
 8007f1e:	4770      	bx	lr
 8007f20:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	d801      	bhi.n	8007f2c <__hexdig_fun+0x1a>
 8007f28:	3847      	subs	r0, #71	@ 0x47
 8007f2a:	e7f7      	b.n	8007f1c <__hexdig_fun+0xa>
 8007f2c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007f30:	2b05      	cmp	r3, #5
 8007f32:	d801      	bhi.n	8007f38 <__hexdig_fun+0x26>
 8007f34:	3827      	subs	r0, #39	@ 0x27
 8007f36:	e7f1      	b.n	8007f1c <__hexdig_fun+0xa>
 8007f38:	2000      	movs	r0, #0
 8007f3a:	4770      	bx	lr

08007f3c <__gethex>:
 8007f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f40:	468a      	mov	sl, r1
 8007f42:	4690      	mov	r8, r2
 8007f44:	b085      	sub	sp, #20
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	680b      	ldr	r3, [r1, #0]
 8007f4a:	9001      	str	r0, [sp, #4]
 8007f4c:	1c9c      	adds	r4, r3, #2
 8007f4e:	46a1      	mov	r9, r4
 8007f50:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007f54:	2830      	cmp	r0, #48	@ 0x30
 8007f56:	d0fa      	beq.n	8007f4e <__gethex+0x12>
 8007f58:	eba9 0303 	sub.w	r3, r9, r3
 8007f5c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007f60:	f7ff ffd7 	bl	8007f12 <__hexdig_fun>
 8007f64:	4605      	mov	r5, r0
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d168      	bne.n	800803c <__gethex+0x100>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4648      	mov	r0, r9
 8007f6e:	499f      	ldr	r1, [pc, #636]	@ (80081ec <__gethex+0x2b0>)
 8007f70:	f7ff ff37 	bl	8007de2 <strncmp>
 8007f74:	4607      	mov	r7, r0
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d167      	bne.n	800804a <__gethex+0x10e>
 8007f7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007f7e:	4626      	mov	r6, r4
 8007f80:	f7ff ffc7 	bl	8007f12 <__hexdig_fun>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d062      	beq.n	800804e <__gethex+0x112>
 8007f88:	4623      	mov	r3, r4
 8007f8a:	7818      	ldrb	r0, [r3, #0]
 8007f8c:	4699      	mov	r9, r3
 8007f8e:	2830      	cmp	r0, #48	@ 0x30
 8007f90:	f103 0301 	add.w	r3, r3, #1
 8007f94:	d0f9      	beq.n	8007f8a <__gethex+0x4e>
 8007f96:	f7ff ffbc 	bl	8007f12 <__hexdig_fun>
 8007f9a:	fab0 f580 	clz	r5, r0
 8007f9e:	f04f 0b01 	mov.w	fp, #1
 8007fa2:	096d      	lsrs	r5, r5, #5
 8007fa4:	464a      	mov	r2, r9
 8007fa6:	4616      	mov	r6, r2
 8007fa8:	7830      	ldrb	r0, [r6, #0]
 8007faa:	3201      	adds	r2, #1
 8007fac:	f7ff ffb1 	bl	8007f12 <__hexdig_fun>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d1f8      	bne.n	8007fa6 <__gethex+0x6a>
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	498c      	ldr	r1, [pc, #560]	@ (80081ec <__gethex+0x2b0>)
 8007fba:	f7ff ff12 	bl	8007de2 <strncmp>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d13f      	bne.n	8008042 <__gethex+0x106>
 8007fc2:	b944      	cbnz	r4, 8007fd6 <__gethex+0x9a>
 8007fc4:	1c74      	adds	r4, r6, #1
 8007fc6:	4622      	mov	r2, r4
 8007fc8:	4616      	mov	r6, r2
 8007fca:	7830      	ldrb	r0, [r6, #0]
 8007fcc:	3201      	adds	r2, #1
 8007fce:	f7ff ffa0 	bl	8007f12 <__hexdig_fun>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d1f8      	bne.n	8007fc8 <__gethex+0x8c>
 8007fd6:	1ba4      	subs	r4, r4, r6
 8007fd8:	00a7      	lsls	r7, r4, #2
 8007fda:	7833      	ldrb	r3, [r6, #0]
 8007fdc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007fe0:	2b50      	cmp	r3, #80	@ 0x50
 8007fe2:	d13e      	bne.n	8008062 <__gethex+0x126>
 8007fe4:	7873      	ldrb	r3, [r6, #1]
 8007fe6:	2b2b      	cmp	r3, #43	@ 0x2b
 8007fe8:	d033      	beq.n	8008052 <__gethex+0x116>
 8007fea:	2b2d      	cmp	r3, #45	@ 0x2d
 8007fec:	d034      	beq.n	8008058 <__gethex+0x11c>
 8007fee:	2400      	movs	r4, #0
 8007ff0:	1c71      	adds	r1, r6, #1
 8007ff2:	7808      	ldrb	r0, [r1, #0]
 8007ff4:	f7ff ff8d 	bl	8007f12 <__hexdig_fun>
 8007ff8:	1e43      	subs	r3, r0, #1
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b18      	cmp	r3, #24
 8007ffe:	d830      	bhi.n	8008062 <__gethex+0x126>
 8008000:	f1a0 0210 	sub.w	r2, r0, #16
 8008004:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008008:	f7ff ff83 	bl	8007f12 <__hexdig_fun>
 800800c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008010:	fa5f fc8c 	uxtb.w	ip, ip
 8008014:	f1bc 0f18 	cmp.w	ip, #24
 8008018:	f04f 030a 	mov.w	r3, #10
 800801c:	d91e      	bls.n	800805c <__gethex+0x120>
 800801e:	b104      	cbz	r4, 8008022 <__gethex+0xe6>
 8008020:	4252      	negs	r2, r2
 8008022:	4417      	add	r7, r2
 8008024:	f8ca 1000 	str.w	r1, [sl]
 8008028:	b1ed      	cbz	r5, 8008066 <__gethex+0x12a>
 800802a:	f1bb 0f00 	cmp.w	fp, #0
 800802e:	bf0c      	ite	eq
 8008030:	2506      	moveq	r5, #6
 8008032:	2500      	movne	r5, #0
 8008034:	4628      	mov	r0, r5
 8008036:	b005      	add	sp, #20
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	2500      	movs	r5, #0
 800803e:	462c      	mov	r4, r5
 8008040:	e7b0      	b.n	8007fa4 <__gethex+0x68>
 8008042:	2c00      	cmp	r4, #0
 8008044:	d1c7      	bne.n	8007fd6 <__gethex+0x9a>
 8008046:	4627      	mov	r7, r4
 8008048:	e7c7      	b.n	8007fda <__gethex+0x9e>
 800804a:	464e      	mov	r6, r9
 800804c:	462f      	mov	r7, r5
 800804e:	2501      	movs	r5, #1
 8008050:	e7c3      	b.n	8007fda <__gethex+0x9e>
 8008052:	2400      	movs	r4, #0
 8008054:	1cb1      	adds	r1, r6, #2
 8008056:	e7cc      	b.n	8007ff2 <__gethex+0xb6>
 8008058:	2401      	movs	r4, #1
 800805a:	e7fb      	b.n	8008054 <__gethex+0x118>
 800805c:	fb03 0002 	mla	r0, r3, r2, r0
 8008060:	e7ce      	b.n	8008000 <__gethex+0xc4>
 8008062:	4631      	mov	r1, r6
 8008064:	e7de      	b.n	8008024 <__gethex+0xe8>
 8008066:	4629      	mov	r1, r5
 8008068:	eba6 0309 	sub.w	r3, r6, r9
 800806c:	3b01      	subs	r3, #1
 800806e:	2b07      	cmp	r3, #7
 8008070:	dc0a      	bgt.n	8008088 <__gethex+0x14c>
 8008072:	9801      	ldr	r0, [sp, #4]
 8008074:	f000 fa46 	bl	8008504 <_Balloc>
 8008078:	4604      	mov	r4, r0
 800807a:	b940      	cbnz	r0, 800808e <__gethex+0x152>
 800807c:	4602      	mov	r2, r0
 800807e:	21e4      	movs	r1, #228	@ 0xe4
 8008080:	4b5b      	ldr	r3, [pc, #364]	@ (80081f0 <__gethex+0x2b4>)
 8008082:	485c      	ldr	r0, [pc, #368]	@ (80081f4 <__gethex+0x2b8>)
 8008084:	f000 ff90 	bl	8008fa8 <__assert_func>
 8008088:	3101      	adds	r1, #1
 800808a:	105b      	asrs	r3, r3, #1
 800808c:	e7ef      	b.n	800806e <__gethex+0x132>
 800808e:	2300      	movs	r3, #0
 8008090:	f100 0a14 	add.w	sl, r0, #20
 8008094:	4655      	mov	r5, sl
 8008096:	469b      	mov	fp, r3
 8008098:	45b1      	cmp	r9, r6
 800809a:	d337      	bcc.n	800810c <__gethex+0x1d0>
 800809c:	f845 bb04 	str.w	fp, [r5], #4
 80080a0:	eba5 050a 	sub.w	r5, r5, sl
 80080a4:	10ad      	asrs	r5, r5, #2
 80080a6:	6125      	str	r5, [r4, #16]
 80080a8:	4658      	mov	r0, fp
 80080aa:	f000 fb1d 	bl	80086e8 <__hi0bits>
 80080ae:	016d      	lsls	r5, r5, #5
 80080b0:	f8d8 6000 	ldr.w	r6, [r8]
 80080b4:	1a2d      	subs	r5, r5, r0
 80080b6:	42b5      	cmp	r5, r6
 80080b8:	dd54      	ble.n	8008164 <__gethex+0x228>
 80080ba:	1bad      	subs	r5, r5, r6
 80080bc:	4629      	mov	r1, r5
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 fea5 	bl	8008e0e <__any_on>
 80080c4:	4681      	mov	r9, r0
 80080c6:	b178      	cbz	r0, 80080e8 <__gethex+0x1ac>
 80080c8:	f04f 0901 	mov.w	r9, #1
 80080cc:	1e6b      	subs	r3, r5, #1
 80080ce:	1159      	asrs	r1, r3, #5
 80080d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80080d4:	f003 021f 	and.w	r2, r3, #31
 80080d8:	fa09 f202 	lsl.w	r2, r9, r2
 80080dc:	420a      	tst	r2, r1
 80080de:	d003      	beq.n	80080e8 <__gethex+0x1ac>
 80080e0:	454b      	cmp	r3, r9
 80080e2:	dc36      	bgt.n	8008152 <__gethex+0x216>
 80080e4:	f04f 0902 	mov.w	r9, #2
 80080e8:	4629      	mov	r1, r5
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7ff febe 	bl	8007e6c <rshift>
 80080f0:	442f      	add	r7, r5
 80080f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080f6:	42bb      	cmp	r3, r7
 80080f8:	da42      	bge.n	8008180 <__gethex+0x244>
 80080fa:	4621      	mov	r1, r4
 80080fc:	9801      	ldr	r0, [sp, #4]
 80080fe:	f000 fa41 	bl	8008584 <_Bfree>
 8008102:	2300      	movs	r3, #0
 8008104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008106:	25a3      	movs	r5, #163	@ 0xa3
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	e793      	b.n	8008034 <__gethex+0xf8>
 800810c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008110:	2a2e      	cmp	r2, #46	@ 0x2e
 8008112:	d012      	beq.n	800813a <__gethex+0x1fe>
 8008114:	2b20      	cmp	r3, #32
 8008116:	d104      	bne.n	8008122 <__gethex+0x1e6>
 8008118:	f845 bb04 	str.w	fp, [r5], #4
 800811c:	f04f 0b00 	mov.w	fp, #0
 8008120:	465b      	mov	r3, fp
 8008122:	7830      	ldrb	r0, [r6, #0]
 8008124:	9303      	str	r3, [sp, #12]
 8008126:	f7ff fef4 	bl	8007f12 <__hexdig_fun>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	f000 000f 	and.w	r0, r0, #15
 8008130:	4098      	lsls	r0, r3
 8008132:	ea4b 0b00 	orr.w	fp, fp, r0
 8008136:	3304      	adds	r3, #4
 8008138:	e7ae      	b.n	8008098 <__gethex+0x15c>
 800813a:	45b1      	cmp	r9, r6
 800813c:	d8ea      	bhi.n	8008114 <__gethex+0x1d8>
 800813e:	2201      	movs	r2, #1
 8008140:	4630      	mov	r0, r6
 8008142:	492a      	ldr	r1, [pc, #168]	@ (80081ec <__gethex+0x2b0>)
 8008144:	9303      	str	r3, [sp, #12]
 8008146:	f7ff fe4c 	bl	8007de2 <strncmp>
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	2800      	cmp	r0, #0
 800814e:	d1e1      	bne.n	8008114 <__gethex+0x1d8>
 8008150:	e7a2      	b.n	8008098 <__gethex+0x15c>
 8008152:	4620      	mov	r0, r4
 8008154:	1ea9      	subs	r1, r5, #2
 8008156:	f000 fe5a 	bl	8008e0e <__any_on>
 800815a:	2800      	cmp	r0, #0
 800815c:	d0c2      	beq.n	80080e4 <__gethex+0x1a8>
 800815e:	f04f 0903 	mov.w	r9, #3
 8008162:	e7c1      	b.n	80080e8 <__gethex+0x1ac>
 8008164:	da09      	bge.n	800817a <__gethex+0x23e>
 8008166:	1b75      	subs	r5, r6, r5
 8008168:	4621      	mov	r1, r4
 800816a:	462a      	mov	r2, r5
 800816c:	9801      	ldr	r0, [sp, #4]
 800816e:	f000 fc1f 	bl	80089b0 <__lshift>
 8008172:	4604      	mov	r4, r0
 8008174:	1b7f      	subs	r7, r7, r5
 8008176:	f100 0a14 	add.w	sl, r0, #20
 800817a:	f04f 0900 	mov.w	r9, #0
 800817e:	e7b8      	b.n	80080f2 <__gethex+0x1b6>
 8008180:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008184:	42bd      	cmp	r5, r7
 8008186:	dd6f      	ble.n	8008268 <__gethex+0x32c>
 8008188:	1bed      	subs	r5, r5, r7
 800818a:	42ae      	cmp	r6, r5
 800818c:	dc34      	bgt.n	80081f8 <__gethex+0x2bc>
 800818e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d022      	beq.n	80081dc <__gethex+0x2a0>
 8008196:	2b03      	cmp	r3, #3
 8008198:	d024      	beq.n	80081e4 <__gethex+0x2a8>
 800819a:	2b01      	cmp	r3, #1
 800819c:	d115      	bne.n	80081ca <__gethex+0x28e>
 800819e:	42ae      	cmp	r6, r5
 80081a0:	d113      	bne.n	80081ca <__gethex+0x28e>
 80081a2:	2e01      	cmp	r6, #1
 80081a4:	d10b      	bne.n	80081be <__gethex+0x282>
 80081a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081aa:	9a02      	ldr	r2, [sp, #8]
 80081ac:	2562      	movs	r5, #98	@ 0x62
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	2301      	movs	r3, #1
 80081b2:	6123      	str	r3, [r4, #16]
 80081b4:	f8ca 3000 	str.w	r3, [sl]
 80081b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ba:	601c      	str	r4, [r3, #0]
 80081bc:	e73a      	b.n	8008034 <__gethex+0xf8>
 80081be:	4620      	mov	r0, r4
 80081c0:	1e71      	subs	r1, r6, #1
 80081c2:	f000 fe24 	bl	8008e0e <__any_on>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d1ed      	bne.n	80081a6 <__gethex+0x26a>
 80081ca:	4621      	mov	r1, r4
 80081cc:	9801      	ldr	r0, [sp, #4]
 80081ce:	f000 f9d9 	bl	8008584 <_Bfree>
 80081d2:	2300      	movs	r3, #0
 80081d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081d6:	2550      	movs	r5, #80	@ 0x50
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	e72b      	b.n	8008034 <__gethex+0xf8>
 80081dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1f3      	bne.n	80081ca <__gethex+0x28e>
 80081e2:	e7e0      	b.n	80081a6 <__gethex+0x26a>
 80081e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1dd      	bne.n	80081a6 <__gethex+0x26a>
 80081ea:	e7ee      	b.n	80081ca <__gethex+0x28e>
 80081ec:	0800963b 	.word	0x0800963b
 80081f0:	080097f7 	.word	0x080097f7
 80081f4:	08009808 	.word	0x08009808
 80081f8:	1e6f      	subs	r7, r5, #1
 80081fa:	f1b9 0f00 	cmp.w	r9, #0
 80081fe:	d130      	bne.n	8008262 <__gethex+0x326>
 8008200:	b127      	cbz	r7, 800820c <__gethex+0x2d0>
 8008202:	4639      	mov	r1, r7
 8008204:	4620      	mov	r0, r4
 8008206:	f000 fe02 	bl	8008e0e <__any_on>
 800820a:	4681      	mov	r9, r0
 800820c:	2301      	movs	r3, #1
 800820e:	4629      	mov	r1, r5
 8008210:	1b76      	subs	r6, r6, r5
 8008212:	2502      	movs	r5, #2
 8008214:	117a      	asrs	r2, r7, #5
 8008216:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800821a:	f007 071f 	and.w	r7, r7, #31
 800821e:	40bb      	lsls	r3, r7
 8008220:	4213      	tst	r3, r2
 8008222:	4620      	mov	r0, r4
 8008224:	bf18      	it	ne
 8008226:	f049 0902 	orrne.w	r9, r9, #2
 800822a:	f7ff fe1f 	bl	8007e6c <rshift>
 800822e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008232:	f1b9 0f00 	cmp.w	r9, #0
 8008236:	d047      	beq.n	80082c8 <__gethex+0x38c>
 8008238:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800823c:	2b02      	cmp	r3, #2
 800823e:	d015      	beq.n	800826c <__gethex+0x330>
 8008240:	2b03      	cmp	r3, #3
 8008242:	d017      	beq.n	8008274 <__gethex+0x338>
 8008244:	2b01      	cmp	r3, #1
 8008246:	d109      	bne.n	800825c <__gethex+0x320>
 8008248:	f019 0f02 	tst.w	r9, #2
 800824c:	d006      	beq.n	800825c <__gethex+0x320>
 800824e:	f8da 3000 	ldr.w	r3, [sl]
 8008252:	ea49 0903 	orr.w	r9, r9, r3
 8008256:	f019 0f01 	tst.w	r9, #1
 800825a:	d10e      	bne.n	800827a <__gethex+0x33e>
 800825c:	f045 0510 	orr.w	r5, r5, #16
 8008260:	e032      	b.n	80082c8 <__gethex+0x38c>
 8008262:	f04f 0901 	mov.w	r9, #1
 8008266:	e7d1      	b.n	800820c <__gethex+0x2d0>
 8008268:	2501      	movs	r5, #1
 800826a:	e7e2      	b.n	8008232 <__gethex+0x2f6>
 800826c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800826e:	f1c3 0301 	rsb	r3, r3, #1
 8008272:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f0      	beq.n	800825c <__gethex+0x320>
 800827a:	f04f 0c00 	mov.w	ip, #0
 800827e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008282:	f104 0314 	add.w	r3, r4, #20
 8008286:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800828a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800828e:	4618      	mov	r0, r3
 8008290:	f853 2b04 	ldr.w	r2, [r3], #4
 8008294:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008298:	d01b      	beq.n	80082d2 <__gethex+0x396>
 800829a:	3201      	adds	r2, #1
 800829c:	6002      	str	r2, [r0, #0]
 800829e:	2d02      	cmp	r5, #2
 80082a0:	f104 0314 	add.w	r3, r4, #20
 80082a4:	d13c      	bne.n	8008320 <__gethex+0x3e4>
 80082a6:	f8d8 2000 	ldr.w	r2, [r8]
 80082aa:	3a01      	subs	r2, #1
 80082ac:	42b2      	cmp	r2, r6
 80082ae:	d109      	bne.n	80082c4 <__gethex+0x388>
 80082b0:	2201      	movs	r2, #1
 80082b2:	1171      	asrs	r1, r6, #5
 80082b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082b8:	f006 061f 	and.w	r6, r6, #31
 80082bc:	fa02 f606 	lsl.w	r6, r2, r6
 80082c0:	421e      	tst	r6, r3
 80082c2:	d13a      	bne.n	800833a <__gethex+0x3fe>
 80082c4:	f045 0520 	orr.w	r5, r5, #32
 80082c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ca:	601c      	str	r4, [r3, #0]
 80082cc:	9b02      	ldr	r3, [sp, #8]
 80082ce:	601f      	str	r7, [r3, #0]
 80082d0:	e6b0      	b.n	8008034 <__gethex+0xf8>
 80082d2:	4299      	cmp	r1, r3
 80082d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80082d8:	d8d9      	bhi.n	800828e <__gethex+0x352>
 80082da:	68a3      	ldr	r3, [r4, #8]
 80082dc:	459b      	cmp	fp, r3
 80082de:	db17      	blt.n	8008310 <__gethex+0x3d4>
 80082e0:	6861      	ldr	r1, [r4, #4]
 80082e2:	9801      	ldr	r0, [sp, #4]
 80082e4:	3101      	adds	r1, #1
 80082e6:	f000 f90d 	bl	8008504 <_Balloc>
 80082ea:	4681      	mov	r9, r0
 80082ec:	b918      	cbnz	r0, 80082f6 <__gethex+0x3ba>
 80082ee:	4602      	mov	r2, r0
 80082f0:	2184      	movs	r1, #132	@ 0x84
 80082f2:	4b19      	ldr	r3, [pc, #100]	@ (8008358 <__gethex+0x41c>)
 80082f4:	e6c5      	b.n	8008082 <__gethex+0x146>
 80082f6:	6922      	ldr	r2, [r4, #16]
 80082f8:	f104 010c 	add.w	r1, r4, #12
 80082fc:	3202      	adds	r2, #2
 80082fe:	0092      	lsls	r2, r2, #2
 8008300:	300c      	adds	r0, #12
 8008302:	f7ff fd9f 	bl	8007e44 <memcpy>
 8008306:	4621      	mov	r1, r4
 8008308:	9801      	ldr	r0, [sp, #4]
 800830a:	f000 f93b 	bl	8008584 <_Bfree>
 800830e:	464c      	mov	r4, r9
 8008310:	6923      	ldr	r3, [r4, #16]
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	6122      	str	r2, [r4, #16]
 8008316:	2201      	movs	r2, #1
 8008318:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800831c:	615a      	str	r2, [r3, #20]
 800831e:	e7be      	b.n	800829e <__gethex+0x362>
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	455a      	cmp	r2, fp
 8008324:	dd0b      	ble.n	800833e <__gethex+0x402>
 8008326:	2101      	movs	r1, #1
 8008328:	4620      	mov	r0, r4
 800832a:	f7ff fd9f 	bl	8007e6c <rshift>
 800832e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008332:	3701      	adds	r7, #1
 8008334:	42bb      	cmp	r3, r7
 8008336:	f6ff aee0 	blt.w	80080fa <__gethex+0x1be>
 800833a:	2501      	movs	r5, #1
 800833c:	e7c2      	b.n	80082c4 <__gethex+0x388>
 800833e:	f016 061f 	ands.w	r6, r6, #31
 8008342:	d0fa      	beq.n	800833a <__gethex+0x3fe>
 8008344:	4453      	add	r3, sl
 8008346:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800834a:	f000 f9cd 	bl	80086e8 <__hi0bits>
 800834e:	f1c6 0620 	rsb	r6, r6, #32
 8008352:	42b0      	cmp	r0, r6
 8008354:	dbe7      	blt.n	8008326 <__gethex+0x3ea>
 8008356:	e7f0      	b.n	800833a <__gethex+0x3fe>
 8008358:	080097f7 	.word	0x080097f7

0800835c <L_shift>:
 800835c:	f1c2 0208 	rsb	r2, r2, #8
 8008360:	0092      	lsls	r2, r2, #2
 8008362:	b570      	push	{r4, r5, r6, lr}
 8008364:	f1c2 0620 	rsb	r6, r2, #32
 8008368:	6843      	ldr	r3, [r0, #4]
 800836a:	6804      	ldr	r4, [r0, #0]
 800836c:	fa03 f506 	lsl.w	r5, r3, r6
 8008370:	432c      	orrs	r4, r5
 8008372:	40d3      	lsrs	r3, r2
 8008374:	6004      	str	r4, [r0, #0]
 8008376:	f840 3f04 	str.w	r3, [r0, #4]!
 800837a:	4288      	cmp	r0, r1
 800837c:	d3f4      	bcc.n	8008368 <L_shift+0xc>
 800837e:	bd70      	pop	{r4, r5, r6, pc}

08008380 <__match>:
 8008380:	b530      	push	{r4, r5, lr}
 8008382:	6803      	ldr	r3, [r0, #0]
 8008384:	3301      	adds	r3, #1
 8008386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800838a:	b914      	cbnz	r4, 8008392 <__match+0x12>
 800838c:	6003      	str	r3, [r0, #0]
 800838e:	2001      	movs	r0, #1
 8008390:	bd30      	pop	{r4, r5, pc}
 8008392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008396:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800839a:	2d19      	cmp	r5, #25
 800839c:	bf98      	it	ls
 800839e:	3220      	addls	r2, #32
 80083a0:	42a2      	cmp	r2, r4
 80083a2:	d0f0      	beq.n	8008386 <__match+0x6>
 80083a4:	2000      	movs	r0, #0
 80083a6:	e7f3      	b.n	8008390 <__match+0x10>

080083a8 <__hexnan>:
 80083a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	2500      	movs	r5, #0
 80083ae:	680b      	ldr	r3, [r1, #0]
 80083b0:	4682      	mov	sl, r0
 80083b2:	115e      	asrs	r6, r3, #5
 80083b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80083b8:	f013 031f 	ands.w	r3, r3, #31
 80083bc:	bf18      	it	ne
 80083be:	3604      	addne	r6, #4
 80083c0:	1f37      	subs	r7, r6, #4
 80083c2:	4690      	mov	r8, r2
 80083c4:	46b9      	mov	r9, r7
 80083c6:	463c      	mov	r4, r7
 80083c8:	46ab      	mov	fp, r5
 80083ca:	b087      	sub	sp, #28
 80083cc:	6801      	ldr	r1, [r0, #0]
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	f846 5c04 	str.w	r5, [r6, #-4]
 80083d4:	9502      	str	r5, [sp, #8]
 80083d6:	784a      	ldrb	r2, [r1, #1]
 80083d8:	1c4b      	adds	r3, r1, #1
 80083da:	9303      	str	r3, [sp, #12]
 80083dc:	b342      	cbz	r2, 8008430 <__hexnan+0x88>
 80083de:	4610      	mov	r0, r2
 80083e0:	9105      	str	r1, [sp, #20]
 80083e2:	9204      	str	r2, [sp, #16]
 80083e4:	f7ff fd95 	bl	8007f12 <__hexdig_fun>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d151      	bne.n	8008490 <__hexnan+0xe8>
 80083ec:	9a04      	ldr	r2, [sp, #16]
 80083ee:	9905      	ldr	r1, [sp, #20]
 80083f0:	2a20      	cmp	r2, #32
 80083f2:	d818      	bhi.n	8008426 <__hexnan+0x7e>
 80083f4:	9b02      	ldr	r3, [sp, #8]
 80083f6:	459b      	cmp	fp, r3
 80083f8:	dd13      	ble.n	8008422 <__hexnan+0x7a>
 80083fa:	454c      	cmp	r4, r9
 80083fc:	d206      	bcs.n	800840c <__hexnan+0x64>
 80083fe:	2d07      	cmp	r5, #7
 8008400:	dc04      	bgt.n	800840c <__hexnan+0x64>
 8008402:	462a      	mov	r2, r5
 8008404:	4649      	mov	r1, r9
 8008406:	4620      	mov	r0, r4
 8008408:	f7ff ffa8 	bl	800835c <L_shift>
 800840c:	4544      	cmp	r4, r8
 800840e:	d952      	bls.n	80084b6 <__hexnan+0x10e>
 8008410:	2300      	movs	r3, #0
 8008412:	f1a4 0904 	sub.w	r9, r4, #4
 8008416:	f844 3c04 	str.w	r3, [r4, #-4]
 800841a:	461d      	mov	r5, r3
 800841c:	464c      	mov	r4, r9
 800841e:	f8cd b008 	str.w	fp, [sp, #8]
 8008422:	9903      	ldr	r1, [sp, #12]
 8008424:	e7d7      	b.n	80083d6 <__hexnan+0x2e>
 8008426:	2a29      	cmp	r2, #41	@ 0x29
 8008428:	d157      	bne.n	80084da <__hexnan+0x132>
 800842a:	3102      	adds	r1, #2
 800842c:	f8ca 1000 	str.w	r1, [sl]
 8008430:	f1bb 0f00 	cmp.w	fp, #0
 8008434:	d051      	beq.n	80084da <__hexnan+0x132>
 8008436:	454c      	cmp	r4, r9
 8008438:	d206      	bcs.n	8008448 <__hexnan+0xa0>
 800843a:	2d07      	cmp	r5, #7
 800843c:	dc04      	bgt.n	8008448 <__hexnan+0xa0>
 800843e:	462a      	mov	r2, r5
 8008440:	4649      	mov	r1, r9
 8008442:	4620      	mov	r0, r4
 8008444:	f7ff ff8a 	bl	800835c <L_shift>
 8008448:	4544      	cmp	r4, r8
 800844a:	d936      	bls.n	80084ba <__hexnan+0x112>
 800844c:	4623      	mov	r3, r4
 800844e:	f1a8 0204 	sub.w	r2, r8, #4
 8008452:	f853 1b04 	ldr.w	r1, [r3], #4
 8008456:	429f      	cmp	r7, r3
 8008458:	f842 1f04 	str.w	r1, [r2, #4]!
 800845c:	d2f9      	bcs.n	8008452 <__hexnan+0xaa>
 800845e:	1b3b      	subs	r3, r7, r4
 8008460:	f023 0303 	bic.w	r3, r3, #3
 8008464:	3304      	adds	r3, #4
 8008466:	3401      	adds	r4, #1
 8008468:	3e03      	subs	r6, #3
 800846a:	42b4      	cmp	r4, r6
 800846c:	bf88      	it	hi
 800846e:	2304      	movhi	r3, #4
 8008470:	2200      	movs	r2, #0
 8008472:	4443      	add	r3, r8
 8008474:	f843 2b04 	str.w	r2, [r3], #4
 8008478:	429f      	cmp	r7, r3
 800847a:	d2fb      	bcs.n	8008474 <__hexnan+0xcc>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	b91b      	cbnz	r3, 8008488 <__hexnan+0xe0>
 8008480:	4547      	cmp	r7, r8
 8008482:	d128      	bne.n	80084d6 <__hexnan+0x12e>
 8008484:	2301      	movs	r3, #1
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	2005      	movs	r0, #5
 800848a:	b007      	add	sp, #28
 800848c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008490:	3501      	adds	r5, #1
 8008492:	2d08      	cmp	r5, #8
 8008494:	f10b 0b01 	add.w	fp, fp, #1
 8008498:	dd06      	ble.n	80084a8 <__hexnan+0x100>
 800849a:	4544      	cmp	r4, r8
 800849c:	d9c1      	bls.n	8008422 <__hexnan+0x7a>
 800849e:	2300      	movs	r3, #0
 80084a0:	2501      	movs	r5, #1
 80084a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80084a6:	3c04      	subs	r4, #4
 80084a8:	6822      	ldr	r2, [r4, #0]
 80084aa:	f000 000f 	and.w	r0, r0, #15
 80084ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80084b2:	6020      	str	r0, [r4, #0]
 80084b4:	e7b5      	b.n	8008422 <__hexnan+0x7a>
 80084b6:	2508      	movs	r5, #8
 80084b8:	e7b3      	b.n	8008422 <__hexnan+0x7a>
 80084ba:	9b01      	ldr	r3, [sp, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0dd      	beq.n	800847c <__hexnan+0xd4>
 80084c0:	f04f 32ff 	mov.w	r2, #4294967295
 80084c4:	f1c3 0320 	rsb	r3, r3, #32
 80084c8:	40da      	lsrs	r2, r3
 80084ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80084ce:	4013      	ands	r3, r2
 80084d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80084d4:	e7d2      	b.n	800847c <__hexnan+0xd4>
 80084d6:	3f04      	subs	r7, #4
 80084d8:	e7d0      	b.n	800847c <__hexnan+0xd4>
 80084da:	2004      	movs	r0, #4
 80084dc:	e7d5      	b.n	800848a <__hexnan+0xe2>

080084de <__ascii_mbtowc>:
 80084de:	b082      	sub	sp, #8
 80084e0:	b901      	cbnz	r1, 80084e4 <__ascii_mbtowc+0x6>
 80084e2:	a901      	add	r1, sp, #4
 80084e4:	b142      	cbz	r2, 80084f8 <__ascii_mbtowc+0x1a>
 80084e6:	b14b      	cbz	r3, 80084fc <__ascii_mbtowc+0x1e>
 80084e8:	7813      	ldrb	r3, [r2, #0]
 80084ea:	600b      	str	r3, [r1, #0]
 80084ec:	7812      	ldrb	r2, [r2, #0]
 80084ee:	1e10      	subs	r0, r2, #0
 80084f0:	bf18      	it	ne
 80084f2:	2001      	movne	r0, #1
 80084f4:	b002      	add	sp, #8
 80084f6:	4770      	bx	lr
 80084f8:	4610      	mov	r0, r2
 80084fa:	e7fb      	b.n	80084f4 <__ascii_mbtowc+0x16>
 80084fc:	f06f 0001 	mvn.w	r0, #1
 8008500:	e7f8      	b.n	80084f4 <__ascii_mbtowc+0x16>
	...

08008504 <_Balloc>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	69c6      	ldr	r6, [r0, #28]
 8008508:	4604      	mov	r4, r0
 800850a:	460d      	mov	r5, r1
 800850c:	b976      	cbnz	r6, 800852c <_Balloc+0x28>
 800850e:	2010      	movs	r0, #16
 8008510:	f000 fd7c 	bl	800900c <malloc>
 8008514:	4602      	mov	r2, r0
 8008516:	61e0      	str	r0, [r4, #28]
 8008518:	b920      	cbnz	r0, 8008524 <_Balloc+0x20>
 800851a:	216b      	movs	r1, #107	@ 0x6b
 800851c:	4b17      	ldr	r3, [pc, #92]	@ (800857c <_Balloc+0x78>)
 800851e:	4818      	ldr	r0, [pc, #96]	@ (8008580 <_Balloc+0x7c>)
 8008520:	f000 fd42 	bl	8008fa8 <__assert_func>
 8008524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008528:	6006      	str	r6, [r0, #0]
 800852a:	60c6      	str	r6, [r0, #12]
 800852c:	69e6      	ldr	r6, [r4, #28]
 800852e:	68f3      	ldr	r3, [r6, #12]
 8008530:	b183      	cbz	r3, 8008554 <_Balloc+0x50>
 8008532:	69e3      	ldr	r3, [r4, #28]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800853a:	b9b8      	cbnz	r0, 800856c <_Balloc+0x68>
 800853c:	2101      	movs	r1, #1
 800853e:	fa01 f605 	lsl.w	r6, r1, r5
 8008542:	1d72      	adds	r2, r6, #5
 8008544:	4620      	mov	r0, r4
 8008546:	0092      	lsls	r2, r2, #2
 8008548:	f000 fd4c 	bl	8008fe4 <_calloc_r>
 800854c:	b160      	cbz	r0, 8008568 <_Balloc+0x64>
 800854e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008552:	e00e      	b.n	8008572 <_Balloc+0x6e>
 8008554:	2221      	movs	r2, #33	@ 0x21
 8008556:	2104      	movs	r1, #4
 8008558:	4620      	mov	r0, r4
 800855a:	f000 fd43 	bl	8008fe4 <_calloc_r>
 800855e:	69e3      	ldr	r3, [r4, #28]
 8008560:	60f0      	str	r0, [r6, #12]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e4      	bne.n	8008532 <_Balloc+0x2e>
 8008568:	2000      	movs	r0, #0
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	6802      	ldr	r2, [r0, #0]
 800856e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008572:	2300      	movs	r3, #0
 8008574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008578:	e7f7      	b.n	800856a <_Balloc+0x66>
 800857a:	bf00      	nop
 800857c:	08009868 	.word	0x08009868
 8008580:	0800987f 	.word	0x0800987f

08008584 <_Bfree>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	69c6      	ldr	r6, [r0, #28]
 8008588:	4605      	mov	r5, r0
 800858a:	460c      	mov	r4, r1
 800858c:	b976      	cbnz	r6, 80085ac <_Bfree+0x28>
 800858e:	2010      	movs	r0, #16
 8008590:	f000 fd3c 	bl	800900c <malloc>
 8008594:	4602      	mov	r2, r0
 8008596:	61e8      	str	r0, [r5, #28]
 8008598:	b920      	cbnz	r0, 80085a4 <_Bfree+0x20>
 800859a:	218f      	movs	r1, #143	@ 0x8f
 800859c:	4b08      	ldr	r3, [pc, #32]	@ (80085c0 <_Bfree+0x3c>)
 800859e:	4809      	ldr	r0, [pc, #36]	@ (80085c4 <_Bfree+0x40>)
 80085a0:	f000 fd02 	bl	8008fa8 <__assert_func>
 80085a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085a8:	6006      	str	r6, [r0, #0]
 80085aa:	60c6      	str	r6, [r0, #12]
 80085ac:	b13c      	cbz	r4, 80085be <_Bfree+0x3a>
 80085ae:	69eb      	ldr	r3, [r5, #28]
 80085b0:	6862      	ldr	r2, [r4, #4]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085b8:	6021      	str	r1, [r4, #0]
 80085ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	08009868 	.word	0x08009868
 80085c4:	0800987f 	.word	0x0800987f

080085c8 <__multadd>:
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	4607      	mov	r7, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	461e      	mov	r6, r3
 80085d2:	2000      	movs	r0, #0
 80085d4:	690d      	ldr	r5, [r1, #16]
 80085d6:	f101 0c14 	add.w	ip, r1, #20
 80085da:	f8dc 3000 	ldr.w	r3, [ip]
 80085de:	3001      	adds	r0, #1
 80085e0:	b299      	uxth	r1, r3
 80085e2:	fb02 6101 	mla	r1, r2, r1, r6
 80085e6:	0c1e      	lsrs	r6, r3, #16
 80085e8:	0c0b      	lsrs	r3, r1, #16
 80085ea:	fb02 3306 	mla	r3, r2, r6, r3
 80085ee:	b289      	uxth	r1, r1
 80085f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085f4:	4285      	cmp	r5, r0
 80085f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085fa:	f84c 1b04 	str.w	r1, [ip], #4
 80085fe:	dcec      	bgt.n	80085da <__multadd+0x12>
 8008600:	b30e      	cbz	r6, 8008646 <__multadd+0x7e>
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	42ab      	cmp	r3, r5
 8008606:	dc19      	bgt.n	800863c <__multadd+0x74>
 8008608:	6861      	ldr	r1, [r4, #4]
 800860a:	4638      	mov	r0, r7
 800860c:	3101      	adds	r1, #1
 800860e:	f7ff ff79 	bl	8008504 <_Balloc>
 8008612:	4680      	mov	r8, r0
 8008614:	b928      	cbnz	r0, 8008622 <__multadd+0x5a>
 8008616:	4602      	mov	r2, r0
 8008618:	21ba      	movs	r1, #186	@ 0xba
 800861a:	4b0c      	ldr	r3, [pc, #48]	@ (800864c <__multadd+0x84>)
 800861c:	480c      	ldr	r0, [pc, #48]	@ (8008650 <__multadd+0x88>)
 800861e:	f000 fcc3 	bl	8008fa8 <__assert_func>
 8008622:	6922      	ldr	r2, [r4, #16]
 8008624:	f104 010c 	add.w	r1, r4, #12
 8008628:	3202      	adds	r2, #2
 800862a:	0092      	lsls	r2, r2, #2
 800862c:	300c      	adds	r0, #12
 800862e:	f7ff fc09 	bl	8007e44 <memcpy>
 8008632:	4621      	mov	r1, r4
 8008634:	4638      	mov	r0, r7
 8008636:	f7ff ffa5 	bl	8008584 <_Bfree>
 800863a:	4644      	mov	r4, r8
 800863c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008640:	3501      	adds	r5, #1
 8008642:	615e      	str	r6, [r3, #20]
 8008644:	6125      	str	r5, [r4, #16]
 8008646:	4620      	mov	r0, r4
 8008648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800864c:	080097f7 	.word	0x080097f7
 8008650:	0800987f 	.word	0x0800987f

08008654 <__s2b>:
 8008654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008658:	4615      	mov	r5, r2
 800865a:	2209      	movs	r2, #9
 800865c:	461f      	mov	r7, r3
 800865e:	3308      	adds	r3, #8
 8008660:	460c      	mov	r4, r1
 8008662:	fb93 f3f2 	sdiv	r3, r3, r2
 8008666:	4606      	mov	r6, r0
 8008668:	2201      	movs	r2, #1
 800866a:	2100      	movs	r1, #0
 800866c:	429a      	cmp	r2, r3
 800866e:	db09      	blt.n	8008684 <__s2b+0x30>
 8008670:	4630      	mov	r0, r6
 8008672:	f7ff ff47 	bl	8008504 <_Balloc>
 8008676:	b940      	cbnz	r0, 800868a <__s2b+0x36>
 8008678:	4602      	mov	r2, r0
 800867a:	21d3      	movs	r1, #211	@ 0xd3
 800867c:	4b18      	ldr	r3, [pc, #96]	@ (80086e0 <__s2b+0x8c>)
 800867e:	4819      	ldr	r0, [pc, #100]	@ (80086e4 <__s2b+0x90>)
 8008680:	f000 fc92 	bl	8008fa8 <__assert_func>
 8008684:	0052      	lsls	r2, r2, #1
 8008686:	3101      	adds	r1, #1
 8008688:	e7f0      	b.n	800866c <__s2b+0x18>
 800868a:	9b08      	ldr	r3, [sp, #32]
 800868c:	2d09      	cmp	r5, #9
 800868e:	6143      	str	r3, [r0, #20]
 8008690:	f04f 0301 	mov.w	r3, #1
 8008694:	6103      	str	r3, [r0, #16]
 8008696:	dd16      	ble.n	80086c6 <__s2b+0x72>
 8008698:	f104 0909 	add.w	r9, r4, #9
 800869c:	46c8      	mov	r8, r9
 800869e:	442c      	add	r4, r5
 80086a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80086a4:	4601      	mov	r1, r0
 80086a6:	220a      	movs	r2, #10
 80086a8:	4630      	mov	r0, r6
 80086aa:	3b30      	subs	r3, #48	@ 0x30
 80086ac:	f7ff ff8c 	bl	80085c8 <__multadd>
 80086b0:	45a0      	cmp	r8, r4
 80086b2:	d1f5      	bne.n	80086a0 <__s2b+0x4c>
 80086b4:	f1a5 0408 	sub.w	r4, r5, #8
 80086b8:	444c      	add	r4, r9
 80086ba:	1b2d      	subs	r5, r5, r4
 80086bc:	1963      	adds	r3, r4, r5
 80086be:	42bb      	cmp	r3, r7
 80086c0:	db04      	blt.n	80086cc <__s2b+0x78>
 80086c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c6:	2509      	movs	r5, #9
 80086c8:	340a      	adds	r4, #10
 80086ca:	e7f6      	b.n	80086ba <__s2b+0x66>
 80086cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086d0:	4601      	mov	r1, r0
 80086d2:	220a      	movs	r2, #10
 80086d4:	4630      	mov	r0, r6
 80086d6:	3b30      	subs	r3, #48	@ 0x30
 80086d8:	f7ff ff76 	bl	80085c8 <__multadd>
 80086dc:	e7ee      	b.n	80086bc <__s2b+0x68>
 80086de:	bf00      	nop
 80086e0:	080097f7 	.word	0x080097f7
 80086e4:	0800987f 	.word	0x0800987f

080086e8 <__hi0bits>:
 80086e8:	4603      	mov	r3, r0
 80086ea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086ee:	bf3a      	itte	cc
 80086f0:	0403      	lslcc	r3, r0, #16
 80086f2:	2010      	movcc	r0, #16
 80086f4:	2000      	movcs	r0, #0
 80086f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086fa:	bf3c      	itt	cc
 80086fc:	021b      	lslcc	r3, r3, #8
 80086fe:	3008      	addcc	r0, #8
 8008700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008704:	bf3c      	itt	cc
 8008706:	011b      	lslcc	r3, r3, #4
 8008708:	3004      	addcc	r0, #4
 800870a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800870e:	bf3c      	itt	cc
 8008710:	009b      	lslcc	r3, r3, #2
 8008712:	3002      	addcc	r0, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	db05      	blt.n	8008724 <__hi0bits+0x3c>
 8008718:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800871c:	f100 0001 	add.w	r0, r0, #1
 8008720:	bf08      	it	eq
 8008722:	2020      	moveq	r0, #32
 8008724:	4770      	bx	lr

08008726 <__lo0bits>:
 8008726:	6803      	ldr	r3, [r0, #0]
 8008728:	4602      	mov	r2, r0
 800872a:	f013 0007 	ands.w	r0, r3, #7
 800872e:	d00b      	beq.n	8008748 <__lo0bits+0x22>
 8008730:	07d9      	lsls	r1, r3, #31
 8008732:	d421      	bmi.n	8008778 <__lo0bits+0x52>
 8008734:	0798      	lsls	r0, r3, #30
 8008736:	bf49      	itett	mi
 8008738:	085b      	lsrmi	r3, r3, #1
 800873a:	089b      	lsrpl	r3, r3, #2
 800873c:	2001      	movmi	r0, #1
 800873e:	6013      	strmi	r3, [r2, #0]
 8008740:	bf5c      	itt	pl
 8008742:	2002      	movpl	r0, #2
 8008744:	6013      	strpl	r3, [r2, #0]
 8008746:	4770      	bx	lr
 8008748:	b299      	uxth	r1, r3
 800874a:	b909      	cbnz	r1, 8008750 <__lo0bits+0x2a>
 800874c:	2010      	movs	r0, #16
 800874e:	0c1b      	lsrs	r3, r3, #16
 8008750:	b2d9      	uxtb	r1, r3
 8008752:	b909      	cbnz	r1, 8008758 <__lo0bits+0x32>
 8008754:	3008      	adds	r0, #8
 8008756:	0a1b      	lsrs	r3, r3, #8
 8008758:	0719      	lsls	r1, r3, #28
 800875a:	bf04      	itt	eq
 800875c:	091b      	lsreq	r3, r3, #4
 800875e:	3004      	addeq	r0, #4
 8008760:	0799      	lsls	r1, r3, #30
 8008762:	bf04      	itt	eq
 8008764:	089b      	lsreq	r3, r3, #2
 8008766:	3002      	addeq	r0, #2
 8008768:	07d9      	lsls	r1, r3, #31
 800876a:	d403      	bmi.n	8008774 <__lo0bits+0x4e>
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	f100 0001 	add.w	r0, r0, #1
 8008772:	d003      	beq.n	800877c <__lo0bits+0x56>
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	4770      	bx	lr
 8008778:	2000      	movs	r0, #0
 800877a:	4770      	bx	lr
 800877c:	2020      	movs	r0, #32
 800877e:	4770      	bx	lr

08008780 <__i2b>:
 8008780:	b510      	push	{r4, lr}
 8008782:	460c      	mov	r4, r1
 8008784:	2101      	movs	r1, #1
 8008786:	f7ff febd 	bl	8008504 <_Balloc>
 800878a:	4602      	mov	r2, r0
 800878c:	b928      	cbnz	r0, 800879a <__i2b+0x1a>
 800878e:	f240 1145 	movw	r1, #325	@ 0x145
 8008792:	4b04      	ldr	r3, [pc, #16]	@ (80087a4 <__i2b+0x24>)
 8008794:	4804      	ldr	r0, [pc, #16]	@ (80087a8 <__i2b+0x28>)
 8008796:	f000 fc07 	bl	8008fa8 <__assert_func>
 800879a:	2301      	movs	r3, #1
 800879c:	6144      	str	r4, [r0, #20]
 800879e:	6103      	str	r3, [r0, #16]
 80087a0:	bd10      	pop	{r4, pc}
 80087a2:	bf00      	nop
 80087a4:	080097f7 	.word	0x080097f7
 80087a8:	0800987f 	.word	0x0800987f

080087ac <__multiply>:
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	4614      	mov	r4, r2
 80087b2:	690a      	ldr	r2, [r1, #16]
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	460f      	mov	r7, r1
 80087b8:	429a      	cmp	r2, r3
 80087ba:	bfa2      	ittt	ge
 80087bc:	4623      	movge	r3, r4
 80087be:	460c      	movge	r4, r1
 80087c0:	461f      	movge	r7, r3
 80087c2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80087c6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	6861      	ldr	r1, [r4, #4]
 80087ce:	eb0a 0609 	add.w	r6, sl, r9
 80087d2:	42b3      	cmp	r3, r6
 80087d4:	b085      	sub	sp, #20
 80087d6:	bfb8      	it	lt
 80087d8:	3101      	addlt	r1, #1
 80087da:	f7ff fe93 	bl	8008504 <_Balloc>
 80087de:	b930      	cbnz	r0, 80087ee <__multiply+0x42>
 80087e0:	4602      	mov	r2, r0
 80087e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087e6:	4b43      	ldr	r3, [pc, #268]	@ (80088f4 <__multiply+0x148>)
 80087e8:	4843      	ldr	r0, [pc, #268]	@ (80088f8 <__multiply+0x14c>)
 80087ea:	f000 fbdd 	bl	8008fa8 <__assert_func>
 80087ee:	f100 0514 	add.w	r5, r0, #20
 80087f2:	462b      	mov	r3, r5
 80087f4:	2200      	movs	r2, #0
 80087f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087fa:	4543      	cmp	r3, r8
 80087fc:	d321      	bcc.n	8008842 <__multiply+0x96>
 80087fe:	f107 0114 	add.w	r1, r7, #20
 8008802:	f104 0214 	add.w	r2, r4, #20
 8008806:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800880a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800880e:	9302      	str	r3, [sp, #8]
 8008810:	1b13      	subs	r3, r2, r4
 8008812:	3b15      	subs	r3, #21
 8008814:	f023 0303 	bic.w	r3, r3, #3
 8008818:	3304      	adds	r3, #4
 800881a:	f104 0715 	add.w	r7, r4, #21
 800881e:	42ba      	cmp	r2, r7
 8008820:	bf38      	it	cc
 8008822:	2304      	movcc	r3, #4
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	9103      	str	r1, [sp, #12]
 800882a:	428b      	cmp	r3, r1
 800882c:	d80c      	bhi.n	8008848 <__multiply+0x9c>
 800882e:	2e00      	cmp	r6, #0
 8008830:	dd03      	ble.n	800883a <__multiply+0x8e>
 8008832:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008836:	2b00      	cmp	r3, #0
 8008838:	d05a      	beq.n	80088f0 <__multiply+0x144>
 800883a:	6106      	str	r6, [r0, #16]
 800883c:	b005      	add	sp, #20
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	f843 2b04 	str.w	r2, [r3], #4
 8008846:	e7d8      	b.n	80087fa <__multiply+0x4e>
 8008848:	f8b1 a000 	ldrh.w	sl, [r1]
 800884c:	f1ba 0f00 	cmp.w	sl, #0
 8008850:	d023      	beq.n	800889a <__multiply+0xee>
 8008852:	46a9      	mov	r9, r5
 8008854:	f04f 0c00 	mov.w	ip, #0
 8008858:	f104 0e14 	add.w	lr, r4, #20
 800885c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008860:	f8d9 3000 	ldr.w	r3, [r9]
 8008864:	fa1f fb87 	uxth.w	fp, r7
 8008868:	b29b      	uxth	r3, r3
 800886a:	fb0a 330b 	mla	r3, sl, fp, r3
 800886e:	4463      	add	r3, ip
 8008870:	f8d9 c000 	ldr.w	ip, [r9]
 8008874:	0c3f      	lsrs	r7, r7, #16
 8008876:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800887a:	fb0a c707 	mla	r7, sl, r7, ip
 800887e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008882:	b29b      	uxth	r3, r3
 8008884:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008888:	4572      	cmp	r2, lr
 800888a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800888e:	f849 3b04 	str.w	r3, [r9], #4
 8008892:	d8e3      	bhi.n	800885c <__multiply+0xb0>
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	f845 c003 	str.w	ip, [r5, r3]
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	3104      	adds	r1, #4
 800889e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80088a2:	f1b9 0f00 	cmp.w	r9, #0
 80088a6:	d021      	beq.n	80088ec <__multiply+0x140>
 80088a8:	46ae      	mov	lr, r5
 80088aa:	f04f 0a00 	mov.w	sl, #0
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	f104 0c14 	add.w	ip, r4, #20
 80088b4:	f8bc b000 	ldrh.w	fp, [ip]
 80088b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	fb09 770b 	mla	r7, r9, fp, r7
 80088c2:	4457      	add	r7, sl
 80088c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088c8:	f84e 3b04 	str.w	r3, [lr], #4
 80088cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088d4:	f8be 3000 	ldrh.w	r3, [lr]
 80088d8:	4562      	cmp	r2, ip
 80088da:	fb09 330a 	mla	r3, r9, sl, r3
 80088de:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088e6:	d8e5      	bhi.n	80088b4 <__multiply+0x108>
 80088e8:	9f01      	ldr	r7, [sp, #4]
 80088ea:	51eb      	str	r3, [r5, r7]
 80088ec:	3504      	adds	r5, #4
 80088ee:	e79a      	b.n	8008826 <__multiply+0x7a>
 80088f0:	3e01      	subs	r6, #1
 80088f2:	e79c      	b.n	800882e <__multiply+0x82>
 80088f4:	080097f7 	.word	0x080097f7
 80088f8:	0800987f 	.word	0x0800987f

080088fc <__pow5mult>:
 80088fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008900:	4615      	mov	r5, r2
 8008902:	f012 0203 	ands.w	r2, r2, #3
 8008906:	4607      	mov	r7, r0
 8008908:	460e      	mov	r6, r1
 800890a:	d007      	beq.n	800891c <__pow5mult+0x20>
 800890c:	4c25      	ldr	r4, [pc, #148]	@ (80089a4 <__pow5mult+0xa8>)
 800890e:	3a01      	subs	r2, #1
 8008910:	2300      	movs	r3, #0
 8008912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008916:	f7ff fe57 	bl	80085c8 <__multadd>
 800891a:	4606      	mov	r6, r0
 800891c:	10ad      	asrs	r5, r5, #2
 800891e:	d03d      	beq.n	800899c <__pow5mult+0xa0>
 8008920:	69fc      	ldr	r4, [r7, #28]
 8008922:	b97c      	cbnz	r4, 8008944 <__pow5mult+0x48>
 8008924:	2010      	movs	r0, #16
 8008926:	f000 fb71 	bl	800900c <malloc>
 800892a:	4602      	mov	r2, r0
 800892c:	61f8      	str	r0, [r7, #28]
 800892e:	b928      	cbnz	r0, 800893c <__pow5mult+0x40>
 8008930:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008934:	4b1c      	ldr	r3, [pc, #112]	@ (80089a8 <__pow5mult+0xac>)
 8008936:	481d      	ldr	r0, [pc, #116]	@ (80089ac <__pow5mult+0xb0>)
 8008938:	f000 fb36 	bl	8008fa8 <__assert_func>
 800893c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008940:	6004      	str	r4, [r0, #0]
 8008942:	60c4      	str	r4, [r0, #12]
 8008944:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008948:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800894c:	b94c      	cbnz	r4, 8008962 <__pow5mult+0x66>
 800894e:	f240 2171 	movw	r1, #625	@ 0x271
 8008952:	4638      	mov	r0, r7
 8008954:	f7ff ff14 	bl	8008780 <__i2b>
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008960:	6003      	str	r3, [r0, #0]
 8008962:	f04f 0900 	mov.w	r9, #0
 8008966:	07eb      	lsls	r3, r5, #31
 8008968:	d50a      	bpl.n	8008980 <__pow5mult+0x84>
 800896a:	4631      	mov	r1, r6
 800896c:	4622      	mov	r2, r4
 800896e:	4638      	mov	r0, r7
 8008970:	f7ff ff1c 	bl	80087ac <__multiply>
 8008974:	4680      	mov	r8, r0
 8008976:	4631      	mov	r1, r6
 8008978:	4638      	mov	r0, r7
 800897a:	f7ff fe03 	bl	8008584 <_Bfree>
 800897e:	4646      	mov	r6, r8
 8008980:	106d      	asrs	r5, r5, #1
 8008982:	d00b      	beq.n	800899c <__pow5mult+0xa0>
 8008984:	6820      	ldr	r0, [r4, #0]
 8008986:	b938      	cbnz	r0, 8008998 <__pow5mult+0x9c>
 8008988:	4622      	mov	r2, r4
 800898a:	4621      	mov	r1, r4
 800898c:	4638      	mov	r0, r7
 800898e:	f7ff ff0d 	bl	80087ac <__multiply>
 8008992:	6020      	str	r0, [r4, #0]
 8008994:	f8c0 9000 	str.w	r9, [r0]
 8008998:	4604      	mov	r4, r0
 800899a:	e7e4      	b.n	8008966 <__pow5mult+0x6a>
 800899c:	4630      	mov	r0, r6
 800899e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089a2:	bf00      	nop
 80089a4:	080098d8 	.word	0x080098d8
 80089a8:	08009868 	.word	0x08009868
 80089ac:	0800987f 	.word	0x0800987f

080089b0 <__lshift>:
 80089b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	460c      	mov	r4, r1
 80089b6:	4607      	mov	r7, r0
 80089b8:	4691      	mov	r9, r2
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	6849      	ldr	r1, [r1, #4]
 80089be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089c2:	68a3      	ldr	r3, [r4, #8]
 80089c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089c8:	f108 0601 	add.w	r6, r8, #1
 80089cc:	42b3      	cmp	r3, r6
 80089ce:	db0b      	blt.n	80089e8 <__lshift+0x38>
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff fd97 	bl	8008504 <_Balloc>
 80089d6:	4605      	mov	r5, r0
 80089d8:	b948      	cbnz	r0, 80089ee <__lshift+0x3e>
 80089da:	4602      	mov	r2, r0
 80089dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089e0:	4b27      	ldr	r3, [pc, #156]	@ (8008a80 <__lshift+0xd0>)
 80089e2:	4828      	ldr	r0, [pc, #160]	@ (8008a84 <__lshift+0xd4>)
 80089e4:	f000 fae0 	bl	8008fa8 <__assert_func>
 80089e8:	3101      	adds	r1, #1
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	e7ee      	b.n	80089cc <__lshift+0x1c>
 80089ee:	2300      	movs	r3, #0
 80089f0:	f100 0114 	add.w	r1, r0, #20
 80089f4:	f100 0210 	add.w	r2, r0, #16
 80089f8:	4618      	mov	r0, r3
 80089fa:	4553      	cmp	r3, sl
 80089fc:	db33      	blt.n	8008a66 <__lshift+0xb6>
 80089fe:	6920      	ldr	r0, [r4, #16]
 8008a00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a04:	f104 0314 	add.w	r3, r4, #20
 8008a08:	f019 091f 	ands.w	r9, r9, #31
 8008a0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a14:	d02b      	beq.n	8008a6e <__lshift+0xbe>
 8008a16:	468a      	mov	sl, r1
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	fa00 f009 	lsl.w	r0, r0, r9
 8008a24:	4310      	orrs	r0, r2
 8008a26:	f84a 0b04 	str.w	r0, [sl], #4
 8008a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2e:	459c      	cmp	ip, r3
 8008a30:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a34:	d8f3      	bhi.n	8008a1e <__lshift+0x6e>
 8008a36:	ebac 0304 	sub.w	r3, ip, r4
 8008a3a:	3b15      	subs	r3, #21
 8008a3c:	f023 0303 	bic.w	r3, r3, #3
 8008a40:	3304      	adds	r3, #4
 8008a42:	f104 0015 	add.w	r0, r4, #21
 8008a46:	4584      	cmp	ip, r0
 8008a48:	bf38      	it	cc
 8008a4a:	2304      	movcc	r3, #4
 8008a4c:	50ca      	str	r2, [r1, r3]
 8008a4e:	b10a      	cbz	r2, 8008a54 <__lshift+0xa4>
 8008a50:	f108 0602 	add.w	r6, r8, #2
 8008a54:	3e01      	subs	r6, #1
 8008a56:	4638      	mov	r0, r7
 8008a58:	4621      	mov	r1, r4
 8008a5a:	612e      	str	r6, [r5, #16]
 8008a5c:	f7ff fd92 	bl	8008584 <_Bfree>
 8008a60:	4628      	mov	r0, r5
 8008a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a66:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	e7c5      	b.n	80089fa <__lshift+0x4a>
 8008a6e:	3904      	subs	r1, #4
 8008a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a74:	459c      	cmp	ip, r3
 8008a76:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a7a:	d8f9      	bhi.n	8008a70 <__lshift+0xc0>
 8008a7c:	e7ea      	b.n	8008a54 <__lshift+0xa4>
 8008a7e:	bf00      	nop
 8008a80:	080097f7 	.word	0x080097f7
 8008a84:	0800987f 	.word	0x0800987f

08008a88 <__mcmp>:
 8008a88:	4603      	mov	r3, r0
 8008a8a:	690a      	ldr	r2, [r1, #16]
 8008a8c:	6900      	ldr	r0, [r0, #16]
 8008a8e:	b530      	push	{r4, r5, lr}
 8008a90:	1a80      	subs	r0, r0, r2
 8008a92:	d10e      	bne.n	8008ab2 <__mcmp+0x2a>
 8008a94:	3314      	adds	r3, #20
 8008a96:	3114      	adds	r1, #20
 8008a98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008aa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008aa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008aa8:	4295      	cmp	r5, r2
 8008aaa:	d003      	beq.n	8008ab4 <__mcmp+0x2c>
 8008aac:	d205      	bcs.n	8008aba <__mcmp+0x32>
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab2:	bd30      	pop	{r4, r5, pc}
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	d3f3      	bcc.n	8008aa0 <__mcmp+0x18>
 8008ab8:	e7fb      	b.n	8008ab2 <__mcmp+0x2a>
 8008aba:	2001      	movs	r0, #1
 8008abc:	e7f9      	b.n	8008ab2 <__mcmp+0x2a>
	...

08008ac0 <__mdiff>:
 8008ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	4689      	mov	r9, r1
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4648      	mov	r0, r9
 8008acc:	4614      	mov	r4, r2
 8008ace:	f7ff ffdb 	bl	8008a88 <__mcmp>
 8008ad2:	1e05      	subs	r5, r0, #0
 8008ad4:	d112      	bne.n	8008afc <__mdiff+0x3c>
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7ff fd13 	bl	8008504 <_Balloc>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	b928      	cbnz	r0, 8008aee <__mdiff+0x2e>
 8008ae2:	f240 2137 	movw	r1, #567	@ 0x237
 8008ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8008be0 <__mdiff+0x120>)
 8008ae8:	483e      	ldr	r0, [pc, #248]	@ (8008be4 <__mdiff+0x124>)
 8008aea:	f000 fa5d 	bl	8008fa8 <__assert_func>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008af4:	4610      	mov	r0, r2
 8008af6:	b003      	add	sp, #12
 8008af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afc:	bfbc      	itt	lt
 8008afe:	464b      	movlt	r3, r9
 8008b00:	46a1      	movlt	r9, r4
 8008b02:	4630      	mov	r0, r6
 8008b04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b08:	bfba      	itte	lt
 8008b0a:	461c      	movlt	r4, r3
 8008b0c:	2501      	movlt	r5, #1
 8008b0e:	2500      	movge	r5, #0
 8008b10:	f7ff fcf8 	bl	8008504 <_Balloc>
 8008b14:	4602      	mov	r2, r0
 8008b16:	b918      	cbnz	r0, 8008b20 <__mdiff+0x60>
 8008b18:	f240 2145 	movw	r1, #581	@ 0x245
 8008b1c:	4b30      	ldr	r3, [pc, #192]	@ (8008be0 <__mdiff+0x120>)
 8008b1e:	e7e3      	b.n	8008ae8 <__mdiff+0x28>
 8008b20:	f100 0b14 	add.w	fp, r0, #20
 8008b24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b28:	f109 0310 	add.w	r3, r9, #16
 8008b2c:	60c5      	str	r5, [r0, #12]
 8008b2e:	f04f 0c00 	mov.w	ip, #0
 8008b32:	f109 0514 	add.w	r5, r9, #20
 8008b36:	46d9      	mov	r9, fp
 8008b38:	6926      	ldr	r6, [r4, #16]
 8008b3a:	f104 0e14 	add.w	lr, r4, #20
 8008b3e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b42:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	9b01      	ldr	r3, [sp, #4]
 8008b4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b52:	b281      	uxth	r1, r0
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	fa1f f38a 	uxth.w	r3, sl
 8008b5a:	1a5b      	subs	r3, r3, r1
 8008b5c:	0c00      	lsrs	r0, r0, #16
 8008b5e:	4463      	add	r3, ip
 8008b60:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b64:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b6e:	4576      	cmp	r6, lr
 8008b70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b74:	f849 3b04 	str.w	r3, [r9], #4
 8008b78:	d8e6      	bhi.n	8008b48 <__mdiff+0x88>
 8008b7a:	1b33      	subs	r3, r6, r4
 8008b7c:	3b15      	subs	r3, #21
 8008b7e:	f023 0303 	bic.w	r3, r3, #3
 8008b82:	3415      	adds	r4, #21
 8008b84:	3304      	adds	r3, #4
 8008b86:	42a6      	cmp	r6, r4
 8008b88:	bf38      	it	cc
 8008b8a:	2304      	movcc	r3, #4
 8008b8c:	441d      	add	r5, r3
 8008b8e:	445b      	add	r3, fp
 8008b90:	461e      	mov	r6, r3
 8008b92:	462c      	mov	r4, r5
 8008b94:	4544      	cmp	r4, r8
 8008b96:	d30e      	bcc.n	8008bb6 <__mdiff+0xf6>
 8008b98:	f108 0103 	add.w	r1, r8, #3
 8008b9c:	1b49      	subs	r1, r1, r5
 8008b9e:	f021 0103 	bic.w	r1, r1, #3
 8008ba2:	3d03      	subs	r5, #3
 8008ba4:	45a8      	cmp	r8, r5
 8008ba6:	bf38      	it	cc
 8008ba8:	2100      	movcc	r1, #0
 8008baa:	440b      	add	r3, r1
 8008bac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bb0:	b199      	cbz	r1, 8008bda <__mdiff+0x11a>
 8008bb2:	6117      	str	r7, [r2, #16]
 8008bb4:	e79e      	b.n	8008af4 <__mdiff+0x34>
 8008bb6:	46e6      	mov	lr, ip
 8008bb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008bbc:	fa1f fc81 	uxth.w	ip, r1
 8008bc0:	44f4      	add	ip, lr
 8008bc2:	0c08      	lsrs	r0, r1, #16
 8008bc4:	4471      	add	r1, lr
 8008bc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008bca:	b289      	uxth	r1, r1
 8008bcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bd4:	f846 1b04 	str.w	r1, [r6], #4
 8008bd8:	e7dc      	b.n	8008b94 <__mdiff+0xd4>
 8008bda:	3f01      	subs	r7, #1
 8008bdc:	e7e6      	b.n	8008bac <__mdiff+0xec>
 8008bde:	bf00      	nop
 8008be0:	080097f7 	.word	0x080097f7
 8008be4:	0800987f 	.word	0x0800987f

08008be8 <__ulp>:
 8008be8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c24 <__ulp+0x3c>)
 8008bea:	400b      	ands	r3, r1
 8008bec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dc08      	bgt.n	8008c06 <__ulp+0x1e>
 8008bf4:	425b      	negs	r3, r3
 8008bf6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008bfa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bfe:	da04      	bge.n	8008c0a <__ulp+0x22>
 8008c00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008c04:	4113      	asrs	r3, r2
 8008c06:	2200      	movs	r2, #0
 8008c08:	e008      	b.n	8008c1c <__ulp+0x34>
 8008c0a:	f1a2 0314 	sub.w	r3, r2, #20
 8008c0e:	2b1e      	cmp	r3, #30
 8008c10:	bfd6      	itet	le
 8008c12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008c16:	2201      	movgt	r2, #1
 8008c18:	40da      	lsrle	r2, r3
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	7ff00000 	.word	0x7ff00000

08008c28 <__b2d>:
 8008c28:	6902      	ldr	r2, [r0, #16]
 8008c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2c:	f100 0614 	add.w	r6, r0, #20
 8008c30:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008c34:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008c38:	4f1e      	ldr	r7, [pc, #120]	@ (8008cb4 <__b2d+0x8c>)
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f7ff fd54 	bl	80086e8 <__hi0bits>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f1c0 0020 	rsb	r0, r0, #32
 8008c46:	2b0a      	cmp	r3, #10
 8008c48:	f1a2 0504 	sub.w	r5, r2, #4
 8008c4c:	6008      	str	r0, [r1, #0]
 8008c4e:	dc12      	bgt.n	8008c76 <__b2d+0x4e>
 8008c50:	42ae      	cmp	r6, r5
 8008c52:	bf2c      	ite	cs
 8008c54:	2200      	movcs	r2, #0
 8008c56:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008c5a:	f1c3 0c0b 	rsb	ip, r3, #11
 8008c5e:	3315      	adds	r3, #21
 8008c60:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008c64:	fa04 f303 	lsl.w	r3, r4, r3
 8008c68:	fa22 f20c 	lsr.w	r2, r2, ip
 8008c6c:	ea4e 0107 	orr.w	r1, lr, r7
 8008c70:	431a      	orrs	r2, r3
 8008c72:	4610      	mov	r0, r2
 8008c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c76:	42ae      	cmp	r6, r5
 8008c78:	bf36      	itet	cc
 8008c7a:	f1a2 0508 	subcc.w	r5, r2, #8
 8008c7e:	2200      	movcs	r2, #0
 8008c80:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008c84:	3b0b      	subs	r3, #11
 8008c86:	d012      	beq.n	8008cae <__b2d+0x86>
 8008c88:	f1c3 0720 	rsb	r7, r3, #32
 8008c8c:	fa22 f107 	lsr.w	r1, r2, r7
 8008c90:	409c      	lsls	r4, r3
 8008c92:	430c      	orrs	r4, r1
 8008c94:	42b5      	cmp	r5, r6
 8008c96:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008c9a:	bf94      	ite	ls
 8008c9c:	2400      	movls	r4, #0
 8008c9e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008ca2:	409a      	lsls	r2, r3
 8008ca4:	40fc      	lsrs	r4, r7
 8008ca6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008caa:	4322      	orrs	r2, r4
 8008cac:	e7e1      	b.n	8008c72 <__b2d+0x4a>
 8008cae:	ea44 0107 	orr.w	r1, r4, r7
 8008cb2:	e7de      	b.n	8008c72 <__b2d+0x4a>
 8008cb4:	3ff00000 	.word	0x3ff00000

08008cb8 <__d2b>:
 8008cb8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	4690      	mov	r8, r2
 8008cc0:	4699      	mov	r9, r3
 8008cc2:	9e08      	ldr	r6, [sp, #32]
 8008cc4:	f7ff fc1e 	bl	8008504 <_Balloc>
 8008cc8:	4604      	mov	r4, r0
 8008cca:	b930      	cbnz	r0, 8008cda <__d2b+0x22>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	f240 310f 	movw	r1, #783	@ 0x30f
 8008cd2:	4b23      	ldr	r3, [pc, #140]	@ (8008d60 <__d2b+0xa8>)
 8008cd4:	4823      	ldr	r0, [pc, #140]	@ (8008d64 <__d2b+0xac>)
 8008cd6:	f000 f967 	bl	8008fa8 <__assert_func>
 8008cda:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ce2:	b10d      	cbz	r5, 8008ce8 <__d2b+0x30>
 8008ce4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	f1b8 0300 	subs.w	r3, r8, #0
 8008cee:	d024      	beq.n	8008d3a <__d2b+0x82>
 8008cf0:	4668      	mov	r0, sp
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	f7ff fd17 	bl	8008726 <__lo0bits>
 8008cf8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cfc:	b1d8      	cbz	r0, 8008d36 <__d2b+0x7e>
 8008cfe:	f1c0 0320 	rsb	r3, r0, #32
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	430b      	orrs	r3, r1
 8008d08:	40c2      	lsrs	r2, r0
 8008d0a:	6163      	str	r3, [r4, #20]
 8008d0c:	9201      	str	r2, [sp, #4]
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bf0c      	ite	eq
 8008d14:	2201      	moveq	r2, #1
 8008d16:	2202      	movne	r2, #2
 8008d18:	61a3      	str	r3, [r4, #24]
 8008d1a:	6122      	str	r2, [r4, #16]
 8008d1c:	b1ad      	cbz	r5, 8008d4a <__d2b+0x92>
 8008d1e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d22:	4405      	add	r5, r0
 8008d24:	6035      	str	r5, [r6, #0]
 8008d26:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d2c:	6018      	str	r0, [r3, #0]
 8008d2e:	4620      	mov	r0, r4
 8008d30:	b002      	add	sp, #8
 8008d32:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008d36:	6161      	str	r1, [r4, #20]
 8008d38:	e7e9      	b.n	8008d0e <__d2b+0x56>
 8008d3a:	a801      	add	r0, sp, #4
 8008d3c:	f7ff fcf3 	bl	8008726 <__lo0bits>
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	6163      	str	r3, [r4, #20]
 8008d46:	3020      	adds	r0, #32
 8008d48:	e7e7      	b.n	8008d1a <__d2b+0x62>
 8008d4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d52:	6030      	str	r0, [r6, #0]
 8008d54:	6918      	ldr	r0, [r3, #16]
 8008d56:	f7ff fcc7 	bl	80086e8 <__hi0bits>
 8008d5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d5e:	e7e4      	b.n	8008d2a <__d2b+0x72>
 8008d60:	080097f7 	.word	0x080097f7
 8008d64:	0800987f 	.word	0x0800987f

08008d68 <__ratio>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	b085      	sub	sp, #20
 8008d6e:	e9cd 1000 	strd	r1, r0, [sp]
 8008d72:	a902      	add	r1, sp, #8
 8008d74:	f7ff ff58 	bl	8008c28 <__b2d>
 8008d78:	468b      	mov	fp, r1
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	460f      	mov	r7, r1
 8008d7e:	9800      	ldr	r0, [sp, #0]
 8008d80:	a903      	add	r1, sp, #12
 8008d82:	f7ff ff51 	bl	8008c28 <__b2d>
 8008d86:	460d      	mov	r5, r1
 8008d88:	9b01      	ldr	r3, [sp, #4]
 8008d8a:	4689      	mov	r9, r1
 8008d8c:	6919      	ldr	r1, [r3, #16]
 8008d8e:	9b00      	ldr	r3, [sp, #0]
 8008d90:	4604      	mov	r4, r0
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	4630      	mov	r0, r6
 8008d96:	1ac9      	subs	r1, r1, r3
 8008d98:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bfcd      	iteet	gt
 8008da6:	463a      	movgt	r2, r7
 8008da8:	462a      	movle	r2, r5
 8008daa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008dae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008db2:	bfd8      	it	le
 8008db4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008db8:	464b      	mov	r3, r9
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4659      	mov	r1, fp
 8008dbe:	f7f7 fcb5 	bl	800072c <__aeabi_ddiv>
 8008dc2:	b005      	add	sp, #20
 8008dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dc8 <__copybits>:
 8008dc8:	3901      	subs	r1, #1
 8008dca:	b570      	push	{r4, r5, r6, lr}
 8008dcc:	1149      	asrs	r1, r1, #5
 8008dce:	6914      	ldr	r4, [r2, #16]
 8008dd0:	3101      	adds	r1, #1
 8008dd2:	f102 0314 	add.w	r3, r2, #20
 8008dd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008dda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dde:	1f05      	subs	r5, r0, #4
 8008de0:	42a3      	cmp	r3, r4
 8008de2:	d30c      	bcc.n	8008dfe <__copybits+0x36>
 8008de4:	1aa3      	subs	r3, r4, r2
 8008de6:	3b11      	subs	r3, #17
 8008de8:	f023 0303 	bic.w	r3, r3, #3
 8008dec:	3211      	adds	r2, #17
 8008dee:	42a2      	cmp	r2, r4
 8008df0:	bf88      	it	hi
 8008df2:	2300      	movhi	r3, #0
 8008df4:	4418      	add	r0, r3
 8008df6:	2300      	movs	r3, #0
 8008df8:	4288      	cmp	r0, r1
 8008dfa:	d305      	bcc.n	8008e08 <__copybits+0x40>
 8008dfc:	bd70      	pop	{r4, r5, r6, pc}
 8008dfe:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e02:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e06:	e7eb      	b.n	8008de0 <__copybits+0x18>
 8008e08:	f840 3b04 	str.w	r3, [r0], #4
 8008e0c:	e7f4      	b.n	8008df8 <__copybits+0x30>

08008e0e <__any_on>:
 8008e0e:	f100 0214 	add.w	r2, r0, #20
 8008e12:	6900      	ldr	r0, [r0, #16]
 8008e14:	114b      	asrs	r3, r1, #5
 8008e16:	4298      	cmp	r0, r3
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	db11      	blt.n	8008e40 <__any_on+0x32>
 8008e1c:	dd0a      	ble.n	8008e34 <__any_on+0x26>
 8008e1e:	f011 011f 	ands.w	r1, r1, #31
 8008e22:	d007      	beq.n	8008e34 <__any_on+0x26>
 8008e24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e28:	fa24 f001 	lsr.w	r0, r4, r1
 8008e2c:	fa00 f101 	lsl.w	r1, r0, r1
 8008e30:	428c      	cmp	r4, r1
 8008e32:	d10b      	bne.n	8008e4c <__any_on+0x3e>
 8008e34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d803      	bhi.n	8008e44 <__any_on+0x36>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	bd10      	pop	{r4, pc}
 8008e40:	4603      	mov	r3, r0
 8008e42:	e7f7      	b.n	8008e34 <__any_on+0x26>
 8008e44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e48:	2900      	cmp	r1, #0
 8008e4a:	d0f5      	beq.n	8008e38 <__any_on+0x2a>
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	e7f6      	b.n	8008e3e <__any_on+0x30>

08008e50 <_realloc_r>:
 8008e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e54:	4680      	mov	r8, r0
 8008e56:	4615      	mov	r5, r2
 8008e58:	460c      	mov	r4, r1
 8008e5a:	b921      	cbnz	r1, 8008e66 <_realloc_r+0x16>
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e62:	f7fd b983 	b.w	800616c <_malloc_r>
 8008e66:	b92a      	cbnz	r2, 8008e74 <_realloc_r+0x24>
 8008e68:	f7fd f916 	bl	8006098 <_free_r>
 8008e6c:	2400      	movs	r4, #0
 8008e6e:	4620      	mov	r0, r4
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	f000 f8d2 	bl	800901c <_malloc_usable_size_r>
 8008e78:	4285      	cmp	r5, r0
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	d802      	bhi.n	8008e84 <_realloc_r+0x34>
 8008e7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e82:	d8f4      	bhi.n	8008e6e <_realloc_r+0x1e>
 8008e84:	4629      	mov	r1, r5
 8008e86:	4640      	mov	r0, r8
 8008e88:	f7fd f970 	bl	800616c <_malloc_r>
 8008e8c:	4607      	mov	r7, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d0ec      	beq.n	8008e6c <_realloc_r+0x1c>
 8008e92:	42b5      	cmp	r5, r6
 8008e94:	462a      	mov	r2, r5
 8008e96:	4621      	mov	r1, r4
 8008e98:	bf28      	it	cs
 8008e9a:	4632      	movcs	r2, r6
 8008e9c:	f7fe ffd2 	bl	8007e44 <memcpy>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	f7fd f8f8 	bl	8006098 <_free_r>
 8008ea8:	463c      	mov	r4, r7
 8008eaa:	e7e0      	b.n	8008e6e <_realloc_r+0x1e>

08008eac <_strtoul_l.constprop.0>:
 8008eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008eb0:	4686      	mov	lr, r0
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	4e33      	ldr	r6, [pc, #204]	@ (8008f84 <_strtoul_l.constprop.0+0xd8>)
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ebc:	5d37      	ldrb	r7, [r6, r4]
 8008ebe:	f017 0708 	ands.w	r7, r7, #8
 8008ec2:	d1f8      	bne.n	8008eb6 <_strtoul_l.constprop.0+0xa>
 8008ec4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ec6:	d12f      	bne.n	8008f28 <_strtoul_l.constprop.0+0x7c>
 8008ec8:	2701      	movs	r7, #1
 8008eca:	782c      	ldrb	r4, [r5, #0]
 8008ecc:	1c85      	adds	r5, r0, #2
 8008ece:	f033 0010 	bics.w	r0, r3, #16
 8008ed2:	d109      	bne.n	8008ee8 <_strtoul_l.constprop.0+0x3c>
 8008ed4:	2c30      	cmp	r4, #48	@ 0x30
 8008ed6:	d12c      	bne.n	8008f32 <_strtoul_l.constprop.0+0x86>
 8008ed8:	7828      	ldrb	r0, [r5, #0]
 8008eda:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008ede:	2858      	cmp	r0, #88	@ 0x58
 8008ee0:	d127      	bne.n	8008f32 <_strtoul_l.constprop.0+0x86>
 8008ee2:	2310      	movs	r3, #16
 8008ee4:	786c      	ldrb	r4, [r5, #1]
 8008ee6:	3502      	adds	r5, #2
 8008ee8:	f04f 38ff 	mov.w	r8, #4294967295
 8008eec:	fbb8 f8f3 	udiv	r8, r8, r3
 8008ef0:	2600      	movs	r6, #0
 8008ef2:	fb03 f908 	mul.w	r9, r3, r8
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	ea6f 0909 	mvn.w	r9, r9
 8008efc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008f00:	f1bc 0f09 	cmp.w	ip, #9
 8008f04:	d81c      	bhi.n	8008f40 <_strtoul_l.constprop.0+0x94>
 8008f06:	4664      	mov	r4, ip
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	dd2a      	ble.n	8008f62 <_strtoul_l.constprop.0+0xb6>
 8008f0c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008f10:	d007      	beq.n	8008f22 <_strtoul_l.constprop.0+0x76>
 8008f12:	4580      	cmp	r8, r0
 8008f14:	d322      	bcc.n	8008f5c <_strtoul_l.constprop.0+0xb0>
 8008f16:	d101      	bne.n	8008f1c <_strtoul_l.constprop.0+0x70>
 8008f18:	45a1      	cmp	r9, r4
 8008f1a:	db1f      	blt.n	8008f5c <_strtoul_l.constprop.0+0xb0>
 8008f1c:	2601      	movs	r6, #1
 8008f1e:	fb00 4003 	mla	r0, r0, r3, r4
 8008f22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f26:	e7e9      	b.n	8008efc <_strtoul_l.constprop.0+0x50>
 8008f28:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f2a:	bf04      	itt	eq
 8008f2c:	782c      	ldrbeq	r4, [r5, #0]
 8008f2e:	1c85      	addeq	r5, r0, #2
 8008f30:	e7cd      	b.n	8008ece <_strtoul_l.constprop.0+0x22>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1d8      	bne.n	8008ee8 <_strtoul_l.constprop.0+0x3c>
 8008f36:	2c30      	cmp	r4, #48	@ 0x30
 8008f38:	bf0c      	ite	eq
 8008f3a:	2308      	moveq	r3, #8
 8008f3c:	230a      	movne	r3, #10
 8008f3e:	e7d3      	b.n	8008ee8 <_strtoul_l.constprop.0+0x3c>
 8008f40:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008f44:	f1bc 0f19 	cmp.w	ip, #25
 8008f48:	d801      	bhi.n	8008f4e <_strtoul_l.constprop.0+0xa2>
 8008f4a:	3c37      	subs	r4, #55	@ 0x37
 8008f4c:	e7dc      	b.n	8008f08 <_strtoul_l.constprop.0+0x5c>
 8008f4e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008f52:	f1bc 0f19 	cmp.w	ip, #25
 8008f56:	d804      	bhi.n	8008f62 <_strtoul_l.constprop.0+0xb6>
 8008f58:	3c57      	subs	r4, #87	@ 0x57
 8008f5a:	e7d5      	b.n	8008f08 <_strtoul_l.constprop.0+0x5c>
 8008f5c:	f04f 36ff 	mov.w	r6, #4294967295
 8008f60:	e7df      	b.n	8008f22 <_strtoul_l.constprop.0+0x76>
 8008f62:	1c73      	adds	r3, r6, #1
 8008f64:	d106      	bne.n	8008f74 <_strtoul_l.constprop.0+0xc8>
 8008f66:	2322      	movs	r3, #34	@ 0x22
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f8ce 3000 	str.w	r3, [lr]
 8008f6e:	b932      	cbnz	r2, 8008f7e <_strtoul_l.constprop.0+0xd2>
 8008f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f74:	b107      	cbz	r7, 8008f78 <_strtoul_l.constprop.0+0xcc>
 8008f76:	4240      	negs	r0, r0
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	d0f9      	beq.n	8008f70 <_strtoul_l.constprop.0+0xc4>
 8008f7c:	b106      	cbz	r6, 8008f80 <_strtoul_l.constprop.0+0xd4>
 8008f7e:	1e69      	subs	r1, r5, #1
 8008f80:	6011      	str	r1, [r2, #0]
 8008f82:	e7f5      	b.n	8008f70 <_strtoul_l.constprop.0+0xc4>
 8008f84:	080096a1 	.word	0x080096a1

08008f88 <_strtoul_r>:
 8008f88:	f7ff bf90 	b.w	8008eac <_strtoul_l.constprop.0>

08008f8c <__ascii_wctomb>:
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	4608      	mov	r0, r1
 8008f90:	b141      	cbz	r1, 8008fa4 <__ascii_wctomb+0x18>
 8008f92:	2aff      	cmp	r2, #255	@ 0xff
 8008f94:	d904      	bls.n	8008fa0 <__ascii_wctomb+0x14>
 8008f96:	228a      	movs	r2, #138	@ 0x8a
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	4770      	bx	lr
 8008fa0:	2001      	movs	r0, #1
 8008fa2:	700a      	strb	r2, [r1, #0]
 8008fa4:	4770      	bx	lr
	...

08008fa8 <__assert_func>:
 8008fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008faa:	4614      	mov	r4, r2
 8008fac:	461a      	mov	r2, r3
 8008fae:	4b09      	ldr	r3, [pc, #36]	@ (8008fd4 <__assert_func+0x2c>)
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68d8      	ldr	r0, [r3, #12]
 8008fb6:	b954      	cbnz	r4, 8008fce <__assert_func+0x26>
 8008fb8:	4b07      	ldr	r3, [pc, #28]	@ (8008fd8 <__assert_func+0x30>)
 8008fba:	461c      	mov	r4, r3
 8008fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fc0:	9100      	str	r1, [sp, #0]
 8008fc2:	462b      	mov	r3, r5
 8008fc4:	4905      	ldr	r1, [pc, #20]	@ (8008fdc <__assert_func+0x34>)
 8008fc6:	f000 f831 	bl	800902c <fiprintf>
 8008fca:	f000 f841 	bl	8009050 <abort>
 8008fce:	4b04      	ldr	r3, [pc, #16]	@ (8008fe0 <__assert_func+0x38>)
 8008fd0:	e7f4      	b.n	8008fbc <__assert_func+0x14>
 8008fd2:	bf00      	nop
 8008fd4:	20000028 	.word	0x20000028
 8008fd8:	08009a13 	.word	0x08009a13
 8008fdc:	080099e5 	.word	0x080099e5
 8008fe0:	080099d8 	.word	0x080099d8

08008fe4 <_calloc_r>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	fba1 5402 	umull	r5, r4, r1, r2
 8008fea:	b93c      	cbnz	r4, 8008ffc <_calloc_r+0x18>
 8008fec:	4629      	mov	r1, r5
 8008fee:	f7fd f8bd 	bl	800616c <_malloc_r>
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	b928      	cbnz	r0, 8009002 <_calloc_r+0x1e>
 8008ff6:	2600      	movs	r6, #0
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}
 8008ffc:	220c      	movs	r2, #12
 8008ffe:	6002      	str	r2, [r0, #0]
 8009000:	e7f9      	b.n	8008ff6 <_calloc_r+0x12>
 8009002:	462a      	mov	r2, r5
 8009004:	4621      	mov	r1, r4
 8009006:	f7fc ffc6 	bl	8005f96 <memset>
 800900a:	e7f5      	b.n	8008ff8 <_calloc_r+0x14>

0800900c <malloc>:
 800900c:	4b02      	ldr	r3, [pc, #8]	@ (8009018 <malloc+0xc>)
 800900e:	4601      	mov	r1, r0
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	f7fd b8ab 	b.w	800616c <_malloc_r>
 8009016:	bf00      	nop
 8009018:	20000028 	.word	0x20000028

0800901c <_malloc_usable_size_r>:
 800901c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009020:	1f18      	subs	r0, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfbc      	itt	lt
 8009026:	580b      	ldrlt	r3, [r1, r0]
 8009028:	18c0      	addlt	r0, r0, r3
 800902a:	4770      	bx	lr

0800902c <fiprintf>:
 800902c:	b40e      	push	{r1, r2, r3}
 800902e:	b503      	push	{r0, r1, lr}
 8009030:	4601      	mov	r1, r0
 8009032:	ab03      	add	r3, sp, #12
 8009034:	4805      	ldr	r0, [pc, #20]	@ (800904c <fiprintf+0x20>)
 8009036:	f853 2b04 	ldr.w	r2, [r3], #4
 800903a:	6800      	ldr	r0, [r0, #0]
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	f000 f835 	bl	80090ac <_vfiprintf_r>
 8009042:	b002      	add	sp, #8
 8009044:	f85d eb04 	ldr.w	lr, [sp], #4
 8009048:	b003      	add	sp, #12
 800904a:	4770      	bx	lr
 800904c:	20000028 	.word	0x20000028

08009050 <abort>:
 8009050:	2006      	movs	r0, #6
 8009052:	b508      	push	{r3, lr}
 8009054:	f000 f9fe 	bl	8009454 <raise>
 8009058:	2001      	movs	r0, #1
 800905a:	f7f9 f86c 	bl	8002136 <_exit>

0800905e <__sfputc_r>:
 800905e:	6893      	ldr	r3, [r2, #8]
 8009060:	b410      	push	{r4}
 8009062:	3b01      	subs	r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	6093      	str	r3, [r2, #8]
 8009068:	da07      	bge.n	800907a <__sfputc_r+0x1c>
 800906a:	6994      	ldr	r4, [r2, #24]
 800906c:	42a3      	cmp	r3, r4
 800906e:	db01      	blt.n	8009074 <__sfputc_r+0x16>
 8009070:	290a      	cmp	r1, #10
 8009072:	d102      	bne.n	800907a <__sfputc_r+0x1c>
 8009074:	bc10      	pop	{r4}
 8009076:	f000 b931 	b.w	80092dc <__swbuf_r>
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	1c58      	adds	r0, r3, #1
 800907e:	6010      	str	r0, [r2, #0]
 8009080:	7019      	strb	r1, [r3, #0]
 8009082:	4608      	mov	r0, r1
 8009084:	bc10      	pop	{r4}
 8009086:	4770      	bx	lr

08009088 <__sfputs_r>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	4606      	mov	r6, r0
 800908c:	460f      	mov	r7, r1
 800908e:	4614      	mov	r4, r2
 8009090:	18d5      	adds	r5, r2, r3
 8009092:	42ac      	cmp	r4, r5
 8009094:	d101      	bne.n	800909a <__sfputs_r+0x12>
 8009096:	2000      	movs	r0, #0
 8009098:	e007      	b.n	80090aa <__sfputs_r+0x22>
 800909a:	463a      	mov	r2, r7
 800909c:	4630      	mov	r0, r6
 800909e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a2:	f7ff ffdc 	bl	800905e <__sfputc_r>
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	d1f3      	bne.n	8009092 <__sfputs_r+0xa>
 80090aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090ac <_vfiprintf_r>:
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	460d      	mov	r5, r1
 80090b2:	4614      	mov	r4, r2
 80090b4:	4698      	mov	r8, r3
 80090b6:	4606      	mov	r6, r0
 80090b8:	b09d      	sub	sp, #116	@ 0x74
 80090ba:	b118      	cbz	r0, 80090c4 <_vfiprintf_r+0x18>
 80090bc:	6a03      	ldr	r3, [r0, #32]
 80090be:	b90b      	cbnz	r3, 80090c4 <_vfiprintf_r+0x18>
 80090c0:	f7fc fea4 	bl	8005e0c <__sinit>
 80090c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090c6:	07d9      	lsls	r1, r3, #31
 80090c8:	d405      	bmi.n	80090d6 <_vfiprintf_r+0x2a>
 80090ca:	89ab      	ldrh	r3, [r5, #12]
 80090cc:	059a      	lsls	r2, r3, #22
 80090ce:	d402      	bmi.n	80090d6 <_vfiprintf_r+0x2a>
 80090d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090d2:	f7fc ffda 	bl	800608a <__retarget_lock_acquire_recursive>
 80090d6:	89ab      	ldrh	r3, [r5, #12]
 80090d8:	071b      	lsls	r3, r3, #28
 80090da:	d501      	bpl.n	80090e0 <_vfiprintf_r+0x34>
 80090dc:	692b      	ldr	r3, [r5, #16]
 80090de:	b99b      	cbnz	r3, 8009108 <_vfiprintf_r+0x5c>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4630      	mov	r0, r6
 80090e4:	f000 f938 	bl	8009358 <__swsetup_r>
 80090e8:	b170      	cbz	r0, 8009108 <_vfiprintf_r+0x5c>
 80090ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090ec:	07dc      	lsls	r4, r3, #31
 80090ee:	d504      	bpl.n	80090fa <_vfiprintf_r+0x4e>
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	b01d      	add	sp, #116	@ 0x74
 80090f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fa:	89ab      	ldrh	r3, [r5, #12]
 80090fc:	0598      	lsls	r0, r3, #22
 80090fe:	d4f7      	bmi.n	80090f0 <_vfiprintf_r+0x44>
 8009100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009102:	f7fc ffc3 	bl	800608c <__retarget_lock_release_recursive>
 8009106:	e7f3      	b.n	80090f0 <_vfiprintf_r+0x44>
 8009108:	2300      	movs	r3, #0
 800910a:	9309      	str	r3, [sp, #36]	@ 0x24
 800910c:	2320      	movs	r3, #32
 800910e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009112:	2330      	movs	r3, #48	@ 0x30
 8009114:	f04f 0901 	mov.w	r9, #1
 8009118:	f8cd 800c 	str.w	r8, [sp, #12]
 800911c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80092c8 <_vfiprintf_r+0x21c>
 8009120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009124:	4623      	mov	r3, r4
 8009126:	469a      	mov	sl, r3
 8009128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800912c:	b10a      	cbz	r2, 8009132 <_vfiprintf_r+0x86>
 800912e:	2a25      	cmp	r2, #37	@ 0x25
 8009130:	d1f9      	bne.n	8009126 <_vfiprintf_r+0x7a>
 8009132:	ebba 0b04 	subs.w	fp, sl, r4
 8009136:	d00b      	beq.n	8009150 <_vfiprintf_r+0xa4>
 8009138:	465b      	mov	r3, fp
 800913a:	4622      	mov	r2, r4
 800913c:	4629      	mov	r1, r5
 800913e:	4630      	mov	r0, r6
 8009140:	f7ff ffa2 	bl	8009088 <__sfputs_r>
 8009144:	3001      	adds	r0, #1
 8009146:	f000 80a7 	beq.w	8009298 <_vfiprintf_r+0x1ec>
 800914a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800914c:	445a      	add	r2, fp
 800914e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009150:	f89a 3000 	ldrb.w	r3, [sl]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 809f 	beq.w	8009298 <_vfiprintf_r+0x1ec>
 800915a:	2300      	movs	r3, #0
 800915c:	f04f 32ff 	mov.w	r2, #4294967295
 8009160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009164:	f10a 0a01 	add.w	sl, sl, #1
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009170:	931a      	str	r3, [sp, #104]	@ 0x68
 8009172:	4654      	mov	r4, sl
 8009174:	2205      	movs	r2, #5
 8009176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917a:	4853      	ldr	r0, [pc, #332]	@ (80092c8 <_vfiprintf_r+0x21c>)
 800917c:	f7fe fe54 	bl	8007e28 <memchr>
 8009180:	9a04      	ldr	r2, [sp, #16]
 8009182:	b9d8      	cbnz	r0, 80091bc <_vfiprintf_r+0x110>
 8009184:	06d1      	lsls	r1, r2, #27
 8009186:	bf44      	itt	mi
 8009188:	2320      	movmi	r3, #32
 800918a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800918e:	0713      	lsls	r3, r2, #28
 8009190:	bf44      	itt	mi
 8009192:	232b      	movmi	r3, #43	@ 0x2b
 8009194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009198:	f89a 3000 	ldrb.w	r3, [sl]
 800919c:	2b2a      	cmp	r3, #42	@ 0x2a
 800919e:	d015      	beq.n	80091cc <_vfiprintf_r+0x120>
 80091a0:	4654      	mov	r4, sl
 80091a2:	2000      	movs	r0, #0
 80091a4:	f04f 0c0a 	mov.w	ip, #10
 80091a8:	9a07      	ldr	r2, [sp, #28]
 80091aa:	4621      	mov	r1, r4
 80091ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091b0:	3b30      	subs	r3, #48	@ 0x30
 80091b2:	2b09      	cmp	r3, #9
 80091b4:	d94b      	bls.n	800924e <_vfiprintf_r+0x1a2>
 80091b6:	b1b0      	cbz	r0, 80091e6 <_vfiprintf_r+0x13a>
 80091b8:	9207      	str	r2, [sp, #28]
 80091ba:	e014      	b.n	80091e6 <_vfiprintf_r+0x13a>
 80091bc:	eba0 0308 	sub.w	r3, r0, r8
 80091c0:	fa09 f303 	lsl.w	r3, r9, r3
 80091c4:	4313      	orrs	r3, r2
 80091c6:	46a2      	mov	sl, r4
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	e7d2      	b.n	8009172 <_vfiprintf_r+0xc6>
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	1d19      	adds	r1, r3, #4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	9103      	str	r1, [sp, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bfbb      	ittet	lt
 80091d8:	425b      	neglt	r3, r3
 80091da:	f042 0202 	orrlt.w	r2, r2, #2
 80091de:	9307      	strge	r3, [sp, #28]
 80091e0:	9307      	strlt	r3, [sp, #28]
 80091e2:	bfb8      	it	lt
 80091e4:	9204      	strlt	r2, [sp, #16]
 80091e6:	7823      	ldrb	r3, [r4, #0]
 80091e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80091ea:	d10a      	bne.n	8009202 <_vfiprintf_r+0x156>
 80091ec:	7863      	ldrb	r3, [r4, #1]
 80091ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80091f0:	d132      	bne.n	8009258 <_vfiprintf_r+0x1ac>
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	3402      	adds	r4, #2
 80091f6:	1d1a      	adds	r2, r3, #4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	9203      	str	r2, [sp, #12]
 80091fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009200:	9305      	str	r3, [sp, #20]
 8009202:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80092cc <_vfiprintf_r+0x220>
 8009206:	2203      	movs	r2, #3
 8009208:	4650      	mov	r0, sl
 800920a:	7821      	ldrb	r1, [r4, #0]
 800920c:	f7fe fe0c 	bl	8007e28 <memchr>
 8009210:	b138      	cbz	r0, 8009222 <_vfiprintf_r+0x176>
 8009212:	2240      	movs	r2, #64	@ 0x40
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	eba0 000a 	sub.w	r0, r0, sl
 800921a:	4082      	lsls	r2, r0
 800921c:	4313      	orrs	r3, r2
 800921e:	3401      	adds	r4, #1
 8009220:	9304      	str	r3, [sp, #16]
 8009222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009226:	2206      	movs	r2, #6
 8009228:	4829      	ldr	r0, [pc, #164]	@ (80092d0 <_vfiprintf_r+0x224>)
 800922a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800922e:	f7fe fdfb 	bl	8007e28 <memchr>
 8009232:	2800      	cmp	r0, #0
 8009234:	d03f      	beq.n	80092b6 <_vfiprintf_r+0x20a>
 8009236:	4b27      	ldr	r3, [pc, #156]	@ (80092d4 <_vfiprintf_r+0x228>)
 8009238:	bb1b      	cbnz	r3, 8009282 <_vfiprintf_r+0x1d6>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	3307      	adds	r3, #7
 800923e:	f023 0307 	bic.w	r3, r3, #7
 8009242:	3308      	adds	r3, #8
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009248:	443b      	add	r3, r7
 800924a:	9309      	str	r3, [sp, #36]	@ 0x24
 800924c:	e76a      	b.n	8009124 <_vfiprintf_r+0x78>
 800924e:	460c      	mov	r4, r1
 8009250:	2001      	movs	r0, #1
 8009252:	fb0c 3202 	mla	r2, ip, r2, r3
 8009256:	e7a8      	b.n	80091aa <_vfiprintf_r+0xfe>
 8009258:	2300      	movs	r3, #0
 800925a:	f04f 0c0a 	mov.w	ip, #10
 800925e:	4619      	mov	r1, r3
 8009260:	3401      	adds	r4, #1
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	4620      	mov	r0, r4
 8009266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800926a:	3a30      	subs	r2, #48	@ 0x30
 800926c:	2a09      	cmp	r2, #9
 800926e:	d903      	bls.n	8009278 <_vfiprintf_r+0x1cc>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0c6      	beq.n	8009202 <_vfiprintf_r+0x156>
 8009274:	9105      	str	r1, [sp, #20]
 8009276:	e7c4      	b.n	8009202 <_vfiprintf_r+0x156>
 8009278:	4604      	mov	r4, r0
 800927a:	2301      	movs	r3, #1
 800927c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009280:	e7f0      	b.n	8009264 <_vfiprintf_r+0x1b8>
 8009282:	ab03      	add	r3, sp, #12
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	462a      	mov	r2, r5
 8009288:	4630      	mov	r0, r6
 800928a:	4b13      	ldr	r3, [pc, #76]	@ (80092d8 <_vfiprintf_r+0x22c>)
 800928c:	a904      	add	r1, sp, #16
 800928e:	f3af 8000 	nop.w
 8009292:	4607      	mov	r7, r0
 8009294:	1c78      	adds	r0, r7, #1
 8009296:	d1d6      	bne.n	8009246 <_vfiprintf_r+0x19a>
 8009298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800929a:	07d9      	lsls	r1, r3, #31
 800929c:	d405      	bmi.n	80092aa <_vfiprintf_r+0x1fe>
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	059a      	lsls	r2, r3, #22
 80092a2:	d402      	bmi.n	80092aa <_vfiprintf_r+0x1fe>
 80092a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092a6:	f7fc fef1 	bl	800608c <__retarget_lock_release_recursive>
 80092aa:	89ab      	ldrh	r3, [r5, #12]
 80092ac:	065b      	lsls	r3, r3, #25
 80092ae:	f53f af1f 	bmi.w	80090f0 <_vfiprintf_r+0x44>
 80092b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092b4:	e71e      	b.n	80090f4 <_vfiprintf_r+0x48>
 80092b6:	ab03      	add	r3, sp, #12
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	462a      	mov	r2, r5
 80092bc:	4630      	mov	r0, r6
 80092be:	4b06      	ldr	r3, [pc, #24]	@ (80092d8 <_vfiprintf_r+0x22c>)
 80092c0:	a904      	add	r1, sp, #16
 80092c2:	f7fe f9ef 	bl	80076a4 <_printf_i>
 80092c6:	e7e4      	b.n	8009292 <_vfiprintf_r+0x1e6>
 80092c8:	080097a1 	.word	0x080097a1
 80092cc:	080097a7 	.word	0x080097a7
 80092d0:	080097ab 	.word	0x080097ab
 80092d4:	00000000 	.word	0x00000000
 80092d8:	08009089 	.word	0x08009089

080092dc <__swbuf_r>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	460e      	mov	r6, r1
 80092e0:	4614      	mov	r4, r2
 80092e2:	4605      	mov	r5, r0
 80092e4:	b118      	cbz	r0, 80092ee <__swbuf_r+0x12>
 80092e6:	6a03      	ldr	r3, [r0, #32]
 80092e8:	b90b      	cbnz	r3, 80092ee <__swbuf_r+0x12>
 80092ea:	f7fc fd8f 	bl	8005e0c <__sinit>
 80092ee:	69a3      	ldr	r3, [r4, #24]
 80092f0:	60a3      	str	r3, [r4, #8]
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	071a      	lsls	r2, r3, #28
 80092f6:	d501      	bpl.n	80092fc <__swbuf_r+0x20>
 80092f8:	6923      	ldr	r3, [r4, #16]
 80092fa:	b943      	cbnz	r3, 800930e <__swbuf_r+0x32>
 80092fc:	4621      	mov	r1, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f82a 	bl	8009358 <__swsetup_r>
 8009304:	b118      	cbz	r0, 800930e <__swbuf_r+0x32>
 8009306:	f04f 37ff 	mov.w	r7, #4294967295
 800930a:	4638      	mov	r0, r7
 800930c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	b2f6      	uxtb	r6, r6
 8009314:	1a98      	subs	r0, r3, r2
 8009316:	6963      	ldr	r3, [r4, #20]
 8009318:	4637      	mov	r7, r6
 800931a:	4283      	cmp	r3, r0
 800931c:	dc05      	bgt.n	800932a <__swbuf_r+0x4e>
 800931e:	4621      	mov	r1, r4
 8009320:	4628      	mov	r0, r5
 8009322:	f7fe fcab 	bl	8007c7c <_fflush_r>
 8009326:	2800      	cmp	r0, #0
 8009328:	d1ed      	bne.n	8009306 <__swbuf_r+0x2a>
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	3b01      	subs	r3, #1
 800932e:	60a3      	str	r3, [r4, #8]
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	6022      	str	r2, [r4, #0]
 8009336:	701e      	strb	r6, [r3, #0]
 8009338:	6962      	ldr	r2, [r4, #20]
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	429a      	cmp	r2, r3
 800933e:	d004      	beq.n	800934a <__swbuf_r+0x6e>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	07db      	lsls	r3, r3, #31
 8009344:	d5e1      	bpl.n	800930a <__swbuf_r+0x2e>
 8009346:	2e0a      	cmp	r6, #10
 8009348:	d1df      	bne.n	800930a <__swbuf_r+0x2e>
 800934a:	4621      	mov	r1, r4
 800934c:	4628      	mov	r0, r5
 800934e:	f7fe fc95 	bl	8007c7c <_fflush_r>
 8009352:	2800      	cmp	r0, #0
 8009354:	d0d9      	beq.n	800930a <__swbuf_r+0x2e>
 8009356:	e7d6      	b.n	8009306 <__swbuf_r+0x2a>

08009358 <__swsetup_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4b29      	ldr	r3, [pc, #164]	@ (8009400 <__swsetup_r+0xa8>)
 800935c:	4605      	mov	r5, r0
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	460c      	mov	r4, r1
 8009362:	b118      	cbz	r0, 800936c <__swsetup_r+0x14>
 8009364:	6a03      	ldr	r3, [r0, #32]
 8009366:	b90b      	cbnz	r3, 800936c <__swsetup_r+0x14>
 8009368:	f7fc fd50 	bl	8005e0c <__sinit>
 800936c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009370:	0719      	lsls	r1, r3, #28
 8009372:	d422      	bmi.n	80093ba <__swsetup_r+0x62>
 8009374:	06da      	lsls	r2, r3, #27
 8009376:	d407      	bmi.n	8009388 <__swsetup_r+0x30>
 8009378:	2209      	movs	r2, #9
 800937a:	602a      	str	r2, [r5, #0]
 800937c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	e033      	b.n	80093f0 <__swsetup_r+0x98>
 8009388:	0758      	lsls	r0, r3, #29
 800938a:	d512      	bpl.n	80093b2 <__swsetup_r+0x5a>
 800938c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800938e:	b141      	cbz	r1, 80093a2 <__swsetup_r+0x4a>
 8009390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009394:	4299      	cmp	r1, r3
 8009396:	d002      	beq.n	800939e <__swsetup_r+0x46>
 8009398:	4628      	mov	r0, r5
 800939a:	f7fc fe7d 	bl	8006098 <_free_r>
 800939e:	2300      	movs	r3, #0
 80093a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	2300      	movs	r3, #0
 80093ac:	6063      	str	r3, [r4, #4]
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	f043 0308 	orr.w	r3, r3, #8
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	6923      	ldr	r3, [r4, #16]
 80093bc:	b94b      	cbnz	r3, 80093d2 <__swsetup_r+0x7a>
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c8:	d003      	beq.n	80093d2 <__swsetup_r+0x7a>
 80093ca:	4621      	mov	r1, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 f882 	bl	80094d6 <__smakebuf_r>
 80093d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d6:	f013 0201 	ands.w	r2, r3, #1
 80093da:	d00a      	beq.n	80093f2 <__swsetup_r+0x9a>
 80093dc:	2200      	movs	r2, #0
 80093de:	60a2      	str	r2, [r4, #8]
 80093e0:	6962      	ldr	r2, [r4, #20]
 80093e2:	4252      	negs	r2, r2
 80093e4:	61a2      	str	r2, [r4, #24]
 80093e6:	6922      	ldr	r2, [r4, #16]
 80093e8:	b942      	cbnz	r2, 80093fc <__swsetup_r+0xa4>
 80093ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093ee:	d1c5      	bne.n	800937c <__swsetup_r+0x24>
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	0799      	lsls	r1, r3, #30
 80093f4:	bf58      	it	pl
 80093f6:	6962      	ldrpl	r2, [r4, #20]
 80093f8:	60a2      	str	r2, [r4, #8]
 80093fa:	e7f4      	b.n	80093e6 <__swsetup_r+0x8e>
 80093fc:	2000      	movs	r0, #0
 80093fe:	e7f7      	b.n	80093f0 <__swsetup_r+0x98>
 8009400:	20000028 	.word	0x20000028

08009404 <_raise_r>:
 8009404:	291f      	cmp	r1, #31
 8009406:	b538      	push	{r3, r4, r5, lr}
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	d904      	bls.n	8009418 <_raise_r+0x14>
 800940e:	2316      	movs	r3, #22
 8009410:	6003      	str	r3, [r0, #0]
 8009412:	f04f 30ff 	mov.w	r0, #4294967295
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800941a:	b112      	cbz	r2, 8009422 <_raise_r+0x1e>
 800941c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009420:	b94b      	cbnz	r3, 8009436 <_raise_r+0x32>
 8009422:	4628      	mov	r0, r5
 8009424:	f000 f830 	bl	8009488 <_getpid_r>
 8009428:	4622      	mov	r2, r4
 800942a:	4601      	mov	r1, r0
 800942c:	4628      	mov	r0, r5
 800942e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009432:	f000 b817 	b.w	8009464 <_kill_r>
 8009436:	2b01      	cmp	r3, #1
 8009438:	d00a      	beq.n	8009450 <_raise_r+0x4c>
 800943a:	1c59      	adds	r1, r3, #1
 800943c:	d103      	bne.n	8009446 <_raise_r+0x42>
 800943e:	2316      	movs	r3, #22
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	2001      	movs	r0, #1
 8009444:	e7e7      	b.n	8009416 <_raise_r+0x12>
 8009446:	2100      	movs	r1, #0
 8009448:	4620      	mov	r0, r4
 800944a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800944e:	4798      	blx	r3
 8009450:	2000      	movs	r0, #0
 8009452:	e7e0      	b.n	8009416 <_raise_r+0x12>

08009454 <raise>:
 8009454:	4b02      	ldr	r3, [pc, #8]	@ (8009460 <raise+0xc>)
 8009456:	4601      	mov	r1, r0
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f7ff bfd3 	b.w	8009404 <_raise_r>
 800945e:	bf00      	nop
 8009460:	20000028 	.word	0x20000028

08009464 <_kill_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	2300      	movs	r3, #0
 8009468:	4d06      	ldr	r5, [pc, #24]	@ (8009484 <_kill_r+0x20>)
 800946a:	4604      	mov	r4, r0
 800946c:	4608      	mov	r0, r1
 800946e:	4611      	mov	r1, r2
 8009470:	602b      	str	r3, [r5, #0]
 8009472:	f7f8 fe50 	bl	8002116 <_kill>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d102      	bne.n	8009480 <_kill_r+0x1c>
 800947a:	682b      	ldr	r3, [r5, #0]
 800947c:	b103      	cbz	r3, 8009480 <_kill_r+0x1c>
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	bd38      	pop	{r3, r4, r5, pc}
 8009482:	bf00      	nop
 8009484:	200005dc 	.word	0x200005dc

08009488 <_getpid_r>:
 8009488:	f7f8 be3e 	b.w	8002108 <_getpid>

0800948c <__swhatbuf_r>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	460c      	mov	r4, r1
 8009490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009494:	4615      	mov	r5, r2
 8009496:	2900      	cmp	r1, #0
 8009498:	461e      	mov	r6, r3
 800949a:	b096      	sub	sp, #88	@ 0x58
 800949c:	da0c      	bge.n	80094b8 <__swhatbuf_r+0x2c>
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	2100      	movs	r1, #0
 80094a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094a6:	bf14      	ite	ne
 80094a8:	2340      	movne	r3, #64	@ 0x40
 80094aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094ae:	2000      	movs	r0, #0
 80094b0:	6031      	str	r1, [r6, #0]
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	b016      	add	sp, #88	@ 0x58
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	466a      	mov	r2, sp
 80094ba:	f000 f849 	bl	8009550 <_fstat_r>
 80094be:	2800      	cmp	r0, #0
 80094c0:	dbed      	blt.n	800949e <__swhatbuf_r+0x12>
 80094c2:	9901      	ldr	r1, [sp, #4]
 80094c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094cc:	4259      	negs	r1, r3
 80094ce:	4159      	adcs	r1, r3
 80094d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094d4:	e7eb      	b.n	80094ae <__swhatbuf_r+0x22>

080094d6 <__smakebuf_r>:
 80094d6:	898b      	ldrh	r3, [r1, #12]
 80094d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094da:	079d      	lsls	r5, r3, #30
 80094dc:	4606      	mov	r6, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	d507      	bpl.n	80094f2 <__smakebuf_r+0x1c>
 80094e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	2301      	movs	r3, #1
 80094ec:	6163      	str	r3, [r4, #20]
 80094ee:	b003      	add	sp, #12
 80094f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f2:	466a      	mov	r2, sp
 80094f4:	ab01      	add	r3, sp, #4
 80094f6:	f7ff ffc9 	bl	800948c <__swhatbuf_r>
 80094fa:	9f00      	ldr	r7, [sp, #0]
 80094fc:	4605      	mov	r5, r0
 80094fe:	4639      	mov	r1, r7
 8009500:	4630      	mov	r0, r6
 8009502:	f7fc fe33 	bl	800616c <_malloc_r>
 8009506:	b948      	cbnz	r0, 800951c <__smakebuf_r+0x46>
 8009508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800950c:	059a      	lsls	r2, r3, #22
 800950e:	d4ee      	bmi.n	80094ee <__smakebuf_r+0x18>
 8009510:	f023 0303 	bic.w	r3, r3, #3
 8009514:	f043 0302 	orr.w	r3, r3, #2
 8009518:	81a3      	strh	r3, [r4, #12]
 800951a:	e7e2      	b.n	80094e2 <__smakebuf_r+0xc>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	9b01      	ldr	r3, [sp, #4]
 800952a:	6020      	str	r0, [r4, #0]
 800952c:	b15b      	cbz	r3, 8009546 <__smakebuf_r+0x70>
 800952e:	4630      	mov	r0, r6
 8009530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009534:	f000 f81e 	bl	8009574 <_isatty_r>
 8009538:	b128      	cbz	r0, 8009546 <__smakebuf_r+0x70>
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	f023 0303 	bic.w	r3, r3, #3
 8009540:	f043 0301 	orr.w	r3, r3, #1
 8009544:	81a3      	strh	r3, [r4, #12]
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	431d      	orrs	r5, r3
 800954a:	81a5      	strh	r5, [r4, #12]
 800954c:	e7cf      	b.n	80094ee <__smakebuf_r+0x18>
	...

08009550 <_fstat_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	2300      	movs	r3, #0
 8009554:	4d06      	ldr	r5, [pc, #24]	@ (8009570 <_fstat_r+0x20>)
 8009556:	4604      	mov	r4, r0
 8009558:	4608      	mov	r0, r1
 800955a:	4611      	mov	r1, r2
 800955c:	602b      	str	r3, [r5, #0]
 800955e:	f7f8 fe39 	bl	80021d4 <_fstat>
 8009562:	1c43      	adds	r3, r0, #1
 8009564:	d102      	bne.n	800956c <_fstat_r+0x1c>
 8009566:	682b      	ldr	r3, [r5, #0]
 8009568:	b103      	cbz	r3, 800956c <_fstat_r+0x1c>
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	bd38      	pop	{r3, r4, r5, pc}
 800956e:	bf00      	nop
 8009570:	200005dc 	.word	0x200005dc

08009574 <_isatty_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	2300      	movs	r3, #0
 8009578:	4d05      	ldr	r5, [pc, #20]	@ (8009590 <_isatty_r+0x1c>)
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	602b      	str	r3, [r5, #0]
 8009580:	f7f8 fe37 	bl	80021f2 <_isatty>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d102      	bne.n	800958e <_isatty_r+0x1a>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b103      	cbz	r3, 800958e <_isatty_r+0x1a>
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	200005dc 	.word	0x200005dc

08009594 <roundf>:
 8009594:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009598:	3b7f      	subs	r3, #127	@ 0x7f
 800959a:	2b16      	cmp	r3, #22
 800959c:	4601      	mov	r1, r0
 800959e:	b510      	push	{r4, lr}
 80095a0:	dc14      	bgt.n	80095cc <roundf+0x38>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	da07      	bge.n	80095b6 <roundf+0x22>
 80095a6:	3301      	adds	r3, #1
 80095a8:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 80095ac:	d101      	bne.n	80095b2 <roundf+0x1e>
 80095ae:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 80095b2:	4608      	mov	r0, r1
 80095b4:	bd10      	pop	{r4, pc}
 80095b6:	4a08      	ldr	r2, [pc, #32]	@ (80095d8 <roundf+0x44>)
 80095b8:	411a      	asrs	r2, r3
 80095ba:	4202      	tst	r2, r0
 80095bc:	d0f9      	beq.n	80095b2 <roundf+0x1e>
 80095be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80095c2:	4119      	asrs	r1, r3
 80095c4:	4401      	add	r1, r0
 80095c6:	ea21 0102 	bic.w	r1, r1, r2
 80095ca:	e7f2      	b.n	80095b2 <roundf+0x1e>
 80095cc:	2b80      	cmp	r3, #128	@ 0x80
 80095ce:	d1f0      	bne.n	80095b2 <roundf+0x1e>
 80095d0:	f7f7 faa8 	bl	8000b24 <__addsf3>
 80095d4:	4601      	mov	r1, r0
 80095d6:	e7ec      	b.n	80095b2 <roundf+0x1e>
 80095d8:	007fffff 	.word	0x007fffff

080095dc <_init>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr

080095e8 <_fini>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr
