
motor6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080097d8  080097d8  0000a7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf4  08009bf4  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009bf4  08009bf4  0000abf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bfc  08009bfc  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bfc  08009bfc  0000abfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c00  08009c00  0000ac00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009c04  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200001e8  08009dec  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08009dec  0000b614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d82c  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002315  00000000  00000000  00018a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0001ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7f  00000000  00000000  0001bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ab5  00000000  00000000  0001c557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd83  00000000  00000000  0003500c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c513  00000000  00000000  00044d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d12a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e6c  00000000  00000000  000d12e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000d6154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080097bc 	.word	0x080097bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080097bc 	.word	0x080097bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d86:	2afd      	cmp	r2, #253	@ 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	@ 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	@ 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	@ 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_d2lz>:
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	2200      	movs	r2, #0
 80010c4:	2300      	movs	r3, #0
 80010c6:	4604      	mov	r4, r0
 80010c8:	460d      	mov	r5, r1
 80010ca:	f7ff fc77 	bl	80009bc <__aeabi_dcmplt>
 80010ce:	b928      	cbnz	r0, 80010dc <__aeabi_d2lz+0x1c>
 80010d0:	4620      	mov	r0, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010d8:	f000 b80a 	b.w	80010f0 <__aeabi_d2ulz>
 80010dc:	4620      	mov	r0, r4
 80010de:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010e2:	f000 f805 	bl	80010f0 <__aeabi_d2ulz>
 80010e6:	4240      	negs	r0, r0
 80010e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	bf00      	nop

080010f0 <__aeabi_d2ulz>:
 80010f0:	b5d0      	push	{r4, r6, r7, lr}
 80010f2:	2200      	movs	r2, #0
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <__aeabi_d2ulz+0x34>)
 80010f6:	4606      	mov	r6, r0
 80010f8:	460f      	mov	r7, r1
 80010fa:	f7ff f9ed 	bl	80004d8 <__aeabi_dmul>
 80010fe:	f7ff fc9b 	bl	8000a38 <__aeabi_d2uiz>
 8001102:	4604      	mov	r4, r0
 8001104:	f7ff f96e 	bl	80003e4 <__aeabi_ui2d>
 8001108:	2200      	movs	r2, #0
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <__aeabi_d2ulz+0x38>)
 800110c:	f7ff f9e4 	bl	80004d8 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4630      	mov	r0, r6
 8001116:	4639      	mov	r1, r7
 8001118:	f7ff f826 	bl	8000168 <__aeabi_dsub>
 800111c:	f7ff fc8c 	bl	8000a38 <__aeabi_d2uiz>
 8001120:	4621      	mov	r1, r4
 8001122:	bdd0      	pop	{r4, r6, r7, pc}
 8001124:	3df00000 	.word	0x3df00000
 8001128:	41f00000 	.word	0x41f00000

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b39      	ldr	r3, [pc, #228]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a38      	ldr	r2, [pc, #224]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b36      	ldr	r3, [pc, #216]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a32      	ldr	r2, [pc, #200]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b30      	ldr	r3, [pc, #192]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a2c      	ldr	r2, [pc, #176]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b27      	ldr	r3, [pc, #156]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a26      	ldr	r2, [pc, #152]	@ (8001228 <MX_GPIO_Init+0xfc>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f648 0130 	movw	r1, #34864	@ 0x8830
 80011a6:	4821      	ldr	r0, [pc, #132]	@ (800122c <MX_GPIO_Init+0x100>)
 80011a8:	f002 f96c 	bl	8003484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f649 0101 	movw	r1, #38913	@ 0x9801
 80011b2:	481f      	ldr	r0, [pc, #124]	@ (8001230 <MX_GPIO_Init+0x104>)
 80011b4:	f002 f966 	bl	8003484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <MX_GPIO_Init+0x108>)
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4619      	mov	r1, r3
 80011cc:	481a      	ldr	r0, [pc, #104]	@ (8001238 <MX_GPIO_Init+0x10c>)
 80011ce:	f001 ffd5 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_11|GPIO_PIN_15;
 80011d2:	f648 0330 	movw	r3, #34864	@ 0x8830
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4810      	ldr	r0, [pc, #64]	@ (800122c <MX_GPIO_Init+0x100>)
 80011ec:	f001 ffc6 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB11 PB12 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80011f0:	f649 0301 	movw	r3, #38913	@ 0x9801
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2302      	movs	r3, #2
 8001200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4619      	mov	r1, r3
 8001208:	4809      	ldr	r0, [pc, #36]	@ (8001230 <MX_GPIO_Init+0x104>)
 800120a:	f001 ffb7 	bl	800317c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2028      	movs	r0, #40	@ 0x28
 8001214:	f001 fec9 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001218:	2028      	movs	r0, #40	@ 0x28
 800121a:	f001 fee2 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	40010800 	.word	0x40010800
 8001230:	40010c00 	.word	0x40010c00
 8001234:	10110000 	.word	0x10110000
 8001238:	40011000 	.word	0x40011000

0800123c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a72      	ldr	r2, [pc, #456]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	f040 80de 	bne.w	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		if (ultra_delay1 == 1) {
 8001250:	4b71      	ldr	r3, [pc, #452]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d11d      	bne.n	8001294 <HAL_TIM_PeriodElapsedCallback+0x58>
			if (ultra_count >= 10) {
 8001258:	4b70      	ldr	r3, [pc, #448]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b09      	cmp	r3, #9
 800125e:	d913      	bls.n	8001288 <HAL_TIM_PeriodElapsedCallback+0x4c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2110      	movs	r1, #16
 8001264:	486e      	ldr	r0, [pc, #440]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001266:	f002 f90d 	bl	8003484 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800126a:	4b6e      	ldr	r3, [pc, #440]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b6c      	ldr	r3, [pc, #432]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0202 	orr.w	r2, r2, #2
 8001278:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 800127a:	4b68      	ldr	r3, [pc, #416]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
				ultra_delay1 = 0;
 8001280:	4b65      	ldr	r3, [pc, #404]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		}
		else if (sensor_part5 == 1) {
			delay_count++;
		}
	}
}
 8001286:	e0c1      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 8001288:	4b64      	ldr	r3, [pc, #400]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a63      	ldr	r2, [pc, #396]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	e0bb      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (ultra_delay2 == 1) {
 8001294:	4b64      	ldr	r3, [pc, #400]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d11d      	bne.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x9c>
			if (ultra_count >= 10) {
 800129c:	4b5f      	ldr	r3, [pc, #380]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	d913      	bls.n	80012cc <HAL_TIM_PeriodElapsedCallback+0x90>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2101      	movs	r1, #1
 80012a8:	4860      	ldr	r0, [pc, #384]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012aa:	f002 f8eb 	bl	8003484 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
 80012ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0204 	orr.w	r2, r2, #4
 80012bc:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 80012be:	4b57      	ldr	r3, [pc, #348]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
				ultra_delay2 = 0;
 80012c4:	4b58      	ldr	r3, [pc, #352]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	e09f      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 80012cc:	4b53      	ldr	r3, [pc, #332]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	4a52      	ldr	r2, [pc, #328]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	e099      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (ultra_delay3 == 1) {
 80012d8:	4b55      	ldr	r3, [pc, #340]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d11e      	bne.n	800131e <HAL_TIM_PeriodElapsedCallback+0xe2>
			if (ultra_count >= 10) {
 80012e0:	4b4e      	ldr	r3, [pc, #312]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b09      	cmp	r3, #9
 80012e6:	d914      	bls.n	8001312 <HAL_TIM_PeriodElapsedCallback+0xd6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012ee:	484f      	ldr	r0, [pc, #316]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012f0:	f002 f8c8 	bl	8003484 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
 80012f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0208 	orr.w	r2, r2, #8
 8001302:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 8001304:	4b45      	ldr	r3, [pc, #276]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
				ultra_delay3 = 0;
 800130a:	4b49      	ldr	r3, [pc, #292]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
}
 8001310:	e07c      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 8001312:	4b42      	ldr	r3, [pc, #264]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a40      	ldr	r2, [pc, #256]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	e076      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (ultra_delay4 == 1) {
 800131e:	4b45      	ldr	r3, [pc, #276]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d11e      	bne.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x128>
			if (ultra_count >= 10) {
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b09      	cmp	r3, #9
 800132c:	d914      	bls.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x11c>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001334:	483d      	ldr	r0, [pc, #244]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001336:	f002 f8a5 	bl	8003484 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800133a:	4b3f      	ldr	r3, [pc, #252]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0202 	orr.w	r2, r2, #2
 8001348:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 800134a:	4b34      	ldr	r3, [pc, #208]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
				ultra_delay4 = 0;
 8001350:	4b38      	ldr	r3, [pc, #224]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	e059      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 8001358:	4b30      	ldr	r3, [pc, #192]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a2f      	ldr	r2, [pc, #188]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	e053      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (ultra_delay5 == 1) {
 8001364:	4b35      	ldr	r3, [pc, #212]	@ (800143c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d11e      	bne.n	80013aa <HAL_TIM_PeriodElapsedCallback+0x16e>
			if (ultra_count >= 10) {
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d914      	bls.n	800139e <HAL_TIM_PeriodElapsedCallback+0x162>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800137a:	4829      	ldr	r0, [pc, #164]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800137c:	f002 f882 	bl	8003484 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 8001380:	4b2d      	ldr	r3, [pc, #180]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0204 	orr.w	r2, r2, #4
 800138e:	60da      	str	r2, [r3, #12]
				ultra_count = 0;
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
				ultra_delay5 = 0;
 8001396:	4b29      	ldr	r3, [pc, #164]	@ (800143c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
}
 800139c:	e036      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
				ultra_count++;
 800139e:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	e030      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part2 == 1) {
 80013aa:	4b25      	ldr	r3, [pc, #148]	@ (8001440 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <HAL_TIM_PeriodElapsedCallback+0x182>
			delay_count++;
 80013b2:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a22      	ldr	r2, [pc, #136]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	e026      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part1 == 1) {
 80013be:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d105      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x196>
			delay_count++;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	e01c      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part3 == 1) {
 80013d2:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			delay_count++;
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a18      	ldr	r2, [pc, #96]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	e012      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part4 == 1) {
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d105      	bne.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x1be>
			delay_count++;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a13      	ldr	r2, [pc, #76]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	e008      	b.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
		else if (sensor_part5 == 1) {
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d104      	bne.n	800140c <HAL_TIM_PeriodElapsedCallback+0x1d0>
			delay_count++;
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a0e      	ldr	r2, [pc, #56]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40012c00 	.word	0x40012c00
 8001418:	20000260 	.word	0x20000260
 800141c:	2000025c 	.word	0x2000025c
 8001420:	40010800 	.word	0x40010800
 8001424:	20000314 	.word	0x20000314
 8001428:	20000261 	.word	0x20000261
 800142c:	40010c00 	.word	0x40010c00
 8001430:	20000262 	.word	0x20000262
 8001434:	20000263 	.word	0x20000263
 8001438:	200003a4 	.word	0x200003a4
 800143c:	20000264 	.word	0x20000264
 8001440:	20000251 	.word	0x20000251
 8001444:	20000258 	.word	0x20000258
 8001448:	20000250 	.word	0x20000250
 800144c:	20000252 	.word	0x20000252
 8001450:	20000253 	.word	0x20000253
 8001454:	20000254 	.word	0x20000254

08001458 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001468:	f040 81ba 	bne.w	80017e0 <HAL_TIM_IC_CaptureCallback+0x388>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7f1b      	ldrb	r3, [r3, #28]
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 8083 	bne.w	800157c <HAL_TIM_IC_CaptureCallback+0x124>
		{
			if (Is_First_Captured1==0)
 8001476:	4b9a      	ldr	r3, [pc, #616]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11a      	bne.n	80014b4 <HAL_TIM_IC_CaptureCallback+0x5c>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800147e:	2100      	movs	r1, #0
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f003 f901 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 8001486:	4603      	mov	r3, r0
 8001488:	4a96      	ldr	r2, [pc, #600]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800148a:	6013      	str	r3, [r2, #0]
				Is_First_Captured1 = 1;
 800148c:	4b94      	ldr	r3, [pc, #592]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x288>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 020a 	bic.w	r2, r2, #10
 80014a0:	621a      	str	r2, [r3, #32]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0202 	orr.w	r2, r2, #2
 80014b0:	621a      	str	r2, [r3, #32]
 80014b2:	e063      	b.n	800157c <HAL_TIM_IC_CaptureCallback+0x124>
			}

			else if (Is_First_Captured1==1)
 80014b4:	4b8a      	ldr	r3, [pc, #552]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x288>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d15f      	bne.n	800157c <HAL_TIM_IC_CaptureCallback+0x124>
			{
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80014bc:	2100      	movs	r1, #0
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f003 f8e2 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a88      	ldr	r2, [pc, #544]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014c8:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24

				if (IC_Val2 > IC_Val1)
 80014d2:	4b85      	ldr	r3, [pc, #532]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b83      	ldr	r3, [pc, #524]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d907      	bls.n	80014ee <HAL_TIM_IC_CaptureCallback+0x96>
				{
					Difference1 = IC_Val2-IC_Val1;
 80014de:	4b82      	ldr	r3, [pc, #520]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b80      	ldr	r3, [pc, #512]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a80      	ldr	r2, [pc, #512]	@ (80016ec <HAL_TIM_IC_CaptureCallback+0x294>)
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e00f      	b.n	800150e <HAL_TIM_IC_CaptureCallback+0xb6>
				}

				else if (IC_Val1 > IC_Val2)
 80014ee:	4b7d      	ldr	r3, [pc, #500]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b7d      	ldr	r3, [pc, #500]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d909      	bls.n	800150e <HAL_TIM_IC_CaptureCallback+0xb6>
				{
					Difference1 = (0xffff - IC_Val1) + IC_Val2;
 80014fa:	4b7b      	ldr	r3, [pc, #492]	@ (80016e8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b79      	ldr	r3, [pc, #484]	@ (80016e4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001508:	33ff      	adds	r3, #255	@ 0xff
 800150a:	4a78      	ldr	r2, [pc, #480]	@ (80016ec <HAL_TIM_IC_CaptureCallback+0x294>)
 800150c:	6013      	str	r3, [r2, #0]
				}

				Distance1 = Difference1 * .034/2;
 800150e:	4b77      	ldr	r3, [pc, #476]	@ (80016ec <HAL_TIM_IC_CaptureCallback+0x294>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ff66 	bl	80003e4 <__aeabi_ui2d>
 8001518:	a36f      	add	r3, pc, #444	@ (adr r3, 80016d8 <HAL_TIM_IC_CaptureCallback+0x280>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7fe ffdb 	bl	80004d8 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001532:	f7ff f8fb 	bl	800072c <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fa7b 	bl	8000a38 <__aeabi_d2uiz>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	4b6a      	ldr	r3, [pc, #424]	@ (80016f0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001548:	801a      	strh	r2, [r3, #0]
				Is_First_Captured1 = 0;
 800154a:	4b65      	ldr	r3, [pc, #404]	@ (80016e0 <HAL_TIM_IC_CaptureCallback+0x288>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 020a 	bic.w	r2, r2, #10
 800155e:	621a      	str	r2, [r3, #32]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6a12      	ldr	r2, [r2, #32]
 800156a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800156c:	4b61      	ldr	r3, [pc, #388]	@ (80016f4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	4b60      	ldr	r3, [pc, #384]	@ (80016f4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0202 	bic.w	r2, r2, #2
 800157a:	60da      	str	r2, [r3, #12]
			}
		}

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7f1b      	ldrb	r3, [r3, #28]
 8001580:	2b02      	cmp	r3, #2
 8001582:	f040 8083 	bne.w	800168c <HAL_TIM_IC_CaptureCallback+0x234>
		{
			if (Is_First_Captured2==0)
 8001586:	4b5c      	ldr	r3, [pc, #368]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d11a      	bne.n	80015c4 <HAL_TIM_IC_CaptureCallback+0x16c>
			{
				IC_Val3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800158e:	2104      	movs	r1, #4
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f003 f879 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 8001596:	4603      	mov	r3, r0
 8001598:	4a58      	ldr	r2, [pc, #352]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800159a:	6013      	str	r3, [r2, #0]
				Is_First_Captured2 = 1;
 800159c:	4b56      	ldr	r3, [pc, #344]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80015b0:	621a      	str	r2, [r3, #32]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a1a      	ldr	r2, [r3, #32]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0220 	orr.w	r2, r2, #32
 80015c0:	621a      	str	r2, [r3, #32]
 80015c2:	e063      	b.n	800168c <HAL_TIM_IC_CaptureCallback+0x234>
			}

			else if (Is_First_Captured2==1)
 80015c4:	4b4c      	ldr	r3, [pc, #304]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d15f      	bne.n	800168c <HAL_TIM_IC_CaptureCallback+0x234>
			{
				IC_Val4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80015cc:	2104      	movs	r1, #4
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f003 f85a 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80015d8:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24

				if (IC_Val4 > IC_Val3)
 80015e2:	4b47      	ldr	r3, [pc, #284]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b45      	ldr	r3, [pc, #276]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d907      	bls.n	80015fe <HAL_TIM_IC_CaptureCallback+0x1a6>
				{
					Difference2 = IC_Val4 - IC_Val3;
 80015ee:	4b44      	ldr	r3, [pc, #272]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b42      	ldr	r3, [pc, #264]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	4a42      	ldr	r2, [pc, #264]	@ (8001704 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e00f      	b.n	800161e <HAL_TIM_IC_CaptureCallback+0x1c6>
				}

				else if (IC_Val3 > IC_Val4)
 80015fe:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d909      	bls.n	800161e <HAL_TIM_IC_CaptureCallback+0x1c6>
				{
					Difference2 = (0xffff - IC_Val3) + IC_Val4;
 800160a:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b3b      	ldr	r3, [pc, #236]	@ (80016fc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001618:	33ff      	adds	r3, #255	@ 0xff
 800161a:	4a3a      	ldr	r2, [pc, #232]	@ (8001704 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 800161c:	6013      	str	r3, [r2, #0]
				}

				Distance2 = Difference2 * .034/2;
 800161e:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fede 	bl	80003e4 <__aeabi_ui2d>
 8001628:	a32b      	add	r3, pc, #172	@ (adr r3, 80016d8 <HAL_TIM_IC_CaptureCallback+0x280>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe ff53 	bl	80004d8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001642:	f7ff f873 	bl	800072c <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff f9f3 	bl	8000a38 <__aeabi_d2uiz>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8001658:	801a      	strh	r2, [r3, #0]
				Is_First_Captured2 = 0;
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800166e:	621a      	str	r2, [r3, #32]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a12      	ldr	r2, [r2, #32]
 800167a:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0204 	bic.w	r2, r2, #4
 800168a:	60da      	str	r2, [r3, #12]
			}
		}

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7f1b      	ldrb	r3, [r3, #28]
 8001690:	2b04      	cmp	r3, #4
 8001692:	f040 81df 	bne.w	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
		{
			if (Is_First_Captured3==0)
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d13a      	bne.n	8001714 <HAL_TIM_IC_CaptureCallback+0x2bc>
			{
				IC_Val5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800169e:	2108      	movs	r1, #8
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f002 fff1 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80016aa:	6013      	str	r3, [r2, #0]
				Is_First_Captured3 = 1;
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6a1a      	ldr	r2, [r3, #32]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016c0:	621a      	str	r2, [r3, #32]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016d0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
			}
		}
	}
}
 80016d2:	e1bf      	b.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
 80016d4:	f3af 8000 	nop.w
 80016d8:	b020c49c 	.word	0xb020c49c
 80016dc:	3fa16872 	.word	0x3fa16872
 80016e0:	20000240 	.word	0x20000240
 80016e4:	20000204 	.word	0x20000204
 80016e8:	20000208 	.word	0x20000208
 80016ec:	2000022c 	.word	0x2000022c
 80016f0:	20000246 	.word	0x20000246
 80016f4:	20000314 	.word	0x20000314
 80016f8:	20000241 	.word	0x20000241
 80016fc:	2000020c 	.word	0x2000020c
 8001700:	20000210 	.word	0x20000210
 8001704:	20000230 	.word	0x20000230
 8001708:	20000248 	.word	0x20000248
 800170c:	20000242 	.word	0x20000242
 8001710:	20000214 	.word	0x20000214
			else if (Is_First_Captured3==1)
 8001714:	4b8e      	ldr	r3, [pc, #568]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	f040 819b 	bne.w	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
				IC_Val6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800171e:	2108      	movs	r1, #8
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f002 ffb1 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 8001726:	4603      	mov	r3, r0
 8001728:	4a8a      	ldr	r2, [pc, #552]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 800172a:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val6 > IC_Val5)
 8001734:	4b87      	ldr	r3, [pc, #540]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b87      	ldr	r3, [pc, #540]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x500>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d907      	bls.n	8001750 <HAL_TIM_IC_CaptureCallback+0x2f8>
					Difference3 = IC_Val6 - IC_Val5;
 8001740:	4b84      	ldr	r3, [pc, #528]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b84      	ldr	r3, [pc, #528]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x500>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a84      	ldr	r2, [pc, #528]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x504>)
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e00f      	b.n	8001770 <HAL_TIM_IC_CaptureCallback+0x318>
				else if (IC_Val5 > IC_Val6)
 8001750:	4b81      	ldr	r3, [pc, #516]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x500>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b7f      	ldr	r3, [pc, #508]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d909      	bls.n	8001770 <HAL_TIM_IC_CaptureCallback+0x318>
					Difference3 = (0xffff - IC_Val5) + IC_Val6;
 800175c:	4b7d      	ldr	r3, [pc, #500]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b7d      	ldr	r3, [pc, #500]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x500>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800176a:	33ff      	adds	r3, #255	@ 0xff
 800176c:	4a7b      	ldr	r2, [pc, #492]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x504>)
 800176e:	6013      	str	r3, [r2, #0]
				Distance3 = Difference3 * .034/2;
 8001770:	4b7a      	ldr	r3, [pc, #488]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe35 	bl	80003e4 <__aeabi_ui2d>
 800177a:	a373      	add	r3, pc, #460	@ (adr r3, 8001948 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe feaa 	bl	80004d8 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001794:	f7fe ffca 	bl	800072c <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff f94a 	bl	8000a38 <__aeabi_d2uiz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0x508>)
 80017aa:	801a      	strh	r2, [r3, #0]
				Is_First_Captured3 = 0;
 80017ac:	4b68      	ldr	r3, [pc, #416]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017c0:	621a      	str	r2, [r3, #32]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a12      	ldr	r2, [r2, #32]
 80017cc:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 80017ce:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x50c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	4b63      	ldr	r3, [pc, #396]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x50c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0208 	bic.w	r2, r2, #8
 80017dc:	60da      	str	r2, [r3, #12]
}
 80017de:	e139      	b.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
	else if (htim->Instance == TIM4) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a60      	ldr	r2, [pc, #384]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0x510>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	f040 8134 	bne.w	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7f1b      	ldrb	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	f040 8083 	bne.w	80018fc <HAL_TIM_IC_CaptureCallback+0x4a4>
			if (Is_First_Captured4==0)
 80017f6:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x514>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d11a      	bne.n	8001834 <HAL_TIM_IC_CaptureCallback+0x3dc>
				IC_Val7 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017fe:	2100      	movs	r1, #0
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f002 ff41 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 8001806:	4603      	mov	r3, r0
 8001808:	4a59      	ldr	r2, [pc, #356]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 800180a:	6013      	str	r3, [r2, #0]
				Is_First_Captured4 = 1;
 800180c:	4b57      	ldr	r3, [pc, #348]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x514>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 020a 	bic.w	r2, r2, #10
 8001820:	621a      	str	r2, [r3, #32]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0202 	orr.w	r2, r2, #2
 8001830:	621a      	str	r2, [r3, #32]
 8001832:	e063      	b.n	80018fc <HAL_TIM_IC_CaptureCallback+0x4a4>
			else if (Is_First_Captured4==1)
 8001834:	4b4d      	ldr	r3, [pc, #308]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x514>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d15f      	bne.n	80018fc <HAL_TIM_IC_CaptureCallback+0x4a4>
				IC_Val8 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800183c:	2100      	movs	r1, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f002 ff22 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 8001844:	4603      	mov	r3, r0
 8001846:	4a4b      	ldr	r2, [pc, #300]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 8001848:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val8 > IC_Val7)
 8001852:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d907      	bls.n	800186e <HAL_TIM_IC_CaptureCallback+0x416>
					Difference4 = IC_Val8 - IC_Val7;
 800185e:	4b45      	ldr	r3, [pc, #276]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b43      	ldr	r3, [pc, #268]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4a43      	ldr	r2, [pc, #268]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x520>)
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e00f      	b.n	800188e <HAL_TIM_IC_CaptureCallback+0x436>
				else if (IC_Val7 > IC_Val8)
 800186e:	4b40      	ldr	r3, [pc, #256]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d909      	bls.n	800188e <HAL_TIM_IC_CaptureCallback+0x436>
					Difference4 = (0xffff - IC_Val7) + IC_Val8;
 800187a:	4b3e      	ldr	r3, [pc, #248]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x51c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x518>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001888:	33ff      	adds	r3, #255	@ 0xff
 800188a:	4a3b      	ldr	r2, [pc, #236]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x520>)
 800188c:	6013      	str	r3, [r2, #0]
				Distance4 = Difference4 * .034/2;
 800188e:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x520>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fda6 	bl	80003e4 <__aeabi_ui2d>
 8001898:	a32b      	add	r3, pc, #172	@ (adr r3, 8001948 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fe1b 	bl	80004d8 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018b2:	f7fe ff3b 	bl	800072c <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f8bb 	bl	8000a38 <__aeabi_d2uiz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b2d      	ldr	r3, [pc, #180]	@ (800197c <HAL_TIM_IC_CaptureCallback+0x524>)
 80018c8:	801a      	strh	r2, [r3, #0]
				Is_First_Captured4 = 0;
 80018ca:	4b28      	ldr	r3, [pc, #160]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x514>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 020a 	bic.w	r2, r2, #10
 80018de:	621a      	str	r2, [r3, #32]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a12      	ldr	r2, [r2, #32]
 80018ea:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80018ec:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x528>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x528>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0202 	bic.w	r2, r2, #2
 80018fa:	60da      	str	r2, [r3, #12]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7f1b      	ldrb	r3, [r3, #28]
 8001900:	2b02      	cmp	r3, #2
 8001902:	f040 80a7 	bne.w	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
			if (Is_First_Captured5==0)
 8001906:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x52c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d13e      	bne.n	800198c <HAL_TIM_IC_CaptureCallback+0x534>
				IC_Val9 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800190e:	2104      	movs	r1, #4
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f002 feb9 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 8001916:	4603      	mov	r3, r0
 8001918:	4a1b      	ldr	r2, [pc, #108]	@ (8001988 <HAL_TIM_IC_CaptureCallback+0x530>)
 800191a:	6013      	str	r3, [r2, #0]
				Is_First_Captured5 = 1;
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x52c>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a1a      	ldr	r2, [r3, #32]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001930:	621a      	str	r2, [r3, #32]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a1a      	ldr	r2, [r3, #32]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0220 	orr.w	r2, r2, #32
 8001940:	621a      	str	r2, [r3, #32]
}
 8001942:	e087      	b.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
 8001944:	f3af 8000 	nop.w
 8001948:	b020c49c 	.word	0xb020c49c
 800194c:	3fa16872 	.word	0x3fa16872
 8001950:	20000242 	.word	0x20000242
 8001954:	20000218 	.word	0x20000218
 8001958:	20000214 	.word	0x20000214
 800195c:	20000234 	.word	0x20000234
 8001960:	2000024a 	.word	0x2000024a
 8001964:	20000314 	.word	0x20000314
 8001968:	40000800 	.word	0x40000800
 800196c:	20000243 	.word	0x20000243
 8001970:	2000021c 	.word	0x2000021c
 8001974:	20000220 	.word	0x20000220
 8001978:	20000238 	.word	0x20000238
 800197c:	2000024c 	.word	0x2000024c
 8001980:	200003a4 	.word	0x200003a4
 8001984:	20000244 	.word	0x20000244
 8001988:	20000224 	.word	0x20000224
			else if (Is_First_Captured5==1)
 800198c:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0x610>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d15f      	bne.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x5fc>
				IC_Val10 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001994:	2104      	movs	r1, #4
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f002 fe76 	bl	8004688 <HAL_TIM_ReadCapturedValue>
 800199c:	4603      	mov	r3, r0
 800199e:	4a33      	ldr	r2, [pc, #204]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019a0:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val10 > IC_Val9)
 80019aa:	4b30      	ldr	r3, [pc, #192]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x618>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d907      	bls.n	80019c6 <HAL_TIM_IC_CaptureCallback+0x56e>
					Difference5 = IC_Val10 - IC_Val9;
 80019b6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x618>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x61c>)
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e00f      	b.n	80019e6 <HAL_TIM_IC_CaptureCallback+0x58e>
				else if (IC_Val9 > IC_Val10)
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x618>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d909      	bls.n	80019e6 <HAL_TIM_IC_CaptureCallback+0x58e>
					Difference5 = (0xffff - IC_Val9) + IC_Val10;
 80019d2:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x614>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x618>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80019e0:	33ff      	adds	r3, #255	@ 0xff
 80019e2:	4a24      	ldr	r2, [pc, #144]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x61c>)
 80019e4:	6013      	str	r3, [r2, #0]
				Distance5 = Difference5 * .034/2;
 80019e6:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x61c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fcfa 	bl	80003e4 <__aeabi_ui2d>
 80019f0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a60 <HAL_TIM_IC_CaptureCallback+0x608>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fd6f 	bl	80004d8 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a0a:	f7fe fe8f 	bl	800072c <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f80f 	bl	8000a38 <__aeabi_d2uiz>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_TIM_IC_CaptureCallback+0x620>)
 8001a20:	801a      	strh	r2, [r3, #0]
				Is_First_Captured5 = 0;
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0x610>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001a36:	621a      	str	r2, [r3, #32]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a12      	ldr	r2, [r2, #32]
 8001a42:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 8001a44:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x624>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x624>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0204 	bic.w	r2, r2, #4
 8001a52:	60da      	str	r2, [r3, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	f3af 8000 	nop.w
 8001a60:	b020c49c 	.word	0xb020c49c
 8001a64:	3fa16872 	.word	0x3fa16872
 8001a68:	20000244 	.word	0x20000244
 8001a6c:	20000228 	.word	0x20000228
 8001a70:	20000224 	.word	0x20000224
 8001a74:	2000023c 	.word	0x2000023c
 8001a78:	2000024e 	.word	0x2000024e
 8001a7c:	200003a4 	.word	0x200003a4

08001a80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a45      	ldr	r2, [pc, #276]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x124>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d14f      	bne.n	8001b32 <HAL_UART_RxCpltCallback+0xb2>
		for (int i = 0; i < 4; i++) {
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e029      	b.n	8001aec <HAL_UART_RxCpltCallback+0x6c>
			if (uwb_buf[(i + 1) % 4] == '.') {
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	425a      	negs	r2, r3
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	bf58      	it	pl
 8001aa8:	4253      	negpl	r3, r2
 8001aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ba8 <HAL_UART_RxCpltCallback+0x128>)
 8001aac:	5cd3      	ldrb	r3, [r2, r3]
 8001aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ab0:	d119      	bne.n	8001ae6 <HAL_UART_RxCpltCallback+0x66>
				for (int j = 0; j < 4; j++) {
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	e013      	b.n	8001ae0 <HAL_UART_RxCpltCallback+0x60>
					fe_data[j] = uwb_buf[(i + j) % 4];
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	4413      	add	r3, r2
 8001abe:	425a      	negs	r2, r3
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	f002 0203 	and.w	r2, r2, #3
 8001ac8:	bf58      	it	pl
 8001aca:	4253      	negpl	r3, r2
 8001acc:	4a36      	ldr	r2, [pc, #216]	@ (8001ba8 <HAL_UART_RxCpltCallback+0x128>)
 8001ace:	5cd1      	ldrb	r1, [r2, r3]
 8001ad0:	4a36      	ldr	r2, [pc, #216]	@ (8001bac <HAL_UART_RxCpltCallback+0x12c>)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	dde8      	ble.n	8001ab8 <HAL_UART_RxCpltCallback+0x38>
		for (int i = 0; i < 4; i++) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	ddd2      	ble.n	8001a98 <HAL_UART_RxCpltCallback+0x18>
				}
			}
		}

		fe_data[4] = '\0';
 8001af2:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <HAL_UART_RxCpltCallback+0x12c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	711a      	strb	r2, [r3, #4]

		sscanf(fe_data, "%f", &dis);
 8001af8:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb0 <HAL_UART_RxCpltCallback+0x130>)
 8001afa:	492e      	ldr	r1, [pc, #184]	@ (8001bb4 <HAL_UART_RxCpltCallback+0x134>)
 8001afc:	482b      	ldr	r0, [pc, #172]	@ (8001bac <HAL_UART_RxCpltCallback+0x12c>)
 8001afe:	f004 facb 	bl	8006098 <siscanf>

		dis = roundf(dis * 100) / 100;
 8001b02:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <HAL_UART_RxCpltCallback+0x130>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	492c      	ldr	r1, [pc, #176]	@ (8001bb8 <HAL_UART_RxCpltCallback+0x138>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f913 	bl	8000d34 <__aeabi_fmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f007 fe2f 	bl	8009774 <roundf>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4927      	ldr	r1, [pc, #156]	@ (8001bb8 <HAL_UART_RxCpltCallback+0x138>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f9be 	bl	8000e9c <__aeabi_fdiv>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <HAL_UART_RxCpltCallback+0x130>)
 8001b26:	601a      	str	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart1, &uwb_buf, 4);
 8001b28:	2204      	movs	r2, #4
 8001b2a:	491f      	ldr	r1, [pc, #124]	@ (8001ba8 <HAL_UART_RxCpltCallback+0x128>)
 8001b2c:	4823      	ldr	r0, [pc, #140]	@ (8001bbc <HAL_UART_RxCpltCallback+0x13c>)
 8001b2e:	f003 fa89 	bl	8005044 <HAL_UART_Receive_IT>
	}

    if (huart->Instance == USART3) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_UART_RxCpltCallback+0x140>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d12f      	bne.n	8001b9c <HAL_UART_RxCpltCallback+0x11c>
		if (rx_byte == '/') {
 8001b3c:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x144>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b42:	d113      	bne.n	8001b6c <HAL_UART_RxCpltCallback+0xec>
			rx_buf[rx_index] = rx_byte;
 8001b44:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x144>)
 8001b4c:	7819      	ldrb	r1, [r3, #0]
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <HAL_UART_RxCpltCallback+0x14c>)
 8001b50:	5499      	strb	r1, [r3, r2]
			rx_buf[rx_index + 1] = '\0';
 8001b52:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a1c      	ldr	r2, [pc, #112]	@ (8001bcc <HAL_UART_RxCpltCallback+0x14c>)
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	54d1      	strb	r1, [r2, r3]
			rx_flag = 1;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <HAL_UART_RxCpltCallback+0x150>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8001b64:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e012      	b.n	8001b92 <HAL_UART_RxCpltCallback+0x112>
		} else {
			if (rx_index < RX_BUF_SIZE - 1) {
 8001b6c:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b1e      	cmp	r3, #30
 8001b72:	d80b      	bhi.n	8001b8c <HAL_UART_RxCpltCallback+0x10c>
				rx_buf[rx_index++] = rx_byte;
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	b2d1      	uxtb	r1, r2
 8001b7c:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b7e:	7011      	strb	r1, [r2, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x144>)
 8001b84:	7819      	ldrb	r1, [r3, #0]
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_UART_RxCpltCallback+0x14c>)
 8001b88:	5499      	strb	r1, [r3, r2]
 8001b8a:	e002      	b.n	8001b92 <HAL_UART_RxCpltCallback+0x112>
			} else {
				rx_index = 0;
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x148>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	490b      	ldr	r1, [pc, #44]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x144>)
 8001b96:	480f      	ldr	r0, [pc, #60]	@ (8001bd4 <HAL_UART_RxCpltCallback+0x154>)
 8001b98:	f003 fa54 	bl	8005044 <HAL_UART_Receive_IT>
    }
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	20000268 	.word	0x20000268
 8001bac:	2000026c 	.word	0x2000026c
 8001bb0:	20000284 	.word	0x20000284
 8001bb4:	080097d8 	.word	0x080097d8
 8001bb8:	42c80000 	.word	0x42c80000
 8001bbc:	200003ec 	.word	0x200003ec
 8001bc0:	40004800 	.word	0x40004800
 8001bc4:	2000029c 	.word	0x2000029c
 8001bc8:	200002c0 	.word	0x200002c0
 8001bcc:	200002a0 	.word	0x200002a0
 8001bd0:	200002c1 	.word	0x200002c1
 8001bd4:	2000047c 	.word	0x2000047c

08001bd8 <d_w>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	delay_count = 0;
	ultra_delay5 = 1;
}

float d_w(float dis) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	if (dis < 0.8) {
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fc21 	bl	8000428 <__aeabi_f2d>
 8001be6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001c10 <d_w+0x38>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fee6 	bl	80009bc <__aeabi_dcmplt>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <d_w+0x2a>
		return dis * 1.25;
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <d_w+0x40>)
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff f89b 	bl	8000d34 <__aeabi_fmul>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	e001      	b.n	8001c06 <d_w+0x2e>
	}
	else {
		return 1.0;
 8001c02:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
	}
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	3fe99999 	.word	0x3fe99999
 8001c18:	3fa00000 	.word	0x3fa00000
 8001c1c:	00000000 	.word	0x00000000

08001c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c24:	f001 f888 	bl	8002d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c28:	f000 fa70 	bl	800210c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c2c:	f7ff fa7e 	bl	800112c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c30:	f000 ff28 	bl	8002a84 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001c34:	f000 fcf6 	bl	8002624 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001c38:	f000 fefa 	bl	8002a30 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001c3c:	f000 fc1c 	bl	8002478 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c40:	f000 fc6a 	bl	8002518 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001c44:	f000 fd6e 	bl	8002724 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001c48:	f000 ff46 	bl	8002ad8 <MX_USART3_UART_Init>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&htim1);

  sensor_part5 = 1;*/

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	483e      	ldr	r0, [pc, #248]	@ (8001d48 <main+0x128>)
 8001c50:	f002 f90a 	bl	8003e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c54:	2104      	movs	r1, #4
 8001c56:	483c      	ldr	r0, [pc, #240]	@ (8001d48 <main+0x128>)
 8001c58:	f002 f906 	bl	8003e68 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, &uwb_buf, 4);
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	493b      	ldr	r1, [pc, #236]	@ (8001d4c <main+0x12c>)
 8001c60:	483b      	ldr	r0, [pc, #236]	@ (8001d50 <main+0x130>)
 8001c62:	f003 f9ef 	bl	8005044 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8001c66:	2201      	movs	r2, #1
 8001c68:	493a      	ldr	r1, [pc, #232]	@ (8001d54 <main+0x134>)
 8001c6a:	483b      	ldr	r0, [pc, #236]	@ (8001d58 <main+0x138>)
 8001c6c:	f003 f9ea 	bl	8005044 <HAL_UART_Receive_IT>
	  else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }*/


	  if (rx_flag) {
 8001c70:	4b3a      	ldr	r3, [pc, #232]	@ (8001d5c <main+0x13c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <main+0x6a>
	      rx_flag = 0;
 8001c7a:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <main+0x13c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]

	      sscanf(rx_buf, "%d/", &rx_theta);
 8001c80:	4a37      	ldr	r2, [pc, #220]	@ (8001d60 <main+0x140>)
 8001c82:	4938      	ldr	r1, [pc, #224]	@ (8001d64 <main+0x144>)
 8001c84:	4838      	ldr	r0, [pc, #224]	@ (8001d68 <main+0x148>)
 8001c86:	f004 fa07 	bl	8006098 <siscanf>

/*	  if (dis > 0.79) {
		  dis = 0.79;
	  }*/

	  theta = -(rx_theta);
 8001c8a:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <main+0x140>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	425b      	negs	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fffb 	bl	8000c8c <__aeabi_i2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a34      	ldr	r2, [pc, #208]	@ (8001d6c <main+0x14c>)
 8001c9a:	6013      	str	r3, [r2, #0]

	  if (theta > -20 && theta < 20) {
 8001c9c:	4b33      	ldr	r3, [pc, #204]	@ (8001d6c <main+0x14c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4933      	ldr	r1, [pc, #204]	@ (8001d70 <main+0x150>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fa02 	bl	80010ac <__aeabi_fcmpgt>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00c      	beq.n	8001cc8 <main+0xa8>
 8001cae:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <main+0x14c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4930      	ldr	r1, [pc, #192]	@ (8001d74 <main+0x154>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f9db 	bl	8001070 <__aeabi_fcmplt>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <main+0xa8>
		  theta = 0;
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <main+0x14c>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
	  }

	  theta = 0;
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <main+0x14c>)
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

	  D_w = d_w(dis);
 8001cd0:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <main+0x158>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff7f 	bl	8001bd8 <d_w>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a27      	ldr	r2, [pc, #156]	@ (8001d7c <main+0x15c>)
 8001cde:	6013      	str	r3, [r2, #0]

	  if (dis >= 0.8) {
 8001ce0:	4b25      	ldr	r3, [pc, #148]	@ (8001d78 <main+0x158>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fb9f 	bl	8000428 <__aeabi_f2d>
 8001cea:	a315      	add	r3, pc, #84	@ (adr r3, 8001d40 <main+0x120>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fe78 	bl	80009e4 <__aeabi_dcmpge>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d046      	beq.n	8001d88 <main+0x168>
		  V = K_v * (dis - 0.8);
 8001cfa:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <main+0x160>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fb92 	bl	8000428 <__aeabi_f2d>
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <main+0x158>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fb8b 	bl	8000428 <__aeabi_f2d>
 8001d12:	a30b      	add	r3, pc, #44	@ (adr r3, 8001d40 <main+0x120>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fa26 	bl	8000168 <__aeabi_dsub>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4620      	mov	r0, r4
 8001d22:	4629      	mov	r1, r5
 8001d24:	f7fe fbd8 	bl	80004d8 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe fea2 	bl	8000a78 <__aeabi_d2f>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <main+0x164>)
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e031      	b.n	8001da0 <main+0x180>
 8001d3c:	f3af 8000 	nop.w
 8001d40:	9999999a 	.word	0x9999999a
 8001d44:	3fe99999 	.word	0x3fe99999
 8001d48:	2000035c 	.word	0x2000035c
 8001d4c:	20000268 	.word	0x20000268
 8001d50:	200003ec 	.word	0x200003ec
 8001d54:	2000029c 	.word	0x2000029c
 8001d58:	2000047c 	.word	0x2000047c
 8001d5c:	200002c1 	.word	0x200002c1
 8001d60:	200002c4 	.word	0x200002c4
 8001d64:	080097dc 	.word	0x080097dc
 8001d68:	200002a0 	.word	0x200002a0
 8001d6c:	20000288 	.word	0x20000288
 8001d70:	c1a00000 	.word	0xc1a00000
 8001d74:	41a00000 	.word	0x41a00000
 8001d78:	20000284 	.word	0x20000284
 8001d7c:	20000298 	.word	0x20000298
 8001d80:	20000008 	.word	0x20000008
 8001d84:	2000028c 	.word	0x2000028c
	  }
	  else {
		  V = K_t * dis;
 8001d88:	4b99      	ldr	r3, [pc, #612]	@ (8001ff0 <main+0x3d0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a99      	ldr	r2, [pc, #612]	@ (8001ff4 <main+0x3d4>)
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ffce 	bl	8000d34 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b96      	ldr	r3, [pc, #600]	@ (8001ff8 <main+0x3d8>)
 8001d9e:	601a      	str	r2, [r3, #0]
	  }

	  W = K_w * theta * PI / 180;
 8001da0:	4b96      	ldr	r3, [pc, #600]	@ (8001ffc <main+0x3dc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a96      	ldr	r2, [pc, #600]	@ (8002000 <main+0x3e0>)
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ffc2 	bl	8000d34 <__aeabi_fmul>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fb38 	bl	8000428 <__aeabi_f2d>
 8001db8:	a387      	add	r3, pc, #540	@ (adr r3, 8001fd8 <main+0x3b8>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fb8b 	bl	80004d8 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b8d      	ldr	r3, [pc, #564]	@ (8002004 <main+0x3e4>)
 8001dd0:	f7fe fcac 	bl	800072c <__aeabi_ddiv>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe fe4c 	bl	8000a78 <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a89      	ldr	r2, [pc, #548]	@ (8002008 <main+0x3e8>)
 8001de4:	6013      	str	r3, [r2, #0]
	  W_test = W * b / 2;
 8001de6:	4b88      	ldr	r3, [pc, #544]	@ (8002008 <main+0x3e8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a88      	ldr	r2, [pc, #544]	@ (800200c <main+0x3ec>)
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe ff9f 	bl	8000d34 <__aeabi_fmul>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f84d 	bl	8000e9c <__aeabi_fdiv>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b82      	ldr	r3, [pc, #520]	@ (8002010 <main+0x3f0>)
 8001e08:	601a      	str	r2, [r3, #0]

	  w_L = ((V - W * b / 2) / r) * D_w;
 8001e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff8 <main+0x3d8>)
 8001e0c:	681c      	ldr	r4, [r3, #0]
 8001e0e:	4b7e      	ldr	r3, [pc, #504]	@ (8002008 <main+0x3e8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a7e      	ldr	r2, [pc, #504]	@ (800200c <main+0x3ec>)
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe ff8b 	bl	8000d34 <__aeabi_fmul>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f839 	bl	8000e9c <__aeabi_fdiv>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7fe fe76 	bl	8000b20 <__aeabi_fsub>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b76      	ldr	r3, [pc, #472]	@ (8002014 <main+0x3f4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f7ff f82c 	bl	8000e9c <__aeabi_fdiv>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b73      	ldr	r3, [pc, #460]	@ (8002018 <main+0x3f8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f7fe ff70 	bl	8000d34 <__aeabi_fmul>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b70      	ldr	r3, [pc, #448]	@ (800201c <main+0x3fc>)
 8001e5a:	601a      	str	r2, [r3, #0]
	  w_R = ((V + W * b / 2) / r) * D_w;
 8001e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002008 <main+0x3e8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a6a      	ldr	r2, [pc, #424]	@ (800200c <main+0x3ec>)
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ff64 	bl	8000d34 <__aeabi_fmul>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f812 	bl	8000e9c <__aeabi_fdiv>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff8 <main+0x3d8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f7fe fe4e 	bl	8000b24 <__addsf3>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b61      	ldr	r3, [pc, #388]	@ (8002014 <main+0x3f4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff f802 	bl	8000e9c <__aeabi_fdiv>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002018 <main+0x3f8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f7fe ff46 	bl	8000d34 <__aeabi_fmul>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b5c      	ldr	r3, [pc, #368]	@ (8002020 <main+0x400>)
 8001eae:	601a      	str	r2, [r3, #0]

/*	  w_L = (V - W * b / 2) / r;
	  w_R = (V + W * b / 2) / r;*/

	  PWM1_value = w_L / 26.28 * 100;
 8001eb0:	4b5a      	ldr	r3, [pc, #360]	@ (800201c <main+0x3fc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fab7 	bl	8000428 <__aeabi_f2d>
 8001eba:	a349      	add	r3, pc, #292	@ (adr r3, 8001fe0 <main+0x3c0>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fc34 	bl	800072c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	4b54      	ldr	r3, [pc, #336]	@ (8002024 <main+0x404>)
 8001ed2:	f7fe fb01 	bl	80004d8 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fdab 	bl	8000a38 <__aeabi_d2uiz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a50      	ldr	r2, [pc, #320]	@ (8002028 <main+0x408>)
 8001ee6:	6013      	str	r3, [r2, #0]
	  PWM2_value = w_R / 26.28 * 100;
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8002020 <main+0x400>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fa9b 	bl	8000428 <__aeabi_f2d>
 8001ef2:	a33b      	add	r3, pc, #236	@ (adr r3, 8001fe0 <main+0x3c0>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fc18 	bl	800072c <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b46      	ldr	r3, [pc, #280]	@ (8002024 <main+0x404>)
 8001f0a:	f7fe fae5 	bl	80004d8 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fd8f 	bl	8000a38 <__aeabi_d2uiz>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a43      	ldr	r2, [pc, #268]	@ (800202c <main+0x40c>)
 8001f1e:	6013      	str	r3, [r2, #0]

	  if (PWM1_value > 100) {
 8001f20:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <main+0x408>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b64      	cmp	r3, #100	@ 0x64
 8001f26:	d902      	bls.n	8001f2e <main+0x30e>
	    	PWM1_value = 100;
 8001f28:	4b3f      	ldr	r3, [pc, #252]	@ (8002028 <main+0x408>)
 8001f2a:	2264      	movs	r2, #100	@ 0x64
 8001f2c:	601a      	str	r2, [r3, #0]
	  }
	  if (PWM2_value > 100) {
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800202c <main+0x40c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b64      	cmp	r3, #100	@ 0x64
 8001f34:	d902      	bls.n	8001f3c <main+0x31c>
		  PWM2_value = 100;
 8001f36:	4b3d      	ldr	r3, [pc, #244]	@ (800202c <main+0x40c>)
 8001f38:	2264      	movs	r2, #100	@ 0x64
 8001f3a:	601a      	str	r2, [r3, #0]
	  }

	  if (dis >= 0.8) {
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <main+0x3d4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fa71 	bl	8000428 <__aeabi_f2d>
 8001f46:	a328      	add	r3, pc, #160	@ (adr r3, 8001fe8 <main+0x3c8>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fd4a 	bl	80009e4 <__aeabi_dcmpge>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d076      	beq.n	8002044 <main+0x424>
		  if (theta > 45 || theta < -45) {
 8001f56:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <main+0x3e0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4935      	ldr	r1, [pc, #212]	@ (8002030 <main+0x410>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff f8a5 	bl	80010ac <__aeabi_fcmpgt>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d108      	bne.n	8001f7a <main+0x35a>
 8001f68:	4b25      	ldr	r3, [pc, #148]	@ (8002000 <main+0x3e0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4931      	ldr	r1, [pc, #196]	@ (8002034 <main+0x414>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f87e 	bl	8001070 <__aeabi_fcmplt>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d016      	beq.n	8001fa8 <main+0x388>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f80:	482d      	ldr	r0, [pc, #180]	@ (8002038 <main+0x418>)
 8001f82:	f001 fa7f 	bl	8003484 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001f86:	2201      	movs	r2, #1
 8001f88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f8c:	482b      	ldr	r0, [pc, #172]	@ (800203c <main+0x41c>)
 8001f8e:	f001 fa79 	bl	8003484 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
 8001f92:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <main+0x420>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a24      	ldr	r2, [pc, #144]	@ (8002028 <main+0x408>)
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	639a      	str	r2, [r3, #56]	@ 0x38
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
 8001f9c:	4b28      	ldr	r3, [pc, #160]	@ (8002040 <main+0x420>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a22      	ldr	r2, [pc, #136]	@ (800202c <main+0x40c>)
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fa6:	e097      	b.n	80020d8 <main+0x4b8>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fae:	4822      	ldr	r0, [pc, #136]	@ (8002038 <main+0x418>)
 8001fb0:	f001 fa68 	bl	8003484 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fba:	4820      	ldr	r0, [pc, #128]	@ (800203c <main+0x41c>)
 8001fbc:	f001 fa62 	bl	8003484 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <main+0x420>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a18      	ldr	r2, [pc, #96]	@ (8002028 <main+0x408>)
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	639a      	str	r2, [r3, #56]	@ 0x38
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <main+0x420>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a17      	ldr	r2, [pc, #92]	@ (800202c <main+0x40c>)
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fd4:	e64c      	b.n	8001c70 <main+0x50>
 8001fd6:	bf00      	nop
 8001fd8:	54411744 	.word	0x54411744
 8001fdc:	400921fb 	.word	0x400921fb
 8001fe0:	147ae148 	.word	0x147ae148
 8001fe4:	403a47ae 	.word	0x403a47ae
 8001fe8:	9999999a 	.word	0x9999999a
 8001fec:	3fe99999 	.word	0x3fe99999
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	20000284 	.word	0x20000284
 8001ff8:	2000028c 	.word	0x2000028c
 8001ffc:	2000000c 	.word	0x2000000c
 8002000:	20000288 	.word	0x20000288
 8002004:	40668000 	.word	0x40668000
 8002008:	20000290 	.word	0x20000290
 800200c:	20000004 	.word	0x20000004
 8002010:	20000294 	.word	0x20000294
 8002014:	20000000 	.word	0x20000000
 8002018:	20000298 	.word	0x20000298
 800201c:	20000274 	.word	0x20000274
 8002020:	20000278 	.word	0x20000278
 8002024:	40590000 	.word	0x40590000
 8002028:	2000027c 	.word	0x2000027c
 800202c:	20000280 	.word	0x20000280
 8002030:	42340000 	.word	0x42340000
 8002034:	c2340000 	.word	0xc2340000
 8002038:	40010800 	.word	0x40010800
 800203c:	40010c00 	.word	0x40010c00
 8002040:	2000035c 	.word	0x2000035c
		  }
	  }
	  else if (dis < 0.8) {
 8002044:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <main+0x4c8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f9ed 	bl	8000428 <__aeabi_f2d>
 800204e:	a324      	add	r3, pc, #144	@ (adr r3, 80020e0 <main+0x4c0>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fcb2 	bl	80009bc <__aeabi_dcmplt>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03c      	beq.n	80020d8 <main+0x4b8>
		  if (theta > 45 || theta < -45) {
 800205e:	4b23      	ldr	r3, [pc, #140]	@ (80020ec <main+0x4cc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4923      	ldr	r1, [pc, #140]	@ (80020f0 <main+0x4d0>)
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f821 	bl	80010ac <__aeabi_fcmpgt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d108      	bne.n	8002082 <main+0x462>
 8002070:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <main+0x4cc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	491f      	ldr	r1, [pc, #124]	@ (80020f4 <main+0x4d4>)
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fffa 	bl	8001070 <__aeabi_fcmplt>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <main+0x490>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002088:	481b      	ldr	r0, [pc, #108]	@ (80020f8 <main+0x4d8>)
 800208a:	f001 f9fb 	bl	8003484 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800208e:	2201      	movs	r2, #1
 8002090:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002094:	4819      	ldr	r0, [pc, #100]	@ (80020fc <main+0x4dc>)
 8002096:	f001 f9f5 	bl	8003484 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
 800209a:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <main+0x4e0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a19      	ldr	r2, [pc, #100]	@ (8002104 <main+0x4e4>)
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	639a      	str	r2, [r3, #56]	@ 0x38
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
 80020a4:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <main+0x4e0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	@ (8002108 <main+0x4e8>)
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ae:	e013      	b.n	80020d8 <main+0x4b8>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80020b0:	2201      	movs	r2, #1
 80020b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020b6:	4810      	ldr	r0, [pc, #64]	@ (80020f8 <main+0x4d8>)
 80020b8:	f001 f9e4 	bl	8003484 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80020bc:	2201      	movs	r2, #1
 80020be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020c2:	480e      	ldr	r0, [pc, #56]	@ (80020fc <main+0x4dc>)
 80020c4:	f001 f9de 	bl	8003484 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80020c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <main+0x4e0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	639a      	str	r2, [r3, #56]	@ 0x38
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <main+0x4e0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	635a      	str	r2, [r3, #52]	@ 0x34
	  if (rx_flag) {
 80020d8:	e5ca      	b.n	8001c70 <main+0x50>
 80020da:	bf00      	nop
 80020dc:	f3af 8000 	nop.w
 80020e0:	9999999a 	.word	0x9999999a
 80020e4:	3fe99999 	.word	0x3fe99999
 80020e8:	20000284 	.word	0x20000284
 80020ec:	20000288 	.word	0x20000288
 80020f0:	42340000 	.word	0x42340000
 80020f4:	c2340000 	.word	0xc2340000
 80020f8:	40010800 	.word	0x40010800
 80020fc:	40010c00 	.word	0x40010c00
 8002100:	2000035c 	.word	0x2000035c
 8002104:	2000027c 	.word	0x2000027c
 8002108:	20000280 	.word	0x20000280

0800210c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b090      	sub	sp, #64	@ 0x40
 8002110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	2228      	movs	r2, #40	@ 0x28
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f004 f82b 	bl	8006176 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800212e:	2301      	movs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002132:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002136:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800213c:	2301      	movs	r3, #1
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002140:	2302      	movs	r3, #2
 8002142:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002144:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002148:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800214a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800214e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002150:	f107 0318 	add.w	r3, r7, #24
 8002154:	4618      	mov	r0, r3
 8002156:	f001 f9cf 	bl	80034f8 <HAL_RCC_OscConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002160:	f000 f819 	bl	8002196 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002164:	230f      	movs	r3, #15
 8002166:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002168:	2302      	movs	r3, #2
 800216a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2102      	movs	r1, #2
 800217e:	4618      	mov	r0, r3
 8002180:	f001 fc3c 	bl	80039fc <HAL_RCC_ClockConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800218a:	f000 f804 	bl	8002196 <Error_Handler>
  }
}
 800218e:	bf00      	nop
 8002190:	3740      	adds	r7, #64	@ 0x40
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800219a:	b672      	cpsid	i
}
 800219c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219e:	bf00      	nop
 80021a0:	e7fd      	b.n	800219e <Error_Handler+0x8>
	...

080021a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <HAL_MspInit+0x5c>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <HAL_MspInit+0x5c>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6193      	str	r3, [r2, #24]
 80021b6:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <HAL_MspInit+0x5c>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <HAL_MspInit+0x5c>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002200 <HAL_MspInit+0x5c>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <HAL_MspInit+0x5c>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_MspInit+0x60>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <HAL_MspInit+0x60>)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40021000 	.word	0x40021000
 8002204:	40010000 	.word	0x40010000

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <NMI_Handler+0x4>

08002210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <MemManage_Handler+0x4>

08002220 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <UsageFault_Handler+0x4>

08002230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002258:	f000 fdb4 	bl	8002dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002264:	4802      	ldr	r0, [pc, #8]	@ (8002270 <TIM1_UP_IRQHandler+0x10>)
 8002266:	f001 fef9 	bl	800405c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200002cc 	.word	0x200002cc

08002274 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002278:	4802      	ldr	r0, [pc, #8]	@ (8002284 <TIM2_IRQHandler+0x10>)
 800227a:	f001 feef 	bl	800405c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000314 	.word	0x20000314

08002288 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800228c:	4802      	ldr	r0, [pc, #8]	@ (8002298 <TIM4_IRQHandler+0x10>)
 800228e:	f001 fee5 	bl	800405c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200003a4 	.word	0x200003a4

0800229c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022a0:	4802      	ldr	r0, [pc, #8]	@ (80022ac <USART1_IRQHandler+0x10>)
 80022a2:	f002 fef5 	bl	8005090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200003ec 	.word	0x200003ec

080022b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <USART2_IRQHandler+0x10>)
 80022b6:	f002 feeb 	bl	8005090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000434 	.word	0x20000434

080022c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <USART3_IRQHandler+0x10>)
 80022ca:	f002 fee1 	bl	8005090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000047c 	.word	0x2000047c

080022d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022e0:	f001 f8e8 	bl	80034b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <_kill>:

int _kill(int pid, int sig)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002300:	f003 ff88 	bl	8006214 <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	2216      	movs	r2, #22
 8002308:	601a      	str	r2, [r3, #0]
  return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_exit>:

void _exit (int status)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800231e:	f04f 31ff 	mov.w	r1, #4294967295
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffe7 	bl	80022f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <_exit+0x12>

0800232c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00a      	b.n	8002354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800233e:	f3af 8000 	nop.w
 8002342:	4601      	mov	r1, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf0      	blt.n	800233e <_read+0x12>
  }

  return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e009      	b.n	800238c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf1      	blt.n	8002378 <_write+0x12>
  }
  return len;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_close>:

int _close(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023c4:	605a      	str	r2, [r3, #4]
  return 0;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <_isatty>:

int _isatty(int file)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	@ (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	@ (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f003 fef0 	bl	8006214 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	@ (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20005000 	.word	0x20005000
 8002460:	00000400 	.word	0x00000400
 8002464:	200002c8 	.word	0x200002c8
 8002468:	20000618 	.word	0x20000618

0800246c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248c:	463b      	mov	r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002494:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <MX_TIM1_Init+0x98>)
 8002496:	4a1f      	ldr	r2, [pc, #124]	@ (8002514 <MX_TIM1_Init+0x9c>)
 8002498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800249a:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <MX_TIM1_Init+0x98>)
 800249c:	2247      	movs	r2, #71	@ 0x47
 800249e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <MX_TIM1_Init+0x98>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <MX_TIM1_Init+0x98>)
 80024a8:	2263      	movs	r2, #99	@ 0x63
 80024aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ac:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <MX_TIM1_Init+0x98>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024b2:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <MX_TIM1_Init+0x98>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b8:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <MX_TIM1_Init+0x98>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024be:	4814      	ldr	r0, [pc, #80]	@ (8002510 <MX_TIM1_Init+0x98>)
 80024c0:	f001 fc2a 	bl	8003d18 <HAL_TIM_Base_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80024ca:	f7ff fe64 	bl	8002196 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	4619      	mov	r1, r3
 80024da:	480d      	ldr	r0, [pc, #52]	@ (8002510 <MX_TIM1_Init+0x98>)
 80024dc:	f002 f80c 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80024e6:	f7ff fe56 	bl	8002196 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024f2:	463b      	mov	r3, r7
 80024f4:	4619      	mov	r1, r3
 80024f6:	4806      	ldr	r0, [pc, #24]	@ (8002510 <MX_TIM1_Init+0x98>)
 80024f8:	f002 fce4 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002502:	f7ff fe48 	bl	8002196 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200002cc 	.word	0x200002cc
 8002514:	40012c00 	.word	0x40012c00

08002518 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	@ 0x28
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0318 	add.w	r3, r7, #24
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002536:	463b      	mov	r3, r7
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002542:	4b37      	ldr	r3, [pc, #220]	@ (8002620 <MX_TIM2_Init+0x108>)
 8002544:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002548:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800254a:	4b35      	ldr	r3, [pc, #212]	@ (8002620 <MX_TIM2_Init+0x108>)
 800254c:	2247      	movs	r2, #71	@ 0x47
 800254e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b33      	ldr	r3, [pc, #204]	@ (8002620 <MX_TIM2_Init+0x108>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002556:	4b32      	ldr	r3, [pc, #200]	@ (8002620 <MX_TIM2_Init+0x108>)
 8002558:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800255c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255e:	4b30      	ldr	r3, [pc, #192]	@ (8002620 <MX_TIM2_Init+0x108>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <MX_TIM2_Init+0x108>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800256a:	482d      	ldr	r0, [pc, #180]	@ (8002620 <MX_TIM2_Init+0x108>)
 800256c:	f001 fbd4 	bl	8003d18 <HAL_TIM_Base_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002576:	f7ff fe0e 	bl	8002196 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800257e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002580:	f107 0318 	add.w	r3, r7, #24
 8002584:	4619      	mov	r1, r3
 8002586:	4826      	ldr	r0, [pc, #152]	@ (8002620 <MX_TIM2_Init+0x108>)
 8002588:	f001 ffb6 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002592:	f7ff fe00 	bl	8002196 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002596:	4822      	ldr	r0, [pc, #136]	@ (8002620 <MX_TIM2_Init+0x108>)
 8002598:	f001 fd08 	bl	8003fac <HAL_TIM_IC_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025a2:	f7ff fdf8 	bl	8002196 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	4619      	mov	r1, r3
 80025b4:	481a      	ldr	r0, [pc, #104]	@ (8002620 <MX_TIM2_Init+0x108>)
 80025b6:	f002 fc85 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80025c0:	f7ff fde9 	bl	8002196 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025c4:	2300      	movs	r3, #0
 80025c6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025c8:	2301      	movs	r3, #1
 80025ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	4619      	mov	r1, r3
 80025da:	4811      	ldr	r0, [pc, #68]	@ (8002620 <MX_TIM2_Init+0x108>)
 80025dc:	f001 fe2e 	bl	800423c <HAL_TIM_IC_ConfigChannel>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80025e6:	f7ff fdd6 	bl	8002196 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025ea:	463b      	mov	r3, r7
 80025ec:	2204      	movs	r2, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	480b      	ldr	r0, [pc, #44]	@ (8002620 <MX_TIM2_Init+0x108>)
 80025f2:	f001 fe23 	bl	800423c <HAL_TIM_IC_ConfigChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80025fc:	f7ff fdcb 	bl	8002196 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002600:	463b      	mov	r3, r7
 8002602:	2208      	movs	r2, #8
 8002604:	4619      	mov	r1, r3
 8002606:	4806      	ldr	r0, [pc, #24]	@ (8002620 <MX_TIM2_Init+0x108>)
 8002608:	f001 fe18 	bl	800423c <HAL_TIM_IC_ConfigChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8002612:	f7ff fdc0 	bl	8002196 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	@ 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000314 	.word	0x20000314

08002624 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08e      	sub	sp, #56	@ 0x38
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002638:	f107 0320 	add.w	r3, r7, #32
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002654:	4b31      	ldr	r3, [pc, #196]	@ (800271c <MX_TIM3_Init+0xf8>)
 8002656:	4a32      	ldr	r2, [pc, #200]	@ (8002720 <MX_TIM3_Init+0xfc>)
 8002658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800265a:	4b30      	ldr	r3, [pc, #192]	@ (800271c <MX_TIM3_Init+0xf8>)
 800265c:	2247      	movs	r2, #71	@ 0x47
 800265e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002660:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <MX_TIM3_Init+0xf8>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002666:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <MX_TIM3_Init+0xf8>)
 8002668:	2263      	movs	r2, #99	@ 0x63
 800266a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266c:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <MX_TIM3_Init+0xf8>)
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002672:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <MX_TIM3_Init+0xf8>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002678:	4828      	ldr	r0, [pc, #160]	@ (800271c <MX_TIM3_Init+0xf8>)
 800267a:	f001 fb4d 	bl	8003d18 <HAL_TIM_Base_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002684:	f7ff fd87 	bl	8002196 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800268e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002692:	4619      	mov	r1, r3
 8002694:	4821      	ldr	r0, [pc, #132]	@ (800271c <MX_TIM3_Init+0xf8>)
 8002696:	f001 ff2f 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80026a0:	f7ff fd79 	bl	8002196 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026a4:	481d      	ldr	r0, [pc, #116]	@ (800271c <MX_TIM3_Init+0xf8>)
 80026a6:	f001 fb86 	bl	8003db6 <HAL_TIM_PWM_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80026b0:	f7ff fd71 	bl	8002196 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026bc:	f107 0320 	add.w	r3, r7, #32
 80026c0:	4619      	mov	r1, r3
 80026c2:	4816      	ldr	r0, [pc, #88]	@ (800271c <MX_TIM3_Init+0xf8>)
 80026c4:	f002 fbfe 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80026ce:	f7ff fd62 	bl	8002196 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d2:	2360      	movs	r3, #96	@ 0x60
 80026d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	4619      	mov	r1, r3
 80026e8:	480c      	ldr	r0, [pc, #48]	@ (800271c <MX_TIM3_Init+0xf8>)
 80026ea:	f001 fe43 	bl	8004374 <HAL_TIM_PWM_ConfigChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80026f4:	f7ff fd4f 	bl	8002196 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2204      	movs	r2, #4
 80026fc:	4619      	mov	r1, r3
 80026fe:	4807      	ldr	r0, [pc, #28]	@ (800271c <MX_TIM3_Init+0xf8>)
 8002700:	f001 fe38 	bl	8004374 <HAL_TIM_PWM_ConfigChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800270a:	f7ff fd44 	bl	8002196 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800270e:	4803      	ldr	r0, [pc, #12]	@ (800271c <MX_TIM3_Init+0xf8>)
 8002710:	f000 f95c 	bl	80029cc <HAL_TIM_MspPostInit>

}
 8002714:	bf00      	nop
 8002716:	3738      	adds	r7, #56	@ 0x38
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	2000035c 	.word	0x2000035c
 8002720:	40000400 	.word	0x40000400

08002724 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	@ 0x28
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800272a:	f107 0318 	add.w	r3, r7, #24
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002742:	463b      	mov	r3, r7
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800274e:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <MX_TIM4_Init+0xf0>)
 8002750:	4a31      	ldr	r2, [pc, #196]	@ (8002818 <MX_TIM4_Init+0xf4>)
 8002752:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002754:	4b2f      	ldr	r3, [pc, #188]	@ (8002814 <MX_TIM4_Init+0xf0>)
 8002756:	2247      	movs	r2, #71	@ 0x47
 8002758:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275a:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <MX_TIM4_Init+0xf0>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8002760:	4b2c      	ldr	r3, [pc, #176]	@ (8002814 <MX_TIM4_Init+0xf0>)
 8002762:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002766:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002768:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <MX_TIM4_Init+0xf0>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276e:	4b29      	ldr	r3, [pc, #164]	@ (8002814 <MX_TIM4_Init+0xf0>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002774:	4827      	ldr	r0, [pc, #156]	@ (8002814 <MX_TIM4_Init+0xf0>)
 8002776:	f001 facf 	bl	8003d18 <HAL_TIM_Base_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002780:	f7ff fd09 	bl	8002196 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002788:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800278a:	f107 0318 	add.w	r3, r7, #24
 800278e:	4619      	mov	r1, r3
 8002790:	4820      	ldr	r0, [pc, #128]	@ (8002814 <MX_TIM4_Init+0xf0>)
 8002792:	f001 feb1 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800279c:	f7ff fcfb 	bl	8002196 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80027a0:	481c      	ldr	r0, [pc, #112]	@ (8002814 <MX_TIM4_Init+0xf0>)
 80027a2:	f001 fc03 	bl	8003fac <HAL_TIM_IC_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80027ac:	f7ff fcf3 	bl	8002196 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	4619      	mov	r1, r3
 80027be:	4815      	ldr	r0, [pc, #84]	@ (8002814 <MX_TIM4_Init+0xf0>)
 80027c0:	f002 fb80 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80027ca:	f7ff fce4 	bl	8002196 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027d2:	2301      	movs	r3, #1
 80027d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027de:	463b      	mov	r3, r7
 80027e0:	2200      	movs	r2, #0
 80027e2:	4619      	mov	r1, r3
 80027e4:	480b      	ldr	r0, [pc, #44]	@ (8002814 <MX_TIM4_Init+0xf0>)
 80027e6:	f001 fd29 	bl	800423c <HAL_TIM_IC_ConfigChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80027f0:	f7ff fcd1 	bl	8002196 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80027f4:	463b      	mov	r3, r7
 80027f6:	2204      	movs	r2, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	4806      	ldr	r0, [pc, #24]	@ (8002814 <MX_TIM4_Init+0xf0>)
 80027fc:	f001 fd1e 	bl	800423c <HAL_TIM_IC_ConfigChannel>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8002806:	f7ff fcc6 	bl	8002196 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	@ 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200003a4 	.word	0x200003a4
 8002818:	40000800 	.word	0x40000800

0800281c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08e      	sub	sp, #56	@ 0x38
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a5e      	ldr	r2, [pc, #376]	@ (80029b0 <HAL_TIM_Base_MspInit+0x194>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d114      	bne.n	8002866 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800283c:	4b5d      	ldr	r3, [pc, #372]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	4a5c      	ldr	r2, [pc, #368]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002842:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002846:	6193      	str	r3, [r2, #24]
 8002848:	4b5a      	ldr	r3, [pc, #360]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	2019      	movs	r0, #25
 800285a:	f000 fba6 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800285e:	2019      	movs	r0, #25
 8002860:	f000 fbbf 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002864:	e09f      	b.n	80029a6 <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286e:	d157      	bne.n	8002920 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002870:	4b50      	ldr	r3, [pc, #320]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	4a4f      	ldr	r2, [pc, #316]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	61d3      	str	r3, [r2, #28]
 800287c:	4b4d      	ldr	r3, [pc, #308]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002888:	4b4a      	ldr	r3, [pc, #296]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4a49      	ldr	r2, [pc, #292]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6193      	str	r3, [r2, #24]
 8002894:	4b47      	ldr	r3, [pc, #284]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a0:	4b44      	ldr	r3, [pc, #272]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	4a43      	ldr	r2, [pc, #268]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 80028a6:	f043 0308 	orr.w	r3, r3, #8
 80028aa:	6193      	str	r3, [r2, #24]
 80028ac:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028b8:	2303      	movs	r3, #3
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c8:	4619      	mov	r1, r3
 80028ca:	483b      	ldr	r0, [pc, #236]	@ (80029b8 <HAL_TIM_Base_MspInit+0x19c>)
 80028cc:	f000 fc56 	bl	800317c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e2:	4619      	mov	r1, r3
 80028e4:	4835      	ldr	r0, [pc, #212]	@ (80029bc <HAL_TIM_Base_MspInit+0x1a0>)
 80028e6:	f000 fc49 	bl	800317c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80028ea:	4b35      	ldr	r3, [pc, #212]	@ (80029c0 <HAL_TIM_Base_MspInit+0x1a4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028fa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80028fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002906:	637b      	str	r3, [r7, #52]	@ 0x34
 8002908:	4a2d      	ldr	r2, [pc, #180]	@ (80029c0 <HAL_TIM_Base_MspInit+0x1a4>)
 800290a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290c:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	201c      	movs	r0, #28
 8002914:	f000 fb49 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002918:	201c      	movs	r0, #28
 800291a:	f000 fb62 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 800291e:	e042      	b.n	80029a6 <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d10c      	bne.n	8002944 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292a:	4b22      	ldr	r3, [pc, #136]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a21      	ldr	r2, [pc, #132]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
}
 8002942:	e030      	b.n	80029a6 <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM4)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1f      	ldr	r2, [pc, #124]	@ (80029c8 <HAL_TIM_Base_MspInit+0x1ac>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d12b      	bne.n	80029a6 <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800294e:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	61d3      	str	r3, [r2, #28]
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	4a12      	ldr	r2, [pc, #72]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	6193      	str	r3, [r2, #24]
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <HAL_TIM_Base_MspInit+0x198>)
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800297e:	23c0      	movs	r3, #192	@ 0xc0
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002982:	2300      	movs	r3, #0
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800298e:	4619      	mov	r1, r3
 8002990:	480a      	ldr	r0, [pc, #40]	@ (80029bc <HAL_TIM_Base_MspInit+0x1a0>)
 8002992:	f000 fbf3 	bl	800317c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	201e      	movs	r0, #30
 800299c:	f000 fb05 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029a0:	201e      	movs	r0, #30
 80029a2:	f000 fb1e 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3738      	adds	r7, #56	@ 0x38
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40010800 	.word	0x40010800
 80029bc:	40010c00 	.word	0x40010c00
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800

080029cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a24 <HAL_TIM_MspPostInit+0x58>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d117      	bne.n	8002a1c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_TIM_MspPostInit+0x5c>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <HAL_TIM_MspPostInit+0x5c>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <HAL_TIM_MspPostInit+0x5c>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a04:	23c0      	movs	r3, #192	@ 0xc0
 8002a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	4619      	mov	r1, r3
 8002a16:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <HAL_TIM_MspPostInit+0x60>)
 8002a18:	f000 fbb0 	bl	800317c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a1c:	bf00      	nop
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010800 	.word	0x40010800

08002a30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a34:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	@ (8002a80 <MX_USART1_UART_Init+0x50>)
 8002a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a56:	220c      	movs	r2, #12
 8002a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a66:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a68:	f002 fa9c 	bl	8004fa4 <HAL_UART_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a72:	f7ff fb90 	bl	8002196 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200003ec 	.word	0x200003ec
 8002a80:	40013800 	.word	0x40013800

08002a84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ad4 <MX_USART2_UART_Init+0x50>)
 8002a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002aaa:	220c      	movs	r2, #12
 8002aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002abc:	f002 fa72 	bl	8004fa4 <HAL_UART_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ac6:	f7ff fb66 	bl	8002196 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000434 	.word	0x20000434
 8002ad4:	40004400 	.word	0x40004400

08002ad8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002ade:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <MX_USART3_UART_Init+0x50>)
 8002ae0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002ae4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ae8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002aea:	4b0e      	ldr	r3, [pc, #56]	@ (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002af6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002afc:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002afe:	220c      	movs	r2, #12
 8002b00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b02:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b0e:	4805      	ldr	r0, [pc, #20]	@ (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002b10:	f002 fa48 	bl	8004fa4 <HAL_UART_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b1a:	f7ff fb3c 	bl	8002196 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	2000047c 	.word	0x2000047c
 8002b28:	40004800 	.word	0x40004800

08002b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08e      	sub	sp, #56	@ 0x38
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a62      	ldr	r2, [pc, #392]	@ (8002cd0 <HAL_UART_MspInit+0x1a4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d13a      	bne.n	8002bc2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b4c:	4b61      	ldr	r3, [pc, #388]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4a60      	ldr	r2, [pc, #384]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002b52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b56:	6193      	str	r3, [r2, #24]
 8002b58:	4b5e      	ldr	r3, [pc, #376]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b60:	623b      	str	r3, [r7, #32]
 8002b62:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b64:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	4a5a      	ldr	r2, [pc, #360]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	6193      	str	r3, [r2, #24]
 8002b70:	4b58      	ldr	r3, [pc, #352]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b86:	2303      	movs	r3, #3
 8002b88:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4851      	ldr	r0, [pc, #324]	@ (8002cd8 <HAL_UART_MspInit+0x1ac>)
 8002b92:	f000 faf3 	bl	800317c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ba8:	4619      	mov	r1, r3
 8002baa:	484b      	ldr	r0, [pc, #300]	@ (8002cd8 <HAL_UART_MspInit+0x1ac>)
 8002bac:	f000 fae6 	bl	800317c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2025      	movs	r0, #37	@ 0x25
 8002bb6:	f000 f9f8 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bba:	2025      	movs	r0, #37	@ 0x25
 8002bbc:	f000 fa11 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002bc0:	e082      	b.n	8002cc8 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a45      	ldr	r2, [pc, #276]	@ (8002cdc <HAL_UART_MspInit+0x1b0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d12c      	bne.n	8002c26 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bcc:	4b41      	ldr	r3, [pc, #260]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	4a40      	ldr	r2, [pc, #256]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd6:	61d3      	str	r3, [r2, #28]
 8002bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	4a3a      	ldr	r2, [pc, #232]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	6193      	str	r3, [r2, #24]
 8002bf0:	4b38      	ldr	r3, [pc, #224]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2302      	movs	r3, #2
 8002c06:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4832      	ldr	r0, [pc, #200]	@ (8002cd8 <HAL_UART_MspInit+0x1ac>)
 8002c10:	f000 fab4 	bl	800317c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	2026      	movs	r0, #38	@ 0x26
 8002c1a:	f000 f9c6 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c1e:	2026      	movs	r0, #38	@ 0x26
 8002c20:	f000 f9df 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 8002c24:	e050      	b.n	8002cc8 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce0 <HAL_UART_MspInit+0x1b4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d14b      	bne.n	8002cc8 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c30:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a27      	ldr	r2, [pc, #156]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002c36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c3a:	61d3      	str	r3, [r2, #28]
 8002c3c:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c48:	4b22      	ldr	r3, [pc, #136]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4a21      	ldr	r2, [pc, #132]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002c4e:	f043 0310 	orr.w	r3, r3, #16
 8002c52:	6193      	str	r3, [r2, #24]
 8002c54:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <HAL_UART_MspInit+0x1a8>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c72:	4619      	mov	r1, r3
 8002c74:	481b      	ldr	r0, [pc, #108]	@ (8002ce4 <HAL_UART_MspInit+0x1b8>)
 8002c76:	f000 fa81 	bl	800317c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4815      	ldr	r0, [pc, #84]	@ (8002ce4 <HAL_UART_MspInit+0x1b8>)
 8002c90:	f000 fa74 	bl	800317c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002c94:	4b14      	ldr	r3, [pc, #80]	@ (8002ce8 <HAL_UART_MspInit+0x1bc>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cac:	f043 0310 	orr.w	r3, r3, #16
 8002cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce8 <HAL_UART_MspInit+0x1bc>)
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2100      	movs	r1, #0
 8002cbc:	2027      	movs	r0, #39	@ 0x27
 8002cbe:	f000 f974 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cc2:	2027      	movs	r0, #39	@ 0x27
 8002cc4:	f000 f98d 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 8002cc8:	bf00      	nop
 8002cca:	3738      	adds	r7, #56	@ 0x38
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40010800 	.word	0x40010800
 8002cdc:	40004400 	.word	0x40004400
 8002ce0:	40004800 	.word	0x40004800
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40010000 	.word	0x40010000

08002cec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cec:	f7ff fbbe 	bl	800246c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf0:	480b      	ldr	r0, [pc, #44]	@ (8002d20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cf2:	490c      	ldr	r1, [pc, #48]	@ (8002d24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8002d28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf8:	e002      	b.n	8002d00 <LoopCopyDataInit>

08002cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfe:	3304      	adds	r3, #4

08002d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d04:	d3f9      	bcc.n	8002cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d06:	4a09      	ldr	r2, [pc, #36]	@ (8002d2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d08:	4c09      	ldr	r4, [pc, #36]	@ (8002d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d0c:	e001      	b.n	8002d12 <LoopFillZerobss>

08002d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d10:	3204      	adds	r2, #4

08002d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d14:	d3fb      	bcc.n	8002d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d16:	f003 fa83 	bl	8006220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d1a:	f7fe ff81 	bl	8001c20 <main>
  bx lr
 8002d1e:	4770      	bx	lr
  ldr r0, =_sdata
 8002d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d24:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002d28:	08009c04 	.word	0x08009c04
  ldr r2, =_sbss
 8002d2c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d30:	20000614 	.word	0x20000614

08002d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d34:	e7fe      	b.n	8002d34 <ADC1_2_IRQHandler>
	...

08002d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_Init+0x28>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <HAL_Init+0x28>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f000 f923 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f000 f808 	bl	8002d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d54:	f7ff fa26 	bl	80021a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000

08002d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d6c:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <HAL_InitTick+0x54>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <HAL_InitTick+0x58>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f93b 	bl	8002ffe <HAL_SYSTICK_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00e      	b.n	8002db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d80a      	bhi.n	8002dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f000 f903 	bl	8002faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da4:	4a06      	ldr	r2, [pc, #24]	@ (8002dc0 <HAL_InitTick+0x5c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000014 	.word	0x20000014
 8002dbc:	2000001c 	.word	0x2000001c
 8002dc0:	20000018 	.word	0x20000018

08002dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_IncTick+0x1c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_IncTick+0x20>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a03      	ldr	r2, [pc, #12]	@ (8002de4 <HAL_IncTick+0x20>)
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	2000001c 	.word	0x2000001c
 8002de4:	200004c4 	.word	0x200004c4

08002de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return uwTick;
 8002dec:	4b02      	ldr	r3, [pc, #8]	@ (8002df8 <HAL_GetTick+0x10>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	200004c4 	.word	0x200004c4

08002dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <__NVIC_SetPriorityGrouping+0x44>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2e:	4a04      	ldr	r2, [pc, #16]	@ (8002e40 <__NVIC_SetPriorityGrouping+0x44>)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	60d3      	str	r3, [r2, #12]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e48:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <__NVIC_GetPriorityGrouping+0x18>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	0a1b      	lsrs	r3, r3, #8
 8002e4e:	f003 0307 	and.w	r3, r3, #7
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	db0b      	blt.n	8002e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	f003 021f 	and.w	r2, r3, #31
 8002e78:	4906      	ldr	r1, [pc, #24]	@ (8002e94 <__NVIC_EnableIRQ+0x34>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2001      	movs	r0, #1
 8002e82:	fa00 f202 	lsl.w	r2, r0, r2
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	e000e100 	.word	0xe000e100

08002e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	6039      	str	r1, [r7, #0]
 8002ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	db0a      	blt.n	8002ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	490c      	ldr	r1, [pc, #48]	@ (8002ee4 <__NVIC_SetPriority+0x4c>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	0112      	lsls	r2, r2, #4
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	440b      	add	r3, r1
 8002ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec0:	e00a      	b.n	8002ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4908      	ldr	r1, [pc, #32]	@ (8002ee8 <__NVIC_SetPriority+0x50>)
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	3b04      	subs	r3, #4
 8002ed0:	0112      	lsls	r2, r2, #4
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	761a      	strb	r2, [r3, #24]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000e100 	.word	0xe000e100
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	@ 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f1c3 0307 	rsb	r3, r3, #7
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	bf28      	it	cs
 8002f0a:	2304      	movcs	r3, #4
 8002f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3304      	adds	r3, #4
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d902      	bls.n	8002f1c <NVIC_EncodePriority+0x30>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3b03      	subs	r3, #3
 8002f1a:	e000      	b.n	8002f1e <NVIC_EncodePriority+0x32>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f20:	f04f 32ff 	mov.w	r2, #4294967295
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	401a      	ands	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f34:	f04f 31ff 	mov.w	r1, #4294967295
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3e:	43d9      	mvns	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	4313      	orrs	r3, r2
         );
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3724      	adds	r7, #36	@ 0x24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f60:	d301      	bcc.n	8002f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00f      	b.n	8002f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f66:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <SysTick_Config+0x40>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6e:	210f      	movs	r1, #15
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f7ff ff90 	bl	8002e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <SysTick_Config+0x40>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <SysTick_Config+0x40>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff2d 	bl	8002dfc <__NVIC_SetPriorityGrouping>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbc:	f7ff ff42 	bl	8002e44 <__NVIC_GetPriorityGrouping>
 8002fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff90 	bl	8002eec <NVIC_EncodePriority>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff5f 	bl	8002e98 <__NVIC_SetPriority>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff35 	bl	8002e60 <__NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffa2 	bl	8002f50 <SysTick_Config>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d008      	beq.n	8003040 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e020      	b.n	8003082 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020e 	bic.w	r2, r2, #14
 800304e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f202 	lsl.w	r2, r1, r2
 800306e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d005      	beq.n	80030b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2204      	movs	r2, #4
 80030a8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	e051      	b.n	8003154 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 020e 	bic.w	r2, r2, #14
 80030be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a22      	ldr	r2, [pc, #136]	@ (8003160 <HAL_DMA_Abort_IT+0xd4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d029      	beq.n	800312e <HAL_DMA_Abort_IT+0xa2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a21      	ldr	r2, [pc, #132]	@ (8003164 <HAL_DMA_Abort_IT+0xd8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d022      	beq.n	800312a <HAL_DMA_Abort_IT+0x9e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003168 <HAL_DMA_Abort_IT+0xdc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01a      	beq.n	8003124 <HAL_DMA_Abort_IT+0x98>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1e      	ldr	r2, [pc, #120]	@ (800316c <HAL_DMA_Abort_IT+0xe0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d012      	beq.n	800311e <HAL_DMA_Abort_IT+0x92>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003170 <HAL_DMA_Abort_IT+0xe4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00a      	beq.n	8003118 <HAL_DMA_Abort_IT+0x8c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1b      	ldr	r2, [pc, #108]	@ (8003174 <HAL_DMA_Abort_IT+0xe8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d102      	bne.n	8003112 <HAL_DMA_Abort_IT+0x86>
 800310c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003110:	e00e      	b.n	8003130 <HAL_DMA_Abort_IT+0xa4>
 8003112:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003116:	e00b      	b.n	8003130 <HAL_DMA_Abort_IT+0xa4>
 8003118:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800311c:	e008      	b.n	8003130 <HAL_DMA_Abort_IT+0xa4>
 800311e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003122:	e005      	b.n	8003130 <HAL_DMA_Abort_IT+0xa4>
 8003124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003128:	e002      	b.n	8003130 <HAL_DMA_Abort_IT+0xa4>
 800312a:	2310      	movs	r3, #16
 800312c:	e000      	b.n	8003130 <HAL_DMA_Abort_IT+0xa4>
 800312e:	2301      	movs	r3, #1
 8003130:	4a11      	ldr	r2, [pc, #68]	@ (8003178 <HAL_DMA_Abort_IT+0xec>)
 8003132:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
    } 
  }
  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40020008 	.word	0x40020008
 8003164:	4002001c 	.word	0x4002001c
 8003168:	40020030 	.word	0x40020030
 800316c:	40020044 	.word	0x40020044
 8003170:	40020058 	.word	0x40020058
 8003174:	4002006c 	.word	0x4002006c
 8003178:	40020000 	.word	0x40020000

0800317c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800317c:	b480      	push	{r7}
 800317e:	b08b      	sub	sp, #44	@ 0x2c
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318e:	e169      	b.n	8003464 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003190:	2201      	movs	r2, #1
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	f040 8158 	bne.w	800345e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a9a      	ldr	r2, [pc, #616]	@ (800341c <HAL_GPIO_Init+0x2a0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d05e      	beq.n	8003276 <HAL_GPIO_Init+0xfa>
 80031b8:	4a98      	ldr	r2, [pc, #608]	@ (800341c <HAL_GPIO_Init+0x2a0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d875      	bhi.n	80032aa <HAL_GPIO_Init+0x12e>
 80031be:	4a98      	ldr	r2, [pc, #608]	@ (8003420 <HAL_GPIO_Init+0x2a4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d058      	beq.n	8003276 <HAL_GPIO_Init+0xfa>
 80031c4:	4a96      	ldr	r2, [pc, #600]	@ (8003420 <HAL_GPIO_Init+0x2a4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d86f      	bhi.n	80032aa <HAL_GPIO_Init+0x12e>
 80031ca:	4a96      	ldr	r2, [pc, #600]	@ (8003424 <HAL_GPIO_Init+0x2a8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d052      	beq.n	8003276 <HAL_GPIO_Init+0xfa>
 80031d0:	4a94      	ldr	r2, [pc, #592]	@ (8003424 <HAL_GPIO_Init+0x2a8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d869      	bhi.n	80032aa <HAL_GPIO_Init+0x12e>
 80031d6:	4a94      	ldr	r2, [pc, #592]	@ (8003428 <HAL_GPIO_Init+0x2ac>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d04c      	beq.n	8003276 <HAL_GPIO_Init+0xfa>
 80031dc:	4a92      	ldr	r2, [pc, #584]	@ (8003428 <HAL_GPIO_Init+0x2ac>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d863      	bhi.n	80032aa <HAL_GPIO_Init+0x12e>
 80031e2:	4a92      	ldr	r2, [pc, #584]	@ (800342c <HAL_GPIO_Init+0x2b0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d046      	beq.n	8003276 <HAL_GPIO_Init+0xfa>
 80031e8:	4a90      	ldr	r2, [pc, #576]	@ (800342c <HAL_GPIO_Init+0x2b0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d85d      	bhi.n	80032aa <HAL_GPIO_Init+0x12e>
 80031ee:	2b12      	cmp	r3, #18
 80031f0:	d82a      	bhi.n	8003248 <HAL_GPIO_Init+0xcc>
 80031f2:	2b12      	cmp	r3, #18
 80031f4:	d859      	bhi.n	80032aa <HAL_GPIO_Init+0x12e>
 80031f6:	a201      	add	r2, pc, #4	@ (adr r2, 80031fc <HAL_GPIO_Init+0x80>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	08003277 	.word	0x08003277
 8003200:	08003251 	.word	0x08003251
 8003204:	08003263 	.word	0x08003263
 8003208:	080032a5 	.word	0x080032a5
 800320c:	080032ab 	.word	0x080032ab
 8003210:	080032ab 	.word	0x080032ab
 8003214:	080032ab 	.word	0x080032ab
 8003218:	080032ab 	.word	0x080032ab
 800321c:	080032ab 	.word	0x080032ab
 8003220:	080032ab 	.word	0x080032ab
 8003224:	080032ab 	.word	0x080032ab
 8003228:	080032ab 	.word	0x080032ab
 800322c:	080032ab 	.word	0x080032ab
 8003230:	080032ab 	.word	0x080032ab
 8003234:	080032ab 	.word	0x080032ab
 8003238:	080032ab 	.word	0x080032ab
 800323c:	080032ab 	.word	0x080032ab
 8003240:	08003259 	.word	0x08003259
 8003244:	0800326d 	.word	0x0800326d
 8003248:	4a79      	ldr	r2, [pc, #484]	@ (8003430 <HAL_GPIO_Init+0x2b4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800324e:	e02c      	b.n	80032aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	623b      	str	r3, [r7, #32]
          break;
 8003256:	e029      	b.n	80032ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	3304      	adds	r3, #4
 800325e:	623b      	str	r3, [r7, #32]
          break;
 8003260:	e024      	b.n	80032ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	3308      	adds	r3, #8
 8003268:	623b      	str	r3, [r7, #32]
          break;
 800326a:	e01f      	b.n	80032ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	330c      	adds	r3, #12
 8003272:	623b      	str	r3, [r7, #32]
          break;
 8003274:	e01a      	b.n	80032ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800327e:	2304      	movs	r3, #4
 8003280:	623b      	str	r3, [r7, #32]
          break;
 8003282:	e013      	b.n	80032ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800328c:	2308      	movs	r3, #8
 800328e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	611a      	str	r2, [r3, #16]
          break;
 8003296:	e009      	b.n	80032ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003298:	2308      	movs	r3, #8
 800329a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	615a      	str	r2, [r3, #20]
          break;
 80032a2:	e003      	b.n	80032ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032a4:	2300      	movs	r3, #0
 80032a6:	623b      	str	r3, [r7, #32]
          break;
 80032a8:	e000      	b.n	80032ac <HAL_GPIO_Init+0x130>
          break;
 80032aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2bff      	cmp	r3, #255	@ 0xff
 80032b0:	d801      	bhi.n	80032b6 <HAL_GPIO_Init+0x13a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	e001      	b.n	80032ba <HAL_GPIO_Init+0x13e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2bff      	cmp	r3, #255	@ 0xff
 80032c0:	d802      	bhi.n	80032c8 <HAL_GPIO_Init+0x14c>
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	e002      	b.n	80032ce <HAL_GPIO_Init+0x152>
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	3b08      	subs	r3, #8
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	210f      	movs	r1, #15
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	6a39      	ldr	r1, [r7, #32]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	431a      	orrs	r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80b1 	beq.w	800345e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003434 <HAL_GPIO_Init+0x2b8>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	4a4c      	ldr	r2, [pc, #304]	@ (8003434 <HAL_GPIO_Init+0x2b8>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6193      	str	r3, [r2, #24]
 8003308:	4b4a      	ldr	r3, [pc, #296]	@ (8003434 <HAL_GPIO_Init+0x2b8>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003314:	4a48      	ldr	r2, [pc, #288]	@ (8003438 <HAL_GPIO_Init+0x2bc>)
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	3302      	adds	r3, #2
 800331c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003320:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	220f      	movs	r2, #15
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a40      	ldr	r2, [pc, #256]	@ (800343c <HAL_GPIO_Init+0x2c0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_GPIO_Init+0x1ec>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a3f      	ldr	r2, [pc, #252]	@ (8003440 <HAL_GPIO_Init+0x2c4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00d      	beq.n	8003364 <HAL_GPIO_Init+0x1e8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a3e      	ldr	r2, [pc, #248]	@ (8003444 <HAL_GPIO_Init+0x2c8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <HAL_GPIO_Init+0x1e4>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a3d      	ldr	r2, [pc, #244]	@ (8003448 <HAL_GPIO_Init+0x2cc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_GPIO_Init+0x1e0>
 8003358:	2303      	movs	r3, #3
 800335a:	e006      	b.n	800336a <HAL_GPIO_Init+0x1ee>
 800335c:	2304      	movs	r3, #4
 800335e:	e004      	b.n	800336a <HAL_GPIO_Init+0x1ee>
 8003360:	2302      	movs	r3, #2
 8003362:	e002      	b.n	800336a <HAL_GPIO_Init+0x1ee>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_GPIO_Init+0x1ee>
 8003368:	2300      	movs	r3, #0
 800336a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336c:	f002 0203 	and.w	r2, r2, #3
 8003370:	0092      	lsls	r2, r2, #2
 8003372:	4093      	lsls	r3, r2
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800337a:	492f      	ldr	r1, [pc, #188]	@ (8003438 <HAL_GPIO_Init+0x2bc>)
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3302      	adds	r3, #2
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d006      	beq.n	80033a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003394:	4b2d      	ldr	r3, [pc, #180]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	492c      	ldr	r1, [pc, #176]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	608b      	str	r3, [r1, #8]
 80033a0:	e006      	b.n	80033b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033a2:	4b2a      	ldr	r3, [pc, #168]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	4928      	ldr	r1, [pc, #160]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033bc:	4b23      	ldr	r3, [pc, #140]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	4922      	ldr	r1, [pc, #136]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60cb      	str	r3, [r1, #12]
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033ca:	4b20      	ldr	r3, [pc, #128]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	491e      	ldr	r1, [pc, #120]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d006      	beq.n	80033f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033e4:	4b19      	ldr	r3, [pc, #100]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4918      	ldr	r1, [pc, #96]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
 80033f0:	e006      	b.n	8003400 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033f2:	4b16      	ldr	r3, [pc, #88]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	4914      	ldr	r1, [pc, #80]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d021      	beq.n	8003450 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800340c:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	490e      	ldr	r1, [pc, #56]	@ (800344c <HAL_GPIO_Init+0x2d0>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
 8003418:	e021      	b.n	800345e <HAL_GPIO_Init+0x2e2>
 800341a:	bf00      	nop
 800341c:	10320000 	.word	0x10320000
 8003420:	10310000 	.word	0x10310000
 8003424:	10220000 	.word	0x10220000
 8003428:	10210000 	.word	0x10210000
 800342c:	10120000 	.word	0x10120000
 8003430:	10110000 	.word	0x10110000
 8003434:	40021000 	.word	0x40021000
 8003438:	40010000 	.word	0x40010000
 800343c:	40010800 	.word	0x40010800
 8003440:	40010c00 	.word	0x40010c00
 8003444:	40011000 	.word	0x40011000
 8003448:	40011400 	.word	0x40011400
 800344c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003450:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <HAL_GPIO_Init+0x304>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	43db      	mvns	r3, r3
 8003458:	4909      	ldr	r1, [pc, #36]	@ (8003480 <HAL_GPIO_Init+0x304>)
 800345a:	4013      	ands	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	3301      	adds	r3, #1
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	f47f ae8e 	bne.w	8003190 <HAL_GPIO_Init+0x14>
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	372c      	adds	r7, #44	@ 0x2c
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	40010400 	.word	0x40010400

08003484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
 8003490:	4613      	mov	r3, r2
 8003492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003494:	787b      	ldrb	r3, [r7, #1]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034a0:	e003      	b.n	80034aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	041a      	lsls	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	611a      	str	r2, [r3, #16]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034be:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d006      	beq.n	80034d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ca:	4a05      	ldr	r2, [pc, #20]	@ (80034e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f806 	bl	80034e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40010400 	.word	0x40010400

080034e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e272      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8087 	beq.w	8003626 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003518:	4b92      	ldr	r3, [pc, #584]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b04      	cmp	r3, #4
 8003522:	d00c      	beq.n	800353e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003524:	4b8f      	ldr	r3, [pc, #572]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b08      	cmp	r3, #8
 800352e:	d112      	bne.n	8003556 <HAL_RCC_OscConfig+0x5e>
 8003530:	4b8c      	ldr	r3, [pc, #560]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800353c:	d10b      	bne.n	8003556 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353e:	4b89      	ldr	r3, [pc, #548]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d06c      	beq.n	8003624 <HAL_RCC_OscConfig+0x12c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d168      	bne.n	8003624 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e24c      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x76>
 8003560:	4b80      	ldr	r3, [pc, #512]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a7f      	ldr	r2, [pc, #508]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	e02e      	b.n	80035cc <HAL_RCC_OscConfig+0xd4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x98>
 8003576:	4b7b      	ldr	r3, [pc, #492]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7a      	ldr	r2, [pc, #488]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 800357c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b78      	ldr	r3, [pc, #480]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a77      	ldr	r2, [pc, #476]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003588:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e01d      	b.n	80035cc <HAL_RCC_OscConfig+0xd4>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0xbc>
 800359a:	4b72      	ldr	r3, [pc, #456]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a71      	ldr	r2, [pc, #452]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0xd4>
 80035b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80035ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	4b68      	ldr	r3, [pc, #416]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a67      	ldr	r2, [pc, #412]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d013      	beq.n	80035fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7ff fc08 	bl	8002de8 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035dc:	f7ff fc04 	bl	8002de8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	@ 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e200      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0xe4>
 80035fa:	e014      	b.n	8003626 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7ff fbf4 	bl	8002de8 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7ff fbf0 	bl	8002de8 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	@ 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e1ec      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	4b53      	ldr	r3, [pc, #332]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x10c>
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d063      	beq.n	80036fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003632:	4b4c      	ldr	r3, [pc, #304]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800363e:	4b49      	ldr	r3, [pc, #292]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b08      	cmp	r3, #8
 8003648:	d11c      	bne.n	8003684 <HAL_RCC_OscConfig+0x18c>
 800364a:	4b46      	ldr	r3, [pc, #280]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	4b43      	ldr	r3, [pc, #268]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x176>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e1c0      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b3d      	ldr	r3, [pc, #244]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4939      	ldr	r1, [pc, #228]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	e03a      	b.n	80036fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368c:	4b36      	ldr	r3, [pc, #216]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7ff fba9 	bl	8002de8 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369a:	f7ff fba5 	bl	8002de8 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1a1      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4927      	ldr	r1, [pc, #156]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ce:	4b26      	ldr	r3, [pc, #152]	@ (8003768 <HAL_RCC_OscConfig+0x270>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7ff fb88 	bl	8002de8 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036dc:	f7ff fb84 	bl	8002de8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e180      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03a      	beq.n	800377c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d019      	beq.n	8003742 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370e:	4b17      	ldr	r3, [pc, #92]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003714:	f7ff fb68 	bl	8002de8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371c:	f7ff fb64 	bl	8002de8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e160      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <HAL_RCC_OscConfig+0x26c>)
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800373a:	2001      	movs	r0, #1
 800373c:	f000 face 	bl	8003cdc <RCC_Delay>
 8003740:	e01c      	b.n	800377c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <HAL_RCC_OscConfig+0x274>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7ff fb4e 	bl	8002de8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374e:	e00f      	b.n	8003770 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003750:	f7ff fb4a 	bl	8002de8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d908      	bls.n	8003770 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e146      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	42420000 	.word	0x42420000
 800376c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	4b92      	ldr	r3, [pc, #584]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e9      	bne.n	8003750 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80a6 	beq.w	80038d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378a:	2300      	movs	r3, #0
 800378c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378e:	4b8b      	ldr	r3, [pc, #556]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	4a87      	ldr	r2, [pc, #540]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a4:	61d3      	str	r3, [r2, #28]
 80037a6:	4b85      	ldr	r3, [pc, #532]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b2:	2301      	movs	r3, #1
 80037b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b82      	ldr	r3, [pc, #520]	@ (80039c0 <HAL_RCC_OscConfig+0x4c8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d118      	bne.n	80037f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c2:	4b7f      	ldr	r3, [pc, #508]	@ (80039c0 <HAL_RCC_OscConfig+0x4c8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7e      	ldr	r2, [pc, #504]	@ (80039c0 <HAL_RCC_OscConfig+0x4c8>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ce:	f7ff fb0b 	bl	8002de8 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d6:	f7ff fb07 	bl	8002de8 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b64      	cmp	r3, #100	@ 0x64
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e103      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	4b75      	ldr	r3, [pc, #468]	@ (80039c0 <HAL_RCC_OscConfig+0x4c8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x312>
 80037fc:	4b6f      	ldr	r3, [pc, #444]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a6e      	ldr	r2, [pc, #440]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6213      	str	r3, [r2, #32]
 8003808:	e02d      	b.n	8003866 <HAL_RCC_OscConfig+0x36e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x334>
 8003812:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4a69      	ldr	r2, [pc, #420]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	6213      	str	r3, [r2, #32]
 800381e:	4b67      	ldr	r3, [pc, #412]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4a66      	ldr	r2, [pc, #408]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003824:	f023 0304 	bic.w	r3, r3, #4
 8003828:	6213      	str	r3, [r2, #32]
 800382a:	e01c      	b.n	8003866 <HAL_RCC_OscConfig+0x36e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b05      	cmp	r3, #5
 8003832:	d10c      	bne.n	800384e <HAL_RCC_OscConfig+0x356>
 8003834:	4b61      	ldr	r3, [pc, #388]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4a60      	ldr	r2, [pc, #384]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 800383a:	f043 0304 	orr.w	r3, r3, #4
 800383e:	6213      	str	r3, [r2, #32]
 8003840:	4b5e      	ldr	r3, [pc, #376]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	4a5d      	ldr	r2, [pc, #372]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	6213      	str	r3, [r2, #32]
 800384c:	e00b      	b.n	8003866 <HAL_RCC_OscConfig+0x36e>
 800384e:	4b5b      	ldr	r3, [pc, #364]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4a5a      	ldr	r2, [pc, #360]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6213      	str	r3, [r2, #32]
 800385a:	4b58      	ldr	r3, [pc, #352]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	4a57      	ldr	r2, [pc, #348]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d015      	beq.n	800389a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386e:	f7ff fabb 	bl	8002de8 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003874:	e00a      	b.n	800388c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003876:	f7ff fab7 	bl	8002de8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0b1      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388c:	4b4b      	ldr	r3, [pc, #300]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ee      	beq.n	8003876 <HAL_RCC_OscConfig+0x37e>
 8003898:	e014      	b.n	80038c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389a:	f7ff faa5 	bl	8002de8 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7ff faa1 	bl	8002de8 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e09b      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b8:	4b40      	ldr	r3, [pc, #256]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ee      	bne.n	80038a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d105      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ca:	4b3c      	ldr	r3, [pc, #240]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4a3b      	ldr	r2, [pc, #236]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8087 	beq.w	80039ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038e0:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 030c 	and.w	r3, r3, #12
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d061      	beq.n	80039b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d146      	bne.n	8003982 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f4:	4b33      	ldr	r3, [pc, #204]	@ (80039c4 <HAL_RCC_OscConfig+0x4cc>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7ff fa75 	bl	8002de8 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7ff fa71 	bl	8002de8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e06d      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003914:	4b29      	ldr	r3, [pc, #164]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003928:	d108      	bne.n	800393c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800392a:	4b24      	ldr	r3, [pc, #144]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4921      	ldr	r1, [pc, #132]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800393c:	4b1f      	ldr	r3, [pc, #124]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a19      	ldr	r1, [r3, #32]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	430b      	orrs	r3, r1
 800394e:	491b      	ldr	r1, [pc, #108]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003954:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <HAL_RCC_OscConfig+0x4cc>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7ff fa45 	bl	8002de8 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003962:	f7ff fa41 	bl	8002de8 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e03d      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003974:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x46a>
 8003980:	e035      	b.n	80039ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	4b10      	ldr	r3, [pc, #64]	@ (80039c4 <HAL_RCC_OscConfig+0x4cc>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7ff fa2e 	bl	8002de8 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003990:	f7ff fa2a 	bl	8002de8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e026      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x498>
 80039ae:	e01e      	b.n	80039ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e019      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40007000 	.word	0x40007000
 80039c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCC_OscConfig+0x500>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d001      	beq.n	80039ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000

080039fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0d0      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b6a      	ldr	r3, [pc, #424]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d910      	bls.n	8003a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b67      	ldr	r3, [pc, #412]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 0207 	bic.w	r2, r3, #7
 8003a26:	4965      	ldr	r1, [pc, #404]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b63      	ldr	r3, [pc, #396]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0b8      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a58:	4b59      	ldr	r3, [pc, #356]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a70:	4b53      	ldr	r3, [pc, #332]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4a52      	ldr	r2, [pc, #328]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a7c:	4b50      	ldr	r3, [pc, #320]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	494d      	ldr	r1, [pc, #308]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d040      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	4b47      	ldr	r3, [pc, #284]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d115      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07f      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aba:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e073      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aca:	4b3d      	ldr	r3, [pc, #244]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06b      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4b39      	ldr	r3, [pc, #228]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4936      	ldr	r1, [pc, #216]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aec:	f7ff f97c 	bl	8002de8 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7ff f978 	bl	8002de8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e053      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 020c 	and.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1eb      	bne.n	8003af4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b27      	ldr	r3, [pc, #156]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d210      	bcs.n	8003b4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b24      	ldr	r3, [pc, #144]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 0207 	bic.w	r2, r3, #7
 8003b32:	4922      	ldr	r1, [pc, #136]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b20      	ldr	r3, [pc, #128]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e032      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b58:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4916      	ldr	r1, [pc, #88]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b76:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	490e      	ldr	r1, [pc, #56]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b8a:	f000 f821 	bl	8003bd0 <HAL_RCC_GetSysClockFreq>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	490a      	ldr	r1, [pc, #40]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9c:	5ccb      	ldrb	r3, [r1, r3]
 8003b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba2:	4a09      	ldr	r2, [pc, #36]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ba6:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <HAL_RCC_ClockConfig+0x1d0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff f8da 	bl	8002d64 <HAL_InitTick>

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	080097ec 	.word	0x080097ec
 8003bc8:	20000014 	.word	0x20000014
 8003bcc:	20000018 	.word	0x20000018

08003bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bea:	4b1e      	ldr	r3, [pc, #120]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d002      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x30>
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x36>
 8003bfe:	e027      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c00:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c02:	613b      	str	r3, [r7, #16]
      break;
 8003c04:	e027      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	0c9b      	lsrs	r3, r3, #18
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	4a17      	ldr	r2, [pc, #92]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c10:	5cd3      	ldrb	r3, [r2, r3]
 8003c12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d010      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c1e:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	0c5b      	lsrs	r3, r3, #17
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	4a11      	ldr	r2, [pc, #68]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c2a:	5cd3      	ldrb	r3, [r2, r3]
 8003c2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a0d      	ldr	r2, [pc, #52]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c32:	fb03 f202 	mul.w	r2, r3, r2
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e004      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0c      	ldr	r2, [pc, #48]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	613b      	str	r3, [r7, #16]
      break;
 8003c4e:	e002      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c52:	613b      	str	r3, [r7, #16]
      break;
 8003c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c56:	693b      	ldr	r3, [r7, #16]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	007a1200 	.word	0x007a1200
 8003c6c:	08009804 	.word	0x08009804
 8003c70:	08009814 	.word	0x08009814
 8003c74:	003d0900 	.word	0x003d0900

08003c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b02      	ldr	r3, [pc, #8]	@ (8003c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	20000014 	.word	0x20000014

08003c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c90:	f7ff fff2 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	@ (8003cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	@ (8003cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	080097fc 	.word	0x080097fc

08003cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cb8:	f7ff ffde 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	@ (8003cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	080097fc 	.word	0x080097fc

08003cdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <RCC_Delay+0x34>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <RCC_Delay+0x38>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0a5b      	lsrs	r3, r3, #9
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cf8:	bf00      	nop
  }
  while (Delay --);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1e5a      	subs	r2, r3, #1
 8003cfe:	60fa      	str	r2, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f9      	bne.n	8003cf8 <RCC_Delay+0x1c>
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	20000014 	.word	0x20000014
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e041      	b.n	8003dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fe fd6c 	bl	800281c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f000 fcf6 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e041      	b.n	8003e4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f839 	bl	8003e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f000 fca7 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_TIM_PWM_Start+0x24>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e022      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x6a>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d109      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0x3e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	bf14      	ite	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	2300      	moveq	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e015      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x6a>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d109      	bne.n	8003ec0 <HAL_TIM_PWM_Start+0x58>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e008      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x6a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e05e      	b.n	8003f98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <HAL_TIM_PWM_Start+0x82>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ee8:	e013      	b.n	8003f12 <HAL_TIM_PWM_Start+0xaa>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d104      	bne.n	8003efa <HAL_TIM_PWM_Start+0x92>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ef8:	e00b      	b.n	8003f12 <HAL_TIM_PWM_Start+0xaa>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d104      	bne.n	8003f0a <HAL_TIM_PWM_Start+0xa2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f08:	e003      	b.n	8003f12 <HAL_TIM_PWM_Start+0xaa>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 ffad 	bl	8004e7a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa0 <HAL_TIM_PWM_Start+0x138>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d107      	bne.n	8003f3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <HAL_TIM_PWM_Start+0x138>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00e      	beq.n	8003f62 <HAL_TIM_PWM_Start+0xfa>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4c:	d009      	beq.n	8003f62 <HAL_TIM_PWM_Start+0xfa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a14      	ldr	r2, [pc, #80]	@ (8003fa4 <HAL_TIM_PWM_Start+0x13c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_TIM_PWM_Start+0xfa>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <HAL_TIM_PWM_Start+0x140>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d111      	bne.n	8003f86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b06      	cmp	r3, #6
 8003f72:	d010      	beq.n	8003f96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	e007      	b.n	8003f96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800

08003fac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e041      	b.n	8004042 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f839 	bl	800404a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f000 fbac 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d020      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0202 	mvn.w	r2, #2
 8004090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd f9d6 	bl	8001458 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fb2e 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fb34 	bl	8004722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d020      	beq.n	800410c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01b      	beq.n	800410c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0204 	mvn.w	r2, #4
 80040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd f9b0 	bl	8001458 <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fb08 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fb0e 	bl	8004722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0208 	mvn.w	r2, #8
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd f98a 	bl	8001458 <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fae2 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fae8 	bl	8004722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	d020      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0210 	mvn.w	r2, #16
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2208      	movs	r2, #8
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fd f964 	bl	8001458 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fabc 	bl	8004710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fac2 	bl	8004722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00c      	beq.n	80041c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d007      	beq.n	80041c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0201 	mvn.w	r2, #1
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd f83a 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00c      	beq.n	80041ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fed3 	bl	8004f92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa92 	bl	8004734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0220 	mvn.w	r2, #32
 800422c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fea6 	bl	8004f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004256:	2302      	movs	r3, #2
 8004258:	e088      	b.n	800436c <HAL_TIM_IC_ConfigChannel+0x130>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004278:	f000 fc5c 	bl	8004b34 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 020c 	bic.w	r2, r2, #12
 800428a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6999      	ldr	r1, [r3, #24]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	619a      	str	r2, [r3, #24]
 800429e:	e060      	b.n	8004362 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d11c      	bne.n	80042e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80042b6:	f000 fcc5 	bl	8004c44 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6999      	ldr	r1, [r3, #24]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	021a      	lsls	r2, r3, #8
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	619a      	str	r2, [r3, #24]
 80042de:	e040      	b.n	8004362 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d11b      	bne.n	800431e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80042f6:	f000 fd10 	bl	8004d1a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 020c 	bic.w	r2, r2, #12
 8004308:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69d9      	ldr	r1, [r3, #28]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	61da      	str	r2, [r3, #28]
 800431c:	e021      	b.n	8004362 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b0c      	cmp	r3, #12
 8004322:	d11c      	bne.n	800435e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004334:	f000 fd2c 	bl	8004d90 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004346:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69d9      	ldr	r1, [r3, #28]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	021a      	lsls	r2, r3, #8
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	61da      	str	r2, [r3, #28]
 800435c:	e001      	b.n	8004362 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800438e:	2302      	movs	r3, #2
 8004390:	e0ae      	b.n	80044f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	f200 809f 	bhi.w	80044e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043a2:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	080044e1 	.word	0x080044e1
 80043b0:	080044e1 	.word	0x080044e1
 80043b4:	080044e1 	.word	0x080044e1
 80043b8:	0800441d 	.word	0x0800441d
 80043bc:	080044e1 	.word	0x080044e1
 80043c0:	080044e1 	.word	0x080044e1
 80043c4:	080044e1 	.word	0x080044e1
 80043c8:	0800445f 	.word	0x0800445f
 80043cc:	080044e1 	.word	0x080044e1
 80043d0:	080044e1 	.word	0x080044e1
 80043d4:	080044e1 	.word	0x080044e1
 80043d8:	0800449f 	.word	0x0800449f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fa1e 	bl	8004824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0208 	orr.w	r2, r2, #8
 80043f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0204 	bic.w	r2, r2, #4
 8004406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6999      	ldr	r1, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	619a      	str	r2, [r3, #24]
      break;
 800441a:	e064      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fa64 	bl	80048f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6999      	ldr	r1, [r3, #24]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	619a      	str	r2, [r3, #24]
      break;
 800445c:	e043      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 faad 	bl	80049c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0208 	orr.w	r2, r2, #8
 8004478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0204 	bic.w	r2, r2, #4
 8004488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	61da      	str	r2, [r3, #28]
      break;
 800449c:	e023      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 faf7 	bl	8004a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69d9      	ldr	r1, [r3, #28]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	021a      	lsls	r2, r3, #8
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	61da      	str	r2, [r3, #28]
      break;
 80044de:	e002      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
      break;
 80044e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIM_ConfigClockSource+0x1c>
 8004510:	2302      	movs	r3, #2
 8004512:	e0b4      	b.n	800467e <HAL_TIM_ConfigClockSource+0x186>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800453a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454c:	d03e      	beq.n	80045cc <HAL_TIM_ConfigClockSource+0xd4>
 800454e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004552:	f200 8087 	bhi.w	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455a:	f000 8086 	beq.w	800466a <HAL_TIM_ConfigClockSource+0x172>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	d87f      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b70      	cmp	r3, #112	@ 0x70
 8004566:	d01a      	beq.n	800459e <HAL_TIM_ConfigClockSource+0xa6>
 8004568:	2b70      	cmp	r3, #112	@ 0x70
 800456a:	d87b      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b60      	cmp	r3, #96	@ 0x60
 800456e:	d050      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x11a>
 8004570:	2b60      	cmp	r3, #96	@ 0x60
 8004572:	d877      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b50      	cmp	r3, #80	@ 0x50
 8004576:	d03c      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004578:	2b50      	cmp	r3, #80	@ 0x50
 800457a:	d873      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b40      	cmp	r3, #64	@ 0x40
 800457e:	d058      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x13a>
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d86f      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b30      	cmp	r3, #48	@ 0x30
 8004586:	d064      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	2b30      	cmp	r3, #48	@ 0x30
 800458a:	d86b      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b20      	cmp	r3, #32
 800458e:	d060      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d867      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05c      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15a>
 8004598:	2b10      	cmp	r3, #16
 800459a:	d05a      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15a>
 800459c:	e062      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ae:	f000 fc45 	bl	8004e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	609a      	str	r2, [r3, #8]
      break;
 80045ca:	e04f      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045dc:	f000 fc2e 	bl	8004e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045ee:	609a      	str	r2, [r3, #8]
      break;
 80045f0:	e03c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fe:	461a      	mov	r2, r3
 8004600:	f000 faf2 	bl	8004be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2150      	movs	r1, #80	@ 0x50
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fbfc 	bl	8004e08 <TIM_ITRx_SetConfig>
      break;
 8004610:	e02c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800461e:	461a      	mov	r2, r3
 8004620:	f000 fb4c 	bl	8004cbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2160      	movs	r1, #96	@ 0x60
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fbec 	bl	8004e08 <TIM_ITRx_SetConfig>
      break;
 8004630:	e01c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	461a      	mov	r2, r3
 8004640:	f000 fad2 	bl	8004be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2140      	movs	r1, #64	@ 0x40
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fbdc 	bl	8004e08 <TIM_ITRx_SetConfig>
      break;
 8004650:	e00c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f000 fbd3 	bl	8004e08 <TIM_ITRx_SetConfig>
      break;
 8004662:	e003      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      break;
 8004668:	e000      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800466a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d831      	bhi.n	8004700 <HAL_TIM_ReadCapturedValue+0x78>
 800469c:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	08004701 	.word	0x08004701
 80046ac:	08004701 	.word	0x08004701
 80046b0:	08004701 	.word	0x08004701
 80046b4:	080046e3 	.word	0x080046e3
 80046b8:	08004701 	.word	0x08004701
 80046bc:	08004701 	.word	0x08004701
 80046c0:	08004701 	.word	0x08004701
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	08004701 	.word	0x08004701
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004701 	.word	0x08004701
 80046d4:	080046f7 	.word	0x080046f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046de:	60fb      	str	r3, [r7, #12]

      break;
 80046e0:	e00f      	b.n	8004702 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	60fb      	str	r3, [r7, #12]

      break;
 80046ea:	e00a      	b.n	8004702 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f2:	60fb      	str	r3, [r7, #12]

      break;
 80046f4:	e005      	b.n	8004702 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	60fb      	str	r3, [r7, #12]

      break;
 80046fe:	e000      	b.n	8004702 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004700:	bf00      	nop
  }

  return tmpreg;
 8004702:	68fb      	ldr	r3, [r7, #12]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop

08004710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr

08004734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
	...

08004748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a2f      	ldr	r2, [pc, #188]	@ (8004818 <TIM_Base_SetConfig+0xd0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0x30>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0x30>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a2c      	ldr	r2, [pc, #176]	@ (800481c <TIM_Base_SetConfig+0xd4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0x30>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a2b      	ldr	r2, [pc, #172]	@ (8004820 <TIM_Base_SetConfig+0xd8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d108      	bne.n	800478a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a22      	ldr	r2, [pc, #136]	@ (8004818 <TIM_Base_SetConfig+0xd0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1f      	ldr	r2, [pc, #124]	@ (800481c <TIM_Base_SetConfig+0xd4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0x62>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004820 <TIM_Base_SetConfig+0xd8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004818 <TIM_Base_SetConfig+0xd0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d103      	bne.n	80047f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f023 0201 	bic.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	611a      	str	r2, [r3, #16]
  }
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800

08004824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f023 0201 	bic.w	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 0302 	bic.w	r3, r3, #2
 800486c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a1c      	ldr	r2, [pc, #112]	@ (80048ec <TIM_OC1_SetConfig+0xc8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d10c      	bne.n	800489a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f023 0308 	bic.w	r3, r3, #8
 8004886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a13      	ldr	r2, [pc, #76]	@ (80048ec <TIM_OC1_SetConfig+0xc8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d111      	bne.n	80048c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40012c00 	.word	0x40012c00

080048f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f023 0210 	bic.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800491e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0320 	bic.w	r3, r3, #32
 800493a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a1d      	ldr	r2, [pc, #116]	@ (80049c0 <TIM_OC2_SetConfig+0xd0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10d      	bne.n	800496c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800496a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <TIM_OC2_SetConfig+0xd0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d113      	bne.n	800499c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800497a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	40012c00 	.word	0x40012c00

080049c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <TIM_OC3_SetConfig+0xd0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d10d      	bne.n	8004a3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a14      	ldr	r2, [pc, #80]	@ (8004a94 <TIM_OC3_SetConfig+0xd0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d113      	bne.n	8004a6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40012c00 	.word	0x40012c00

08004a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	031b      	lsls	r3, r3, #12
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a0f      	ldr	r2, [pc, #60]	@ (8004b30 <TIM_OC4_SetConfig+0x98>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d109      	bne.n	8004b0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	019b      	lsls	r3, r3, #6
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr
 8004b30:	40012c00 	.word	0x40012c00

08004b34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f023 0201 	bic.w	r2, r3, #1
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bdc <TIM_TI1_SetConfig+0xa8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <TIM_TI1_SetConfig+0x46>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b68:	d007      	beq.n	8004b7a <TIM_TI1_SetConfig+0x46>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004be0 <TIM_TI1_SetConfig+0xac>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_TI1_SetConfig+0x46>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4a1b      	ldr	r2, [pc, #108]	@ (8004be4 <TIM_TI1_SetConfig+0xb0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <TIM_TI1_SetConfig+0x4a>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <TIM_TI1_SetConfig+0x4c>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e003      	b.n	8004b9e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f023 030a 	bic.w	r3, r3, #10
 8004bb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f003 030a 	and.w	r3, r3, #10
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	621a      	str	r2, [r3, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800

08004be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f023 0201 	bic.w	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 030a 	bic.w	r3, r3, #10
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f023 0210 	bic.w	r2, r3, #16
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	031b      	lsls	r3, r3, #12
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c96:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0210 	bic.w	r2, r3, #16
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	031b      	lsls	r3, r3, #12
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b087      	sub	sp, #28
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d56:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d6a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dbc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	031b      	lsls	r3, r3, #12
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004de2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	031b      	lsls	r3, r3, #12
 8004de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f043 0307 	orr.w	r3, r3, #7
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	609a      	str	r2, [r3, #8]
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	021a      	lsls	r2, r3, #8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	bf00      	nop
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b087      	sub	sp, #28
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1a      	ldr	r2, [r3, #32]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	401a      	ands	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1a      	ldr	r2, [r3, #32]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e046      	b.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00e      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d009      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a12      	ldr	r2, [pc, #72]	@ (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a10      	ldr	r2, [pc, #64]	@ (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d10c      	bne.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800

08004f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e042      	b.n	800503c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fd fdae 	bl	8002b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	@ 0x24
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fcd5 	bl	8005998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800500c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800501c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b20      	cmp	r3, #32
 800505c:	d112      	bne.n	8005084 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_UART_Receive_IT+0x26>
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e00b      	b.n	8005086 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	461a      	mov	r2, r3
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fab7 	bl	80055ee <UART_Start_Receive_IT>
 8005080:	4603      	mov	r3, r0
 8005082:	e000      	b.n	8005086 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005084:	2302      	movs	r3, #2
  }
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b0ba      	sub	sp, #232	@ 0xe8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80050bc:	2300      	movs	r3, #0
 80050be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80050ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <HAL_UART_IRQHandler+0x66>
 80050e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fb93 	bl	800581a <UART_Receive_IT>
      return;
 80050f4:	e25b      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80de 	beq.w	80052bc <HAL_UART_IRQHandler+0x22c>
 8005100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800510c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005110:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80d1 	beq.w	80052bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <HAL_UART_IRQHandler+0xae>
 8005126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f043 0201 	orr.w	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00b      	beq.n	8005162 <HAL_UART_IRQHandler+0xd2>
 800514a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515a:	f043 0202 	orr.w	r2, r3, #2
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00b      	beq.n	8005186 <HAL_UART_IRQHandler+0xf6>
 800516e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517e:	f043 0204 	orr.w	r2, r3, #4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d011      	beq.n	80051b6 <HAL_UART_IRQHandler+0x126>
 8005192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800519e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	f043 0208 	orr.w	r2, r3, #8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 81f2 	beq.w	80055a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_UART_IRQHandler+0x14e>
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb1e 	bl	800581a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <HAL_UART_IRQHandler+0x17a>
 8005202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d04f      	beq.n	80052aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa28 	bl	8005660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d041      	beq.n	80052a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005234:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800523c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3314      	adds	r3, #20
 8005246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800524a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800524e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1d9      	bne.n	800521e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d013      	beq.n	800529a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005276:	4a7e      	ldr	r2, [pc, #504]	@ (8005470 <HAL_UART_IRQHandler+0x3e0>)
 8005278:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527e:	4618      	mov	r0, r3
 8005280:	f7fd ff04 	bl	800308c <HAL_DMA_Abort_IT>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d016      	beq.n	80052b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	e00e      	b.n	80052b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f993 	bl	80055c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	e00a      	b.n	80052b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f98f 	bl	80055c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	e006      	b.n	80052b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f98b 	bl	80055c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80052b6:	e175      	b.n	80055a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	bf00      	nop
    return;
 80052ba:	e173      	b.n	80055a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	f040 814f 	bne.w	8005564 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8148 	beq.w	8005564 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8141 	beq.w	8005564 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80b6 	beq.w	8005474 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005314:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8145 	beq.w	80055a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005326:	429a      	cmp	r2, r3
 8005328:	f080 813e 	bcs.w	80055a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005332:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2b20      	cmp	r3, #32
 800533c:	f000 8088 	beq.w	8005450 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	330c      	adds	r3, #12
 8005346:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005356:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800535a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800536c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005370:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005378:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005384:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1d9      	bne.n	8005340 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3314      	adds	r3, #20
 8005392:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800539c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3314      	adds	r3, #20
 80053ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053b0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e1      	bne.n	800538c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e3      	bne.n	80053c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800541e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005420:	f023 0310 	bic.w	r3, r3, #16
 8005424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005432:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005434:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e3      	bne.n	800540e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544a:	4618      	mov	r0, r3
 800544c:	f7fd fde3 	bl	8003016 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800545e:	b29b      	uxth	r3, r3
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	b29b      	uxth	r3, r3
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8b6 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800546c:	e09c      	b.n	80055a8 <HAL_UART_IRQHandler+0x518>
 800546e:	bf00      	nop
 8005470:	08005725 	.word	0x08005725
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800547c:	b29b      	uxth	r3, r3
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 808e 	beq.w	80055ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8089 	beq.w	80055ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80054be:	647a      	str	r2, [r7, #68]	@ 0x44
 80054c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e3      	bne.n	800549a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3314      	adds	r3, #20
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	623b      	str	r3, [r7, #32]
   return(result);
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80054f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e3      	bne.n	80054d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	330c      	adds	r3, #12
 800551e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	60fb      	str	r3, [r7, #12]
   return(result);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0310 	bic.w	r3, r3, #16
 800552e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330c      	adds	r3, #12
 8005538:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800553c:	61fa      	str	r2, [r7, #28]
 800553e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	69b9      	ldr	r1, [r7, #24]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	617b      	str	r3, [r7, #20]
   return(result);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e3      	bne.n	8005518 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005556:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f83b 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005562:	e023      	b.n	80055ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <HAL_UART_IRQHandler+0x4f4>
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f8e5 	bl	800574c <UART_Transmit_IT>
    return;
 8005582:	e014      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00e      	beq.n	80055ae <HAL_UART_IRQHandler+0x51e>
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f924 	bl	80057ea <UART_EndTransmit_IT>
    return;
 80055a2:	e004      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
    return;
 80055a4:	bf00      	nop
 80055a6:	e002      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
      return;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <HAL_UART_IRQHandler+0x51e>
      return;
 80055ac:	bf00      	nop
  }
}
 80055ae:	37e8      	adds	r7, #232	@ 0xe8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr

080055ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	4613      	mov	r3, r2
 80055fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	88fa      	ldrh	r2, [r7, #6]
 8005606:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2222      	movs	r2, #34	@ 0x22
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005632:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0220 	orr.w	r2, r2, #32
 8005652:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b095      	sub	sp, #84	@ 0x54
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800567e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005688:	643a      	str	r2, [r7, #64]	@ 0x40
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800568e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e5      	bne.n	8005668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e5      	bne.n	800569c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d119      	bne.n	800570c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056f8:	61ba      	str	r2, [r7, #24]
 80056fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6979      	ldr	r1, [r7, #20]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	613b      	str	r3, [r7, #16]
   return(result);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e5      	bne.n	80056d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800571a:	bf00      	nop
 800571c:	3754      	adds	r7, #84	@ 0x54
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff ff41 	bl	80055c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b21      	cmp	r3, #33	@ 0x21
 800575e:	d13e      	bne.n	80057de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005768:	d114      	bne.n	8005794 <UART_Transmit_IT+0x48>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d110      	bne.n	8005794 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005786:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	1c9a      	adds	r2, r3, #2
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]
 8005792:	e008      	b.n	80057a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6211      	str	r1, [r2, #32]
 800579e:	781a      	ldrb	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4619      	mov	r1, r3
 80057b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	e000      	b.n	80057e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057de:	2302      	movs	r3, #2
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr

080057ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005800:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fed2 	bl	80055b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b08c      	sub	sp, #48	@ 0x30
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b22      	cmp	r3, #34	@ 0x22
 800582c:	f040 80ae 	bne.w	800598c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005838:	d117      	bne.n	800586a <UART_Receive_IT+0x50>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d113      	bne.n	800586a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005858:	b29a      	uxth	r2, r3
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005862:	1c9a      	adds	r2, r3, #2
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28
 8005868:	e026      	b.n	80058b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005870:	2300      	movs	r3, #0
 8005872:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587c:	d007      	beq.n	800588e <UART_Receive_IT+0x74>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <UART_Receive_IT+0x82>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	b2da      	uxtb	r2, r3
 8005896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e008      	b.n	80058ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4619      	mov	r1, r3
 80058c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d15d      	bne.n	8005988 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0220 	bic.w	r2, r2, #32
 80058da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	2b01      	cmp	r3, #1
 8005910:	d135      	bne.n	800597e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	613b      	str	r3, [r7, #16]
   return(result);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005938:	623a      	str	r2, [r7, #32]
 800593a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	69f9      	ldr	r1, [r7, #28]
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	61bb      	str	r3, [r7, #24]
   return(result);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e5      	bne.n	8005918 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d10a      	bne.n	8005970 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fe2e 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
 800597c:	e002      	b.n	8005984 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fc f87e 	bl	8001a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	e002      	b.n	800598e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3730      	adds	r7, #48	@ 0x30
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80059d2:	f023 030c 	bic.w	r3, r3, #12
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	430b      	orrs	r3, r1
 80059de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2c      	ldr	r2, [pc, #176]	@ (8005aac <UART_SetConfig+0x114>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d103      	bne.n	8005a08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a00:	f7fe f958 	bl	8003cb4 <HAL_RCC_GetPCLK2Freq>
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	e002      	b.n	8005a0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a08:	f7fe f940 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 8005a0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009a      	lsls	r2, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a24:	4a22      	ldr	r2, [pc, #136]	@ (8005ab0 <UART_SetConfig+0x118>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	0119      	lsls	r1, r3, #4
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	009a      	lsls	r2, r3, #2
 8005a38:	441a      	add	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a44:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab0 <UART_SetConfig+0x118>)
 8005a46:	fba3 0302 	umull	r0, r3, r3, r2
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	2064      	movs	r0, #100	@ 0x64
 8005a4e:	fb00 f303 	mul.w	r3, r0, r3
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	3332      	adds	r3, #50	@ 0x32
 8005a58:	4a15      	ldr	r2, [pc, #84]	@ (8005ab0 <UART_SetConfig+0x118>)
 8005a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a64:	4419      	add	r1, r3
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009a      	lsls	r2, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab0 <UART_SetConfig+0x118>)
 8005a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2064      	movs	r0, #100	@ 0x64
 8005a86:	fb00 f303 	mul.w	r3, r0, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	3332      	adds	r3, #50	@ 0x32
 8005a90:	4a07      	ldr	r2, [pc, #28]	@ (8005ab0 <UART_SetConfig+0x118>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40013800 	.word	0x40013800
 8005ab0:	51eb851f 	.word	0x51eb851f

08005ab4 <_scanf_float>:
 8005ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab8:	b087      	sub	sp, #28
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	688b      	ldr	r3, [r1, #8]
 8005abe:	4617      	mov	r7, r2
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005ac6:	bf82      	ittt	hi
 8005ac8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005acc:	eb03 0b05 	addhi.w	fp, r3, r5
 8005ad0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005ad4:	460a      	mov	r2, r1
 8005ad6:	f04f 0500 	mov.w	r5, #0
 8005ada:	bf88      	it	hi
 8005adc:	608b      	strhi	r3, [r1, #8]
 8005ade:	680b      	ldr	r3, [r1, #0]
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005ae6:	f842 3b1c 	str.w	r3, [r2], #28
 8005aea:	460c      	mov	r4, r1
 8005aec:	bf98      	it	ls
 8005aee:	f04f 0b00 	movls.w	fp, #0
 8005af2:	4616      	mov	r6, r2
 8005af4:	46aa      	mov	sl, r5
 8005af6:	46a9      	mov	r9, r5
 8005af8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005afc:	9201      	str	r2, [sp, #4]
 8005afe:	9502      	str	r5, [sp, #8]
 8005b00:	68a2      	ldr	r2, [r4, #8]
 8005b02:	b152      	cbz	r2, 8005b1a <_scanf_float+0x66>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b4e      	cmp	r3, #78	@ 0x4e
 8005b0a:	d865      	bhi.n	8005bd8 <_scanf_float+0x124>
 8005b0c:	2b40      	cmp	r3, #64	@ 0x40
 8005b0e:	d83d      	bhi.n	8005b8c <_scanf_float+0xd8>
 8005b10:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005b14:	b2c8      	uxtb	r0, r1
 8005b16:	280e      	cmp	r0, #14
 8005b18:	d93b      	bls.n	8005b92 <_scanf_float+0xde>
 8005b1a:	f1b9 0f00 	cmp.w	r9, #0
 8005b1e:	d003      	beq.n	8005b28 <_scanf_float+0x74>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b2c:	f1ba 0f01 	cmp.w	sl, #1
 8005b30:	f200 8118 	bhi.w	8005d64 <_scanf_float+0x2b0>
 8005b34:	9b01      	ldr	r3, [sp, #4]
 8005b36:	429e      	cmp	r6, r3
 8005b38:	f200 8109 	bhi.w	8005d4e <_scanf_float+0x29a>
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	b007      	add	sp, #28
 8005b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b44:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005b48:	2a0d      	cmp	r2, #13
 8005b4a:	d8e6      	bhi.n	8005b1a <_scanf_float+0x66>
 8005b4c:	a101      	add	r1, pc, #4	@ (adr r1, 8005b54 <_scanf_float+0xa0>)
 8005b4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b52:	bf00      	nop
 8005b54:	08005c9b 	.word	0x08005c9b
 8005b58:	08005b1b 	.word	0x08005b1b
 8005b5c:	08005b1b 	.word	0x08005b1b
 8005b60:	08005b1b 	.word	0x08005b1b
 8005b64:	08005cfb 	.word	0x08005cfb
 8005b68:	08005cd3 	.word	0x08005cd3
 8005b6c:	08005b1b 	.word	0x08005b1b
 8005b70:	08005b1b 	.word	0x08005b1b
 8005b74:	08005ca9 	.word	0x08005ca9
 8005b78:	08005b1b 	.word	0x08005b1b
 8005b7c:	08005b1b 	.word	0x08005b1b
 8005b80:	08005b1b 	.word	0x08005b1b
 8005b84:	08005b1b 	.word	0x08005b1b
 8005b88:	08005c61 	.word	0x08005c61
 8005b8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005b90:	e7da      	b.n	8005b48 <_scanf_float+0x94>
 8005b92:	290e      	cmp	r1, #14
 8005b94:	d8c1      	bhi.n	8005b1a <_scanf_float+0x66>
 8005b96:	a001      	add	r0, pc, #4	@ (adr r0, 8005b9c <_scanf_float+0xe8>)
 8005b98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b9c:	08005c51 	.word	0x08005c51
 8005ba0:	08005b1b 	.word	0x08005b1b
 8005ba4:	08005c51 	.word	0x08005c51
 8005ba8:	08005ce7 	.word	0x08005ce7
 8005bac:	08005b1b 	.word	0x08005b1b
 8005bb0:	08005bf9 	.word	0x08005bf9
 8005bb4:	08005c37 	.word	0x08005c37
 8005bb8:	08005c37 	.word	0x08005c37
 8005bbc:	08005c37 	.word	0x08005c37
 8005bc0:	08005c37 	.word	0x08005c37
 8005bc4:	08005c37 	.word	0x08005c37
 8005bc8:	08005c37 	.word	0x08005c37
 8005bcc:	08005c37 	.word	0x08005c37
 8005bd0:	08005c37 	.word	0x08005c37
 8005bd4:	08005c37 	.word	0x08005c37
 8005bd8:	2b6e      	cmp	r3, #110	@ 0x6e
 8005bda:	d809      	bhi.n	8005bf0 <_scanf_float+0x13c>
 8005bdc:	2b60      	cmp	r3, #96	@ 0x60
 8005bde:	d8b1      	bhi.n	8005b44 <_scanf_float+0x90>
 8005be0:	2b54      	cmp	r3, #84	@ 0x54
 8005be2:	d07b      	beq.n	8005cdc <_scanf_float+0x228>
 8005be4:	2b59      	cmp	r3, #89	@ 0x59
 8005be6:	d198      	bne.n	8005b1a <_scanf_float+0x66>
 8005be8:	2d07      	cmp	r5, #7
 8005bea:	d196      	bne.n	8005b1a <_scanf_float+0x66>
 8005bec:	2508      	movs	r5, #8
 8005bee:	e02c      	b.n	8005c4a <_scanf_float+0x196>
 8005bf0:	2b74      	cmp	r3, #116	@ 0x74
 8005bf2:	d073      	beq.n	8005cdc <_scanf_float+0x228>
 8005bf4:	2b79      	cmp	r3, #121	@ 0x79
 8005bf6:	e7f6      	b.n	8005be6 <_scanf_float+0x132>
 8005bf8:	6821      	ldr	r1, [r4, #0]
 8005bfa:	05c8      	lsls	r0, r1, #23
 8005bfc:	d51b      	bpl.n	8005c36 <_scanf_float+0x182>
 8005bfe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005c02:	6021      	str	r1, [r4, #0]
 8005c04:	f109 0901 	add.w	r9, r9, #1
 8005c08:	f1bb 0f00 	cmp.w	fp, #0
 8005c0c:	d003      	beq.n	8005c16 <_scanf_float+0x162>
 8005c0e:	3201      	adds	r2, #1
 8005c10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c14:	60a2      	str	r2, [r4, #8]
 8005c16:	68a3      	ldr	r3, [r4, #8]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	6123      	str	r3, [r4, #16]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	f340 8087 	ble.w	8005d3c <_scanf_float+0x288>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	e764      	b.n	8005b00 <_scanf_float+0x4c>
 8005c36:	eb1a 0105 	adds.w	r1, sl, r5
 8005c3a:	f47f af6e 	bne.w	8005b1a <_scanf_float+0x66>
 8005c3e:	460d      	mov	r5, r1
 8005c40:	468a      	mov	sl, r1
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005c48:	6022      	str	r2, [r4, #0]
 8005c4a:	f806 3b01 	strb.w	r3, [r6], #1
 8005c4e:	e7e2      	b.n	8005c16 <_scanf_float+0x162>
 8005c50:	6822      	ldr	r2, [r4, #0]
 8005c52:	0610      	lsls	r0, r2, #24
 8005c54:	f57f af61 	bpl.w	8005b1a <_scanf_float+0x66>
 8005c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	e7f4      	b.n	8005c4a <_scanf_float+0x196>
 8005c60:	f1ba 0f00 	cmp.w	sl, #0
 8005c64:	d10e      	bne.n	8005c84 <_scanf_float+0x1d0>
 8005c66:	f1b9 0f00 	cmp.w	r9, #0
 8005c6a:	d10e      	bne.n	8005c8a <_scanf_float+0x1d6>
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005c72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005c76:	d108      	bne.n	8005c8a <_scanf_float+0x1d6>
 8005c78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005c7c:	f04f 0a01 	mov.w	sl, #1
 8005c80:	6022      	str	r2, [r4, #0]
 8005c82:	e7e2      	b.n	8005c4a <_scanf_float+0x196>
 8005c84:	f1ba 0f02 	cmp.w	sl, #2
 8005c88:	d055      	beq.n	8005d36 <_scanf_float+0x282>
 8005c8a:	2d01      	cmp	r5, #1
 8005c8c:	d002      	beq.n	8005c94 <_scanf_float+0x1e0>
 8005c8e:	2d04      	cmp	r5, #4
 8005c90:	f47f af43 	bne.w	8005b1a <_scanf_float+0x66>
 8005c94:	3501      	adds	r5, #1
 8005c96:	b2ed      	uxtb	r5, r5
 8005c98:	e7d7      	b.n	8005c4a <_scanf_float+0x196>
 8005c9a:	f1ba 0f01 	cmp.w	sl, #1
 8005c9e:	f47f af3c 	bne.w	8005b1a <_scanf_float+0x66>
 8005ca2:	f04f 0a02 	mov.w	sl, #2
 8005ca6:	e7d0      	b.n	8005c4a <_scanf_float+0x196>
 8005ca8:	b97d      	cbnz	r5, 8005cca <_scanf_float+0x216>
 8005caa:	f1b9 0f00 	cmp.w	r9, #0
 8005cae:	f47f af37 	bne.w	8005b20 <_scanf_float+0x6c>
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005cb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005cbc:	f040 8103 	bne.w	8005ec6 <_scanf_float+0x412>
 8005cc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005cc4:	2501      	movs	r5, #1
 8005cc6:	6022      	str	r2, [r4, #0]
 8005cc8:	e7bf      	b.n	8005c4a <_scanf_float+0x196>
 8005cca:	2d03      	cmp	r5, #3
 8005ccc:	d0e2      	beq.n	8005c94 <_scanf_float+0x1e0>
 8005cce:	2d05      	cmp	r5, #5
 8005cd0:	e7de      	b.n	8005c90 <_scanf_float+0x1dc>
 8005cd2:	2d02      	cmp	r5, #2
 8005cd4:	f47f af21 	bne.w	8005b1a <_scanf_float+0x66>
 8005cd8:	2503      	movs	r5, #3
 8005cda:	e7b6      	b.n	8005c4a <_scanf_float+0x196>
 8005cdc:	2d06      	cmp	r5, #6
 8005cde:	f47f af1c 	bne.w	8005b1a <_scanf_float+0x66>
 8005ce2:	2507      	movs	r5, #7
 8005ce4:	e7b1      	b.n	8005c4a <_scanf_float+0x196>
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	0591      	lsls	r1, r2, #22
 8005cea:	f57f af16 	bpl.w	8005b1a <_scanf_float+0x66>
 8005cee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005cf2:	6022      	str	r2, [r4, #0]
 8005cf4:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cf8:	e7a7      	b.n	8005c4a <_scanf_float+0x196>
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005d00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005d04:	d006      	beq.n	8005d14 <_scanf_float+0x260>
 8005d06:	0550      	lsls	r0, r2, #21
 8005d08:	f57f af07 	bpl.w	8005b1a <_scanf_float+0x66>
 8005d0c:	f1b9 0f00 	cmp.w	r9, #0
 8005d10:	f000 80d9 	beq.w	8005ec6 <_scanf_float+0x412>
 8005d14:	0591      	lsls	r1, r2, #22
 8005d16:	bf58      	it	pl
 8005d18:	9902      	ldrpl	r1, [sp, #8]
 8005d1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d1e:	bf58      	it	pl
 8005d20:	eba9 0101 	subpl.w	r1, r9, r1
 8005d24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005d28:	f04f 0900 	mov.w	r9, #0
 8005d2c:	bf58      	it	pl
 8005d2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005d32:	6022      	str	r2, [r4, #0]
 8005d34:	e789      	b.n	8005c4a <_scanf_float+0x196>
 8005d36:	f04f 0a03 	mov.w	sl, #3
 8005d3a:	e786      	b.n	8005c4a <_scanf_float+0x196>
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	4640      	mov	r0, r8
 8005d40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005d44:	4798      	blx	r3
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f43f aeda 	beq.w	8005b00 <_scanf_float+0x4c>
 8005d4c:	e6e5      	b.n	8005b1a <_scanf_float+0x66>
 8005d4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d52:	463a      	mov	r2, r7
 8005d54:	4640      	mov	r0, r8
 8005d56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d5a:	4798      	blx	r3
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	6123      	str	r3, [r4, #16]
 8005d62:	e6e7      	b.n	8005b34 <_scanf_float+0x80>
 8005d64:	1e6b      	subs	r3, r5, #1
 8005d66:	2b06      	cmp	r3, #6
 8005d68:	d824      	bhi.n	8005db4 <_scanf_float+0x300>
 8005d6a:	2d02      	cmp	r5, #2
 8005d6c:	d836      	bhi.n	8005ddc <_scanf_float+0x328>
 8005d6e:	9b01      	ldr	r3, [sp, #4]
 8005d70:	429e      	cmp	r6, r3
 8005d72:	f67f aee3 	bls.w	8005b3c <_scanf_float+0x88>
 8005d76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d7a:	463a      	mov	r2, r7
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d82:	4798      	blx	r3
 8005d84:	6923      	ldr	r3, [r4, #16]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	e7f0      	b.n	8005d6e <_scanf_float+0x2ba>
 8005d8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d90:	463a      	mov	r2, r7
 8005d92:	4640      	mov	r0, r8
 8005d94:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005d98:	4798      	blx	r3
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	6123      	str	r3, [r4, #16]
 8005da0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005da4:	fa5f fa8a 	uxtb.w	sl, sl
 8005da8:	f1ba 0f02 	cmp.w	sl, #2
 8005dac:	d1ee      	bne.n	8005d8c <_scanf_float+0x2d8>
 8005dae:	3d03      	subs	r5, #3
 8005db0:	b2ed      	uxtb	r5, r5
 8005db2:	1b76      	subs	r6, r6, r5
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	05da      	lsls	r2, r3, #23
 8005db8:	d530      	bpl.n	8005e1c <_scanf_float+0x368>
 8005dba:	055b      	lsls	r3, r3, #21
 8005dbc:	d511      	bpl.n	8005de2 <_scanf_float+0x32e>
 8005dbe:	9b01      	ldr	r3, [sp, #4]
 8005dc0:	429e      	cmp	r6, r3
 8005dc2:	f67f aebb 	bls.w	8005b3c <_scanf_float+0x88>
 8005dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dca:	463a      	mov	r2, r7
 8005dcc:	4640      	mov	r0, r8
 8005dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dd2:	4798      	blx	r3
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	e7f0      	b.n	8005dbe <_scanf_float+0x30a>
 8005ddc:	46aa      	mov	sl, r5
 8005dde:	46b3      	mov	fp, r6
 8005de0:	e7de      	b.n	8005da0 <_scanf_float+0x2ec>
 8005de2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	2965      	cmp	r1, #101	@ 0x65
 8005dea:	f103 33ff 	add.w	r3, r3, #4294967295
 8005dee:	f106 35ff 	add.w	r5, r6, #4294967295
 8005df2:	6123      	str	r3, [r4, #16]
 8005df4:	d00c      	beq.n	8005e10 <_scanf_float+0x35c>
 8005df6:	2945      	cmp	r1, #69	@ 0x45
 8005df8:	d00a      	beq.n	8005e10 <_scanf_float+0x35c>
 8005dfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dfe:	463a      	mov	r2, r7
 8005e00:	4640      	mov	r0, r8
 8005e02:	4798      	blx	r3
 8005e04:	6923      	ldr	r3, [r4, #16]
 8005e06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	1eb5      	subs	r5, r6, #2
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	463a      	mov	r2, r7
 8005e12:	4640      	mov	r0, r8
 8005e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e18:	4798      	blx	r3
 8005e1a:	462e      	mov	r6, r5
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	f012 0210 	ands.w	r2, r2, #16
 8005e22:	d001      	beq.n	8005e28 <_scanf_float+0x374>
 8005e24:	2000      	movs	r0, #0
 8005e26:	e68a      	b.n	8005b3e <_scanf_float+0x8a>
 8005e28:	7032      	strb	r2, [r6, #0]
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e34:	d11c      	bne.n	8005e70 <_scanf_float+0x3bc>
 8005e36:	9b02      	ldr	r3, [sp, #8]
 8005e38:	454b      	cmp	r3, r9
 8005e3a:	eba3 0209 	sub.w	r2, r3, r9
 8005e3e:	d123      	bne.n	8005e88 <_scanf_float+0x3d4>
 8005e40:	2200      	movs	r2, #0
 8005e42:	4640      	mov	r0, r8
 8005e44:	9901      	ldr	r1, [sp, #4]
 8005e46:	f001 f907 	bl	8007058 <_strtod_r>
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	6825      	ldr	r5, [r4, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f015 0f02 	tst.w	r5, #2
 8005e54:	4606      	mov	r6, r0
 8005e56:	460f      	mov	r7, r1
 8005e58:	f103 0204 	add.w	r2, r3, #4
 8005e5c:	d01f      	beq.n	8005e9e <_scanf_float+0x3ea>
 8005e5e:	9903      	ldr	r1, [sp, #12]
 8005e60:	600a      	str	r2, [r1, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	e9c3 6700 	strd	r6, r7, [r3]
 8005e68:	68e3      	ldr	r3, [r4, #12]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60e3      	str	r3, [r4, #12]
 8005e6e:	e7d9      	b.n	8005e24 <_scanf_float+0x370>
 8005e70:	9b04      	ldr	r3, [sp, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0e4      	beq.n	8005e40 <_scanf_float+0x38c>
 8005e76:	9905      	ldr	r1, [sp, #20]
 8005e78:	230a      	movs	r3, #10
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	3101      	adds	r1, #1
 8005e7e:	f001 f96b 	bl	8007158 <_strtol_r>
 8005e82:	9b04      	ldr	r3, [sp, #16]
 8005e84:	9e05      	ldr	r6, [sp, #20]
 8005e86:	1ac2      	subs	r2, r0, r3
 8005e88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005e8c:	429e      	cmp	r6, r3
 8005e8e:	bf28      	it	cs
 8005e90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005e94:	4630      	mov	r0, r6
 8005e96:	490d      	ldr	r1, [pc, #52]	@ (8005ecc <_scanf_float+0x418>)
 8005e98:	f000 f8de 	bl	8006058 <siprintf>
 8005e9c:	e7d0      	b.n	8005e40 <_scanf_float+0x38c>
 8005e9e:	076d      	lsls	r5, r5, #29
 8005ea0:	d4dd      	bmi.n	8005e5e <_scanf_float+0x3aa>
 8005ea2:	9d03      	ldr	r5, [sp, #12]
 8005ea4:	602a      	str	r2, [r5, #0]
 8005ea6:	681d      	ldr	r5, [r3, #0]
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	f7fa fdae 	bl	8000a0c <__aeabi_dcmpun>
 8005eb0:	b120      	cbz	r0, 8005ebc <_scanf_float+0x408>
 8005eb2:	4807      	ldr	r0, [pc, #28]	@ (8005ed0 <_scanf_float+0x41c>)
 8005eb4:	f000 f9dc 	bl	8006270 <nanf>
 8005eb8:	6028      	str	r0, [r5, #0]
 8005eba:	e7d5      	b.n	8005e68 <_scanf_float+0x3b4>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f7fa fdda 	bl	8000a78 <__aeabi_d2f>
 8005ec4:	e7f8      	b.n	8005eb8 <_scanf_float+0x404>
 8005ec6:	f04f 0900 	mov.w	r9, #0
 8005eca:	e62d      	b.n	8005b28 <_scanf_float+0x74>
 8005ecc:	08009816 	.word	0x08009816
 8005ed0:	08009bf3 	.word	0x08009bf3

08005ed4 <std>:
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	4604      	mov	r4, r0
 8005eda:	e9c0 3300 	strd	r3, r3, [r0]
 8005ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ee2:	6083      	str	r3, [r0, #8]
 8005ee4:	8181      	strh	r1, [r0, #12]
 8005ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ee8:	81c2      	strh	r2, [r0, #14]
 8005eea:	6183      	str	r3, [r0, #24]
 8005eec:	4619      	mov	r1, r3
 8005eee:	2208      	movs	r2, #8
 8005ef0:	305c      	adds	r0, #92	@ 0x5c
 8005ef2:	f000 f940 	bl	8006176 <memset>
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f2c <std+0x58>)
 8005ef8:	6224      	str	r4, [r4, #32]
 8005efa:	6263      	str	r3, [r4, #36]	@ 0x24
 8005efc:	4b0c      	ldr	r3, [pc, #48]	@ (8005f30 <std+0x5c>)
 8005efe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f00:	4b0c      	ldr	r3, [pc, #48]	@ (8005f34 <std+0x60>)
 8005f02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f04:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <std+0x64>)
 8005f06:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f08:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <std+0x68>)
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	d006      	beq.n	8005f1c <std+0x48>
 8005f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f12:	4294      	cmp	r4, r2
 8005f14:	d002      	beq.n	8005f1c <std+0x48>
 8005f16:	33d0      	adds	r3, #208	@ 0xd0
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	d105      	bne.n	8005f28 <std+0x54>
 8005f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f24:	f000 b9a0 	b.w	8006268 <__retarget_lock_init_recursive>
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	bf00      	nop
 8005f2c:	080060ed 	.word	0x080060ed
 8005f30:	08006113 	.word	0x08006113
 8005f34:	0800614b 	.word	0x0800614b
 8005f38:	0800616f 	.word	0x0800616f
 8005f3c:	200004c8 	.word	0x200004c8

08005f40 <stdio_exit_handler>:
 8005f40:	4a02      	ldr	r2, [pc, #8]	@ (8005f4c <stdio_exit_handler+0xc>)
 8005f42:	4903      	ldr	r1, [pc, #12]	@ (8005f50 <stdio_exit_handler+0x10>)
 8005f44:	4803      	ldr	r0, [pc, #12]	@ (8005f54 <stdio_exit_handler+0x14>)
 8005f46:	f000 b869 	b.w	800601c <_fwalk_sglue>
 8005f4a:	bf00      	nop
 8005f4c:	20000020 	.word	0x20000020
 8005f50:	08007e5d 	.word	0x08007e5d
 8005f54:	20000030 	.word	0x20000030

08005f58 <cleanup_stdio>:
 8005f58:	6841      	ldr	r1, [r0, #4]
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f8c <cleanup_stdio+0x34>)
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	4604      	mov	r4, r0
 8005f62:	d001      	beq.n	8005f68 <cleanup_stdio+0x10>
 8005f64:	f001 ff7a 	bl	8007e5c <_fflush_r>
 8005f68:	68a1      	ldr	r1, [r4, #8]
 8005f6a:	4b09      	ldr	r3, [pc, #36]	@ (8005f90 <cleanup_stdio+0x38>)
 8005f6c:	4299      	cmp	r1, r3
 8005f6e:	d002      	beq.n	8005f76 <cleanup_stdio+0x1e>
 8005f70:	4620      	mov	r0, r4
 8005f72:	f001 ff73 	bl	8007e5c <_fflush_r>
 8005f76:	68e1      	ldr	r1, [r4, #12]
 8005f78:	4b06      	ldr	r3, [pc, #24]	@ (8005f94 <cleanup_stdio+0x3c>)
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	d004      	beq.n	8005f88 <cleanup_stdio+0x30>
 8005f7e:	4620      	mov	r0, r4
 8005f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f84:	f001 bf6a 	b.w	8007e5c <_fflush_r>
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	bf00      	nop
 8005f8c:	200004c8 	.word	0x200004c8
 8005f90:	20000530 	.word	0x20000530
 8005f94:	20000598 	.word	0x20000598

08005f98 <global_stdio_init.part.0>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc8 <global_stdio_init.part.0+0x30>)
 8005f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8005fcc <global_stdio_init.part.0+0x34>)
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fd0 <global_stdio_init.part.0+0x38>)
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	2104      	movs	r1, #4
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f7ff ff94 	bl	8005ed4 <std>
 8005fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	2109      	movs	r1, #9
 8005fb4:	f7ff ff8e 	bl	8005ed4 <std>
 8005fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc2:	2112      	movs	r1, #18
 8005fc4:	f7ff bf86 	b.w	8005ed4 <std>
 8005fc8:	20000600 	.word	0x20000600
 8005fcc:	200004c8 	.word	0x200004c8
 8005fd0:	08005f41 	.word	0x08005f41

08005fd4 <__sfp_lock_acquire>:
 8005fd4:	4801      	ldr	r0, [pc, #4]	@ (8005fdc <__sfp_lock_acquire+0x8>)
 8005fd6:	f000 b948 	b.w	800626a <__retarget_lock_acquire_recursive>
 8005fda:	bf00      	nop
 8005fdc:	20000609 	.word	0x20000609

08005fe0 <__sfp_lock_release>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	@ (8005fe8 <__sfp_lock_release+0x8>)
 8005fe2:	f000 b943 	b.w	800626c <__retarget_lock_release_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	20000609 	.word	0x20000609

08005fec <__sinit>:
 8005fec:	b510      	push	{r4, lr}
 8005fee:	4604      	mov	r4, r0
 8005ff0:	f7ff fff0 	bl	8005fd4 <__sfp_lock_acquire>
 8005ff4:	6a23      	ldr	r3, [r4, #32]
 8005ff6:	b11b      	cbz	r3, 8006000 <__sinit+0x14>
 8005ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ffc:	f7ff bff0 	b.w	8005fe0 <__sfp_lock_release>
 8006000:	4b04      	ldr	r3, [pc, #16]	@ (8006014 <__sinit+0x28>)
 8006002:	6223      	str	r3, [r4, #32]
 8006004:	4b04      	ldr	r3, [pc, #16]	@ (8006018 <__sinit+0x2c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f5      	bne.n	8005ff8 <__sinit+0xc>
 800600c:	f7ff ffc4 	bl	8005f98 <global_stdio_init.part.0>
 8006010:	e7f2      	b.n	8005ff8 <__sinit+0xc>
 8006012:	bf00      	nop
 8006014:	08005f59 	.word	0x08005f59
 8006018:	20000600 	.word	0x20000600

0800601c <_fwalk_sglue>:
 800601c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006020:	4607      	mov	r7, r0
 8006022:	4688      	mov	r8, r1
 8006024:	4614      	mov	r4, r2
 8006026:	2600      	movs	r6, #0
 8006028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800602c:	f1b9 0901 	subs.w	r9, r9, #1
 8006030:	d505      	bpl.n	800603e <_fwalk_sglue+0x22>
 8006032:	6824      	ldr	r4, [r4, #0]
 8006034:	2c00      	cmp	r4, #0
 8006036:	d1f7      	bne.n	8006028 <_fwalk_sglue+0xc>
 8006038:	4630      	mov	r0, r6
 800603a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800603e:	89ab      	ldrh	r3, [r5, #12]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d907      	bls.n	8006054 <_fwalk_sglue+0x38>
 8006044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006048:	3301      	adds	r3, #1
 800604a:	d003      	beq.n	8006054 <_fwalk_sglue+0x38>
 800604c:	4629      	mov	r1, r5
 800604e:	4638      	mov	r0, r7
 8006050:	47c0      	blx	r8
 8006052:	4306      	orrs	r6, r0
 8006054:	3568      	adds	r5, #104	@ 0x68
 8006056:	e7e9      	b.n	800602c <_fwalk_sglue+0x10>

08006058 <siprintf>:
 8006058:	b40e      	push	{r1, r2, r3}
 800605a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800605e:	b500      	push	{lr}
 8006060:	b09c      	sub	sp, #112	@ 0x70
 8006062:	ab1d      	add	r3, sp, #116	@ 0x74
 8006064:	9002      	str	r0, [sp, #8]
 8006066:	9006      	str	r0, [sp, #24]
 8006068:	9107      	str	r1, [sp, #28]
 800606a:	9104      	str	r1, [sp, #16]
 800606c:	4808      	ldr	r0, [pc, #32]	@ (8006090 <siprintf+0x38>)
 800606e:	4909      	ldr	r1, [pc, #36]	@ (8006094 <siprintf+0x3c>)
 8006070:	f853 2b04 	ldr.w	r2, [r3], #4
 8006074:	9105      	str	r1, [sp, #20]
 8006076:	6800      	ldr	r0, [r0, #0]
 8006078:	a902      	add	r1, sp, #8
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	f001 f8ca 	bl	8007214 <_svfiprintf_r>
 8006080:	2200      	movs	r2, #0
 8006082:	9b02      	ldr	r3, [sp, #8]
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	b01c      	add	sp, #112	@ 0x70
 8006088:	f85d eb04 	ldr.w	lr, [sp], #4
 800608c:	b003      	add	sp, #12
 800608e:	4770      	bx	lr
 8006090:	2000002c 	.word	0x2000002c
 8006094:	ffff0208 	.word	0xffff0208

08006098 <siscanf>:
 8006098:	b40e      	push	{r1, r2, r3}
 800609a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800609e:	b530      	push	{r4, r5, lr}
 80060a0:	b09c      	sub	sp, #112	@ 0x70
 80060a2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80060a4:	f854 5b04 	ldr.w	r5, [r4], #4
 80060a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80060ac:	9002      	str	r0, [sp, #8]
 80060ae:	9006      	str	r0, [sp, #24]
 80060b0:	f7fa f84e 	bl	8000150 <strlen>
 80060b4:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <siscanf+0x4c>)
 80060b6:	9003      	str	r0, [sp, #12]
 80060b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ba:	2300      	movs	r3, #0
 80060bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060be:	9314      	str	r3, [sp, #80]	@ 0x50
 80060c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060c4:	9007      	str	r0, [sp, #28]
 80060c6:	4808      	ldr	r0, [pc, #32]	@ (80060e8 <siscanf+0x50>)
 80060c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060cc:	462a      	mov	r2, r5
 80060ce:	4623      	mov	r3, r4
 80060d0:	a902      	add	r1, sp, #8
 80060d2:	6800      	ldr	r0, [r0, #0]
 80060d4:	9401      	str	r4, [sp, #4]
 80060d6:	f001 f9f1 	bl	80074bc <__ssvfiscanf_r>
 80060da:	b01c      	add	sp, #112	@ 0x70
 80060dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060e0:	b003      	add	sp, #12
 80060e2:	4770      	bx	lr
 80060e4:	0800610f 	.word	0x0800610f
 80060e8:	2000002c 	.word	0x2000002c

080060ec <__sread>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f4:	f000 f86a 	bl	80061cc <_read_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	bfab      	itete	ge
 80060fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006100:	181b      	addge	r3, r3, r0
 8006102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006106:	bfac      	ite	ge
 8006108:	6563      	strge	r3, [r4, #84]	@ 0x54
 800610a:	81a3      	strhlt	r3, [r4, #12]
 800610c:	bd10      	pop	{r4, pc}

0800610e <__seofread>:
 800610e:	2000      	movs	r0, #0
 8006110:	4770      	bx	lr

08006112 <__swrite>:
 8006112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	461f      	mov	r7, r3
 8006118:	898b      	ldrh	r3, [r1, #12]
 800611a:	4605      	mov	r5, r0
 800611c:	05db      	lsls	r3, r3, #23
 800611e:	460c      	mov	r4, r1
 8006120:	4616      	mov	r6, r2
 8006122:	d505      	bpl.n	8006130 <__swrite+0x1e>
 8006124:	2302      	movs	r3, #2
 8006126:	2200      	movs	r2, #0
 8006128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612c:	f000 f83c 	bl	80061a8 <_lseek_r>
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	4632      	mov	r2, r6
 8006134:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006138:	81a3      	strh	r3, [r4, #12]
 800613a:	4628      	mov	r0, r5
 800613c:	463b      	mov	r3, r7
 800613e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006146:	f000 b853 	b.w	80061f0 <_write_r>

0800614a <__sseek>:
 800614a:	b510      	push	{r4, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006152:	f000 f829 	bl	80061a8 <_lseek_r>
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	bf15      	itete	ne
 800615c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800615e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006166:	81a3      	strheq	r3, [r4, #12]
 8006168:	bf18      	it	ne
 800616a:	81a3      	strhne	r3, [r4, #12]
 800616c:	bd10      	pop	{r4, pc}

0800616e <__sclose>:
 800616e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006172:	f000 b809 	b.w	8006188 <_close_r>

08006176 <memset>:
 8006176:	4603      	mov	r3, r0
 8006178:	4402      	add	r2, r0
 800617a:	4293      	cmp	r3, r2
 800617c:	d100      	bne.n	8006180 <memset+0xa>
 800617e:	4770      	bx	lr
 8006180:	f803 1b01 	strb.w	r1, [r3], #1
 8006184:	e7f9      	b.n	800617a <memset+0x4>
	...

08006188 <_close_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	2300      	movs	r3, #0
 800618c:	4d05      	ldr	r5, [pc, #20]	@ (80061a4 <_close_r+0x1c>)
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f7fc f903 	bl	800239e <_close>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_close_r+0x1a>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_close_r+0x1a>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20000604 	.word	0x20000604

080061a8 <_lseek_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4604      	mov	r4, r0
 80061ac:	4608      	mov	r0, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	2200      	movs	r2, #0
 80061b2:	4d05      	ldr	r5, [pc, #20]	@ (80061c8 <_lseek_r+0x20>)
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fc f915 	bl	80023e6 <_lseek>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_lseek_r+0x1e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_lseek_r+0x1e>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	20000604 	.word	0x20000604

080061cc <_read_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4604      	mov	r4, r0
 80061d0:	4608      	mov	r0, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	2200      	movs	r2, #0
 80061d6:	4d05      	ldr	r5, [pc, #20]	@ (80061ec <_read_r+0x20>)
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fc f8a6 	bl	800232c <_read>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_read_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_read_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000604 	.word	0x20000604

080061f0 <_write_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4604      	mov	r4, r0
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	2200      	movs	r2, #0
 80061fa:	4d05      	ldr	r5, [pc, #20]	@ (8006210 <_write_r+0x20>)
 80061fc:	602a      	str	r2, [r5, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	f7fc f8b1 	bl	8002366 <_write>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_write_r+0x1e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_write_r+0x1e>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	20000604 	.word	0x20000604

08006214 <__errno>:
 8006214:	4b01      	ldr	r3, [pc, #4]	@ (800621c <__errno+0x8>)
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	2000002c 	.word	0x2000002c

08006220 <__libc_init_array>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	2600      	movs	r6, #0
 8006224:	4d0c      	ldr	r5, [pc, #48]	@ (8006258 <__libc_init_array+0x38>)
 8006226:	4c0d      	ldr	r4, [pc, #52]	@ (800625c <__libc_init_array+0x3c>)
 8006228:	1b64      	subs	r4, r4, r5
 800622a:	10a4      	asrs	r4, r4, #2
 800622c:	42a6      	cmp	r6, r4
 800622e:	d109      	bne.n	8006244 <__libc_init_array+0x24>
 8006230:	f003 fac4 	bl	80097bc <_init>
 8006234:	2600      	movs	r6, #0
 8006236:	4d0a      	ldr	r5, [pc, #40]	@ (8006260 <__libc_init_array+0x40>)
 8006238:	4c0a      	ldr	r4, [pc, #40]	@ (8006264 <__libc_init_array+0x44>)
 800623a:	1b64      	subs	r4, r4, r5
 800623c:	10a4      	asrs	r4, r4, #2
 800623e:	42a6      	cmp	r6, r4
 8006240:	d105      	bne.n	800624e <__libc_init_array+0x2e>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	f855 3b04 	ldr.w	r3, [r5], #4
 8006248:	4798      	blx	r3
 800624a:	3601      	adds	r6, #1
 800624c:	e7ee      	b.n	800622c <__libc_init_array+0xc>
 800624e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006252:	4798      	blx	r3
 8006254:	3601      	adds	r6, #1
 8006256:	e7f2      	b.n	800623e <__libc_init_array+0x1e>
 8006258:	08009bfc 	.word	0x08009bfc
 800625c:	08009bfc 	.word	0x08009bfc
 8006260:	08009bfc 	.word	0x08009bfc
 8006264:	08009c00 	.word	0x08009c00

08006268 <__retarget_lock_init_recursive>:
 8006268:	4770      	bx	lr

0800626a <__retarget_lock_acquire_recursive>:
 800626a:	4770      	bx	lr

0800626c <__retarget_lock_release_recursive>:
 800626c:	4770      	bx	lr
	...

08006270 <nanf>:
 8006270:	4800      	ldr	r0, [pc, #0]	@ (8006274 <nanf+0x4>)
 8006272:	4770      	bx	lr
 8006274:	7fc00000 	.word	0x7fc00000

08006278 <_free_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4605      	mov	r5, r0
 800627c:	2900      	cmp	r1, #0
 800627e:	d040      	beq.n	8006302 <_free_r+0x8a>
 8006280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006284:	1f0c      	subs	r4, r1, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	bfb8      	it	lt
 800628a:	18e4      	addlt	r4, r4, r3
 800628c:	f000 f8de 	bl	800644c <__malloc_lock>
 8006290:	4a1c      	ldr	r2, [pc, #112]	@ (8006304 <_free_r+0x8c>)
 8006292:	6813      	ldr	r3, [r2, #0]
 8006294:	b933      	cbnz	r3, 80062a4 <_free_r+0x2c>
 8006296:	6063      	str	r3, [r4, #4]
 8006298:	6014      	str	r4, [r2, #0]
 800629a:	4628      	mov	r0, r5
 800629c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062a0:	f000 b8da 	b.w	8006458 <__malloc_unlock>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d908      	bls.n	80062ba <_free_r+0x42>
 80062a8:	6820      	ldr	r0, [r4, #0]
 80062aa:	1821      	adds	r1, r4, r0
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf01      	itttt	eq
 80062b0:	6819      	ldreq	r1, [r3, #0]
 80062b2:	685b      	ldreq	r3, [r3, #4]
 80062b4:	1809      	addeq	r1, r1, r0
 80062b6:	6021      	streq	r1, [r4, #0]
 80062b8:	e7ed      	b.n	8006296 <_free_r+0x1e>
 80062ba:	461a      	mov	r2, r3
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	b10b      	cbz	r3, 80062c4 <_free_r+0x4c>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d9fa      	bls.n	80062ba <_free_r+0x42>
 80062c4:	6811      	ldr	r1, [r2, #0]
 80062c6:	1850      	adds	r0, r2, r1
 80062c8:	42a0      	cmp	r0, r4
 80062ca:	d10b      	bne.n	80062e4 <_free_r+0x6c>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	4401      	add	r1, r0
 80062d0:	1850      	adds	r0, r2, r1
 80062d2:	4283      	cmp	r3, r0
 80062d4:	6011      	str	r1, [r2, #0]
 80062d6:	d1e0      	bne.n	800629a <_free_r+0x22>
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4408      	add	r0, r1
 80062de:	6010      	str	r0, [r2, #0]
 80062e0:	6053      	str	r3, [r2, #4]
 80062e2:	e7da      	b.n	800629a <_free_r+0x22>
 80062e4:	d902      	bls.n	80062ec <_free_r+0x74>
 80062e6:	230c      	movs	r3, #12
 80062e8:	602b      	str	r3, [r5, #0]
 80062ea:	e7d6      	b.n	800629a <_free_r+0x22>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	1821      	adds	r1, r4, r0
 80062f0:	428b      	cmp	r3, r1
 80062f2:	bf01      	itttt	eq
 80062f4:	6819      	ldreq	r1, [r3, #0]
 80062f6:	685b      	ldreq	r3, [r3, #4]
 80062f8:	1809      	addeq	r1, r1, r0
 80062fa:	6021      	streq	r1, [r4, #0]
 80062fc:	6063      	str	r3, [r4, #4]
 80062fe:	6054      	str	r4, [r2, #4]
 8006300:	e7cb      	b.n	800629a <_free_r+0x22>
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	20000610 	.word	0x20000610

08006308 <sbrk_aligned>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4e0f      	ldr	r6, [pc, #60]	@ (8006348 <sbrk_aligned+0x40>)
 800630c:	460c      	mov	r4, r1
 800630e:	6831      	ldr	r1, [r6, #0]
 8006310:	4605      	mov	r5, r0
 8006312:	b911      	cbnz	r1, 800631a <sbrk_aligned+0x12>
 8006314:	f001 fe68 	bl	8007fe8 <_sbrk_r>
 8006318:	6030      	str	r0, [r6, #0]
 800631a:	4621      	mov	r1, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f001 fe63 	bl	8007fe8 <_sbrk_r>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d103      	bne.n	800632e <sbrk_aligned+0x26>
 8006326:	f04f 34ff 	mov.w	r4, #4294967295
 800632a:	4620      	mov	r0, r4
 800632c:	bd70      	pop	{r4, r5, r6, pc}
 800632e:	1cc4      	adds	r4, r0, #3
 8006330:	f024 0403 	bic.w	r4, r4, #3
 8006334:	42a0      	cmp	r0, r4
 8006336:	d0f8      	beq.n	800632a <sbrk_aligned+0x22>
 8006338:	1a21      	subs	r1, r4, r0
 800633a:	4628      	mov	r0, r5
 800633c:	f001 fe54 	bl	8007fe8 <_sbrk_r>
 8006340:	3001      	adds	r0, #1
 8006342:	d1f2      	bne.n	800632a <sbrk_aligned+0x22>
 8006344:	e7ef      	b.n	8006326 <sbrk_aligned+0x1e>
 8006346:	bf00      	nop
 8006348:	2000060c 	.word	0x2000060c

0800634c <_malloc_r>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	1ccd      	adds	r5, r1, #3
 8006352:	f025 0503 	bic.w	r5, r5, #3
 8006356:	3508      	adds	r5, #8
 8006358:	2d0c      	cmp	r5, #12
 800635a:	bf38      	it	cc
 800635c:	250c      	movcc	r5, #12
 800635e:	2d00      	cmp	r5, #0
 8006360:	4606      	mov	r6, r0
 8006362:	db01      	blt.n	8006368 <_malloc_r+0x1c>
 8006364:	42a9      	cmp	r1, r5
 8006366:	d904      	bls.n	8006372 <_malloc_r+0x26>
 8006368:	230c      	movs	r3, #12
 800636a:	6033      	str	r3, [r6, #0]
 800636c:	2000      	movs	r0, #0
 800636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006372:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006448 <_malloc_r+0xfc>
 8006376:	f000 f869 	bl	800644c <__malloc_lock>
 800637a:	f8d8 3000 	ldr.w	r3, [r8]
 800637e:	461c      	mov	r4, r3
 8006380:	bb44      	cbnz	r4, 80063d4 <_malloc_r+0x88>
 8006382:	4629      	mov	r1, r5
 8006384:	4630      	mov	r0, r6
 8006386:	f7ff ffbf 	bl	8006308 <sbrk_aligned>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	4604      	mov	r4, r0
 800638e:	d158      	bne.n	8006442 <_malloc_r+0xf6>
 8006390:	f8d8 4000 	ldr.w	r4, [r8]
 8006394:	4627      	mov	r7, r4
 8006396:	2f00      	cmp	r7, #0
 8006398:	d143      	bne.n	8006422 <_malloc_r+0xd6>
 800639a:	2c00      	cmp	r4, #0
 800639c:	d04b      	beq.n	8006436 <_malloc_r+0xea>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	4639      	mov	r1, r7
 80063a2:	4630      	mov	r0, r6
 80063a4:	eb04 0903 	add.w	r9, r4, r3
 80063a8:	f001 fe1e 	bl	8007fe8 <_sbrk_r>
 80063ac:	4581      	cmp	r9, r0
 80063ae:	d142      	bne.n	8006436 <_malloc_r+0xea>
 80063b0:	6821      	ldr	r1, [r4, #0]
 80063b2:	4630      	mov	r0, r6
 80063b4:	1a6d      	subs	r5, r5, r1
 80063b6:	4629      	mov	r1, r5
 80063b8:	f7ff ffa6 	bl	8006308 <sbrk_aligned>
 80063bc:	3001      	adds	r0, #1
 80063be:	d03a      	beq.n	8006436 <_malloc_r+0xea>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	442b      	add	r3, r5
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	bb62      	cbnz	r2, 8006428 <_malloc_r+0xdc>
 80063ce:	f8c8 7000 	str.w	r7, [r8]
 80063d2:	e00f      	b.n	80063f4 <_malloc_r+0xa8>
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	1b52      	subs	r2, r2, r5
 80063d8:	d420      	bmi.n	800641c <_malloc_r+0xd0>
 80063da:	2a0b      	cmp	r2, #11
 80063dc:	d917      	bls.n	800640e <_malloc_r+0xc2>
 80063de:	1961      	adds	r1, r4, r5
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	6025      	str	r5, [r4, #0]
 80063e4:	bf18      	it	ne
 80063e6:	6059      	strne	r1, [r3, #4]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	bf08      	it	eq
 80063ec:	f8c8 1000 	streq.w	r1, [r8]
 80063f0:	5162      	str	r2, [r4, r5]
 80063f2:	604b      	str	r3, [r1, #4]
 80063f4:	4630      	mov	r0, r6
 80063f6:	f000 f82f 	bl	8006458 <__malloc_unlock>
 80063fa:	f104 000b 	add.w	r0, r4, #11
 80063fe:	1d23      	adds	r3, r4, #4
 8006400:	f020 0007 	bic.w	r0, r0, #7
 8006404:	1ac2      	subs	r2, r0, r3
 8006406:	bf1c      	itt	ne
 8006408:	1a1b      	subne	r3, r3, r0
 800640a:	50a3      	strne	r3, [r4, r2]
 800640c:	e7af      	b.n	800636e <_malloc_r+0x22>
 800640e:	6862      	ldr	r2, [r4, #4]
 8006410:	42a3      	cmp	r3, r4
 8006412:	bf0c      	ite	eq
 8006414:	f8c8 2000 	streq.w	r2, [r8]
 8006418:	605a      	strne	r2, [r3, #4]
 800641a:	e7eb      	b.n	80063f4 <_malloc_r+0xa8>
 800641c:	4623      	mov	r3, r4
 800641e:	6864      	ldr	r4, [r4, #4]
 8006420:	e7ae      	b.n	8006380 <_malloc_r+0x34>
 8006422:	463c      	mov	r4, r7
 8006424:	687f      	ldr	r7, [r7, #4]
 8006426:	e7b6      	b.n	8006396 <_malloc_r+0x4a>
 8006428:	461a      	mov	r2, r3
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	42a3      	cmp	r3, r4
 800642e:	d1fb      	bne.n	8006428 <_malloc_r+0xdc>
 8006430:	2300      	movs	r3, #0
 8006432:	6053      	str	r3, [r2, #4]
 8006434:	e7de      	b.n	80063f4 <_malloc_r+0xa8>
 8006436:	230c      	movs	r3, #12
 8006438:	4630      	mov	r0, r6
 800643a:	6033      	str	r3, [r6, #0]
 800643c:	f000 f80c 	bl	8006458 <__malloc_unlock>
 8006440:	e794      	b.n	800636c <_malloc_r+0x20>
 8006442:	6005      	str	r5, [r0, #0]
 8006444:	e7d6      	b.n	80063f4 <_malloc_r+0xa8>
 8006446:	bf00      	nop
 8006448:	20000610 	.word	0x20000610

0800644c <__malloc_lock>:
 800644c:	4801      	ldr	r0, [pc, #4]	@ (8006454 <__malloc_lock+0x8>)
 800644e:	f7ff bf0c 	b.w	800626a <__retarget_lock_acquire_recursive>
 8006452:	bf00      	nop
 8006454:	20000608 	.word	0x20000608

08006458 <__malloc_unlock>:
 8006458:	4801      	ldr	r0, [pc, #4]	@ (8006460 <__malloc_unlock+0x8>)
 800645a:	f7ff bf07 	b.w	800626c <__retarget_lock_release_recursive>
 800645e:	bf00      	nop
 8006460:	20000608 	.word	0x20000608

08006464 <sulp>:
 8006464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006468:	460f      	mov	r7, r1
 800646a:	4690      	mov	r8, r2
 800646c:	f002 fcac 	bl	8008dc8 <__ulp>
 8006470:	4604      	mov	r4, r0
 8006472:	460d      	mov	r5, r1
 8006474:	f1b8 0f00 	cmp.w	r8, #0
 8006478:	d011      	beq.n	800649e <sulp+0x3a>
 800647a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800647e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006482:	2b00      	cmp	r3, #0
 8006484:	dd0b      	ble.n	800649e <sulp+0x3a>
 8006486:	2400      	movs	r4, #0
 8006488:	051b      	lsls	r3, r3, #20
 800648a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800648e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006492:	4622      	mov	r2, r4
 8006494:	462b      	mov	r3, r5
 8006496:	f7fa f81f 	bl	80004d8 <__aeabi_dmul>
 800649a:	4604      	mov	r4, r0
 800649c:	460d      	mov	r5, r1
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080064a8 <_strtod_l>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	b09f      	sub	sp, #124	@ 0x7c
 80064ae:	9217      	str	r2, [sp, #92]	@ 0x5c
 80064b0:	2200      	movs	r2, #0
 80064b2:	460c      	mov	r4, r1
 80064b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80064b6:	f04f 0a00 	mov.w	sl, #0
 80064ba:	f04f 0b00 	mov.w	fp, #0
 80064be:	460a      	mov	r2, r1
 80064c0:	9005      	str	r0, [sp, #20]
 80064c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80064c4:	7811      	ldrb	r1, [r2, #0]
 80064c6:	292b      	cmp	r1, #43	@ 0x2b
 80064c8:	d048      	beq.n	800655c <_strtod_l+0xb4>
 80064ca:	d836      	bhi.n	800653a <_strtod_l+0x92>
 80064cc:	290d      	cmp	r1, #13
 80064ce:	d830      	bhi.n	8006532 <_strtod_l+0x8a>
 80064d0:	2908      	cmp	r1, #8
 80064d2:	d830      	bhi.n	8006536 <_strtod_l+0x8e>
 80064d4:	2900      	cmp	r1, #0
 80064d6:	d039      	beq.n	800654c <_strtod_l+0xa4>
 80064d8:	2200      	movs	r2, #0
 80064da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80064dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80064de:	782a      	ldrb	r2, [r5, #0]
 80064e0:	2a30      	cmp	r2, #48	@ 0x30
 80064e2:	f040 80b1 	bne.w	8006648 <_strtod_l+0x1a0>
 80064e6:	786a      	ldrb	r2, [r5, #1]
 80064e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80064ec:	2a58      	cmp	r2, #88	@ 0x58
 80064ee:	d16c      	bne.n	80065ca <_strtod_l+0x122>
 80064f0:	9302      	str	r3, [sp, #8]
 80064f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064f4:	4a8e      	ldr	r2, [pc, #568]	@ (8006730 <_strtod_l+0x288>)
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	ab1a      	add	r3, sp, #104	@ 0x68
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	9805      	ldr	r0, [sp, #20]
 80064fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006500:	a919      	add	r1, sp, #100	@ 0x64
 8006502:	f001 fe0b 	bl	800811c <__gethex>
 8006506:	f010 060f 	ands.w	r6, r0, #15
 800650a:	4604      	mov	r4, r0
 800650c:	d005      	beq.n	800651a <_strtod_l+0x72>
 800650e:	2e06      	cmp	r6, #6
 8006510:	d126      	bne.n	8006560 <_strtod_l+0xb8>
 8006512:	2300      	movs	r3, #0
 8006514:	3501      	adds	r5, #1
 8006516:	9519      	str	r5, [sp, #100]	@ 0x64
 8006518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800651a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 8584 	bne.w	800702a <_strtod_l+0xb82>
 8006522:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006524:	b1bb      	cbz	r3, 8006556 <_strtod_l+0xae>
 8006526:	4650      	mov	r0, sl
 8006528:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800652c:	b01f      	add	sp, #124	@ 0x7c
 800652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006532:	2920      	cmp	r1, #32
 8006534:	d1d0      	bne.n	80064d8 <_strtod_l+0x30>
 8006536:	3201      	adds	r2, #1
 8006538:	e7c3      	b.n	80064c2 <_strtod_l+0x1a>
 800653a:	292d      	cmp	r1, #45	@ 0x2d
 800653c:	d1cc      	bne.n	80064d8 <_strtod_l+0x30>
 800653e:	2101      	movs	r1, #1
 8006540:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006542:	1c51      	adds	r1, r2, #1
 8006544:	9119      	str	r1, [sp, #100]	@ 0x64
 8006546:	7852      	ldrb	r2, [r2, #1]
 8006548:	2a00      	cmp	r2, #0
 800654a:	d1c7      	bne.n	80064dc <_strtod_l+0x34>
 800654c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800654e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006550:	2b00      	cmp	r3, #0
 8006552:	f040 8568 	bne.w	8007026 <_strtod_l+0xb7e>
 8006556:	4650      	mov	r0, sl
 8006558:	4659      	mov	r1, fp
 800655a:	e7e7      	b.n	800652c <_strtod_l+0x84>
 800655c:	2100      	movs	r1, #0
 800655e:	e7ef      	b.n	8006540 <_strtod_l+0x98>
 8006560:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006562:	b13a      	cbz	r2, 8006574 <_strtod_l+0xcc>
 8006564:	2135      	movs	r1, #53	@ 0x35
 8006566:	a81c      	add	r0, sp, #112	@ 0x70
 8006568:	f002 fd1e 	bl	8008fa8 <__copybits>
 800656c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800656e:	9805      	ldr	r0, [sp, #20]
 8006570:	f002 f8f8 	bl	8008764 <_Bfree>
 8006574:	3e01      	subs	r6, #1
 8006576:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006578:	2e04      	cmp	r6, #4
 800657a:	d806      	bhi.n	800658a <_strtod_l+0xe2>
 800657c:	e8df f006 	tbb	[pc, r6]
 8006580:	201d0314 	.word	0x201d0314
 8006584:	14          	.byte	0x14
 8006585:	00          	.byte	0x00
 8006586:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800658a:	05e1      	lsls	r1, r4, #23
 800658c:	bf48      	it	mi
 800658e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006592:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006596:	0d1b      	lsrs	r3, r3, #20
 8006598:	051b      	lsls	r3, r3, #20
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1bd      	bne.n	800651a <_strtod_l+0x72>
 800659e:	f7ff fe39 	bl	8006214 <__errno>
 80065a2:	2322      	movs	r3, #34	@ 0x22
 80065a4:	6003      	str	r3, [r0, #0]
 80065a6:	e7b8      	b.n	800651a <_strtod_l+0x72>
 80065a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80065ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80065b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80065b4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80065b8:	e7e7      	b.n	800658a <_strtod_l+0xe2>
 80065ba:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006734 <_strtod_l+0x28c>
 80065be:	e7e4      	b.n	800658a <_strtod_l+0xe2>
 80065c0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80065c4:	f04f 3aff 	mov.w	sl, #4294967295
 80065c8:	e7df      	b.n	800658a <_strtod_l+0xe2>
 80065ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b30      	cmp	r3, #48	@ 0x30
 80065d4:	d0f9      	beq.n	80065ca <_strtod_l+0x122>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d09f      	beq.n	800651a <_strtod_l+0x72>
 80065da:	2301      	movs	r3, #1
 80065dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80065de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065e0:	220a      	movs	r2, #10
 80065e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80065e4:	2300      	movs	r3, #0
 80065e6:	461f      	mov	r7, r3
 80065e8:	9308      	str	r3, [sp, #32]
 80065ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80065ee:	7805      	ldrb	r5, [r0, #0]
 80065f0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80065f4:	b2d9      	uxtb	r1, r3
 80065f6:	2909      	cmp	r1, #9
 80065f8:	d928      	bls.n	800664c <_strtod_l+0x1a4>
 80065fa:	2201      	movs	r2, #1
 80065fc:	494e      	ldr	r1, [pc, #312]	@ (8006738 <_strtod_l+0x290>)
 80065fe:	f001 fce0 	bl	8007fc2 <strncmp>
 8006602:	2800      	cmp	r0, #0
 8006604:	d032      	beq.n	800666c <_strtod_l+0x1c4>
 8006606:	2000      	movs	r0, #0
 8006608:	462a      	mov	r2, r5
 800660a:	4681      	mov	r9, r0
 800660c:	463d      	mov	r5, r7
 800660e:	4603      	mov	r3, r0
 8006610:	2a65      	cmp	r2, #101	@ 0x65
 8006612:	d001      	beq.n	8006618 <_strtod_l+0x170>
 8006614:	2a45      	cmp	r2, #69	@ 0x45
 8006616:	d114      	bne.n	8006642 <_strtod_l+0x19a>
 8006618:	b91d      	cbnz	r5, 8006622 <_strtod_l+0x17a>
 800661a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800661c:	4302      	orrs	r2, r0
 800661e:	d095      	beq.n	800654c <_strtod_l+0xa4>
 8006620:	2500      	movs	r5, #0
 8006622:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006624:	1c62      	adds	r2, r4, #1
 8006626:	9219      	str	r2, [sp, #100]	@ 0x64
 8006628:	7862      	ldrb	r2, [r4, #1]
 800662a:	2a2b      	cmp	r2, #43	@ 0x2b
 800662c:	d077      	beq.n	800671e <_strtod_l+0x276>
 800662e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006630:	d07b      	beq.n	800672a <_strtod_l+0x282>
 8006632:	f04f 0c00 	mov.w	ip, #0
 8006636:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800663a:	2909      	cmp	r1, #9
 800663c:	f240 8082 	bls.w	8006744 <_strtod_l+0x29c>
 8006640:	9419      	str	r4, [sp, #100]	@ 0x64
 8006642:	f04f 0800 	mov.w	r8, #0
 8006646:	e0a2      	b.n	800678e <_strtod_l+0x2e6>
 8006648:	2300      	movs	r3, #0
 800664a:	e7c7      	b.n	80065dc <_strtod_l+0x134>
 800664c:	2f08      	cmp	r7, #8
 800664e:	bfd5      	itete	le
 8006650:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006652:	9908      	ldrgt	r1, [sp, #32]
 8006654:	fb02 3301 	mlale	r3, r2, r1, r3
 8006658:	fb02 3301 	mlagt	r3, r2, r1, r3
 800665c:	f100 0001 	add.w	r0, r0, #1
 8006660:	bfd4      	ite	le
 8006662:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006664:	9308      	strgt	r3, [sp, #32]
 8006666:	3701      	adds	r7, #1
 8006668:	9019      	str	r0, [sp, #100]	@ 0x64
 800666a:	e7bf      	b.n	80065ec <_strtod_l+0x144>
 800666c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	9219      	str	r2, [sp, #100]	@ 0x64
 8006672:	785a      	ldrb	r2, [r3, #1]
 8006674:	b37f      	cbz	r7, 80066d6 <_strtod_l+0x22e>
 8006676:	4681      	mov	r9, r0
 8006678:	463d      	mov	r5, r7
 800667a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800667e:	2b09      	cmp	r3, #9
 8006680:	d912      	bls.n	80066a8 <_strtod_l+0x200>
 8006682:	2301      	movs	r3, #1
 8006684:	e7c4      	b.n	8006610 <_strtod_l+0x168>
 8006686:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006688:	3001      	adds	r0, #1
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	9219      	str	r2, [sp, #100]	@ 0x64
 800668e:	785a      	ldrb	r2, [r3, #1]
 8006690:	2a30      	cmp	r2, #48	@ 0x30
 8006692:	d0f8      	beq.n	8006686 <_strtod_l+0x1de>
 8006694:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006698:	2b08      	cmp	r3, #8
 800669a:	f200 84cb 	bhi.w	8007034 <_strtod_l+0xb8c>
 800669e:	4681      	mov	r9, r0
 80066a0:	2000      	movs	r0, #0
 80066a2:	4605      	mov	r5, r0
 80066a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80066a8:	3a30      	subs	r2, #48	@ 0x30
 80066aa:	f100 0301 	add.w	r3, r0, #1
 80066ae:	d02a      	beq.n	8006706 <_strtod_l+0x25e>
 80066b0:	4499      	add	r9, r3
 80066b2:	210a      	movs	r1, #10
 80066b4:	462b      	mov	r3, r5
 80066b6:	eb00 0c05 	add.w	ip, r0, r5
 80066ba:	4563      	cmp	r3, ip
 80066bc:	d10d      	bne.n	80066da <_strtod_l+0x232>
 80066be:	1c69      	adds	r1, r5, #1
 80066c0:	4401      	add	r1, r0
 80066c2:	4428      	add	r0, r5
 80066c4:	2808      	cmp	r0, #8
 80066c6:	dc16      	bgt.n	80066f6 <_strtod_l+0x24e>
 80066c8:	230a      	movs	r3, #10
 80066ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80066cc:	fb03 2300 	mla	r3, r3, r0, r2
 80066d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066d2:	2300      	movs	r3, #0
 80066d4:	e018      	b.n	8006708 <_strtod_l+0x260>
 80066d6:	4638      	mov	r0, r7
 80066d8:	e7da      	b.n	8006690 <_strtod_l+0x1e8>
 80066da:	2b08      	cmp	r3, #8
 80066dc:	f103 0301 	add.w	r3, r3, #1
 80066e0:	dc03      	bgt.n	80066ea <_strtod_l+0x242>
 80066e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80066e4:	434e      	muls	r6, r1
 80066e6:	960a      	str	r6, [sp, #40]	@ 0x28
 80066e8:	e7e7      	b.n	80066ba <_strtod_l+0x212>
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	bfde      	ittt	le
 80066ee:	9e08      	ldrle	r6, [sp, #32]
 80066f0:	434e      	mulle	r6, r1
 80066f2:	9608      	strle	r6, [sp, #32]
 80066f4:	e7e1      	b.n	80066ba <_strtod_l+0x212>
 80066f6:	280f      	cmp	r0, #15
 80066f8:	dceb      	bgt.n	80066d2 <_strtod_l+0x22a>
 80066fa:	230a      	movs	r3, #10
 80066fc:	9808      	ldr	r0, [sp, #32]
 80066fe:	fb03 2300 	mla	r3, r3, r0, r2
 8006702:	9308      	str	r3, [sp, #32]
 8006704:	e7e5      	b.n	80066d2 <_strtod_l+0x22a>
 8006706:	4629      	mov	r1, r5
 8006708:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800670a:	460d      	mov	r5, r1
 800670c:	1c50      	adds	r0, r2, #1
 800670e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006710:	7852      	ldrb	r2, [r2, #1]
 8006712:	4618      	mov	r0, r3
 8006714:	e7b1      	b.n	800667a <_strtod_l+0x1d2>
 8006716:	f04f 0900 	mov.w	r9, #0
 800671a:	2301      	movs	r3, #1
 800671c:	e77d      	b.n	800661a <_strtod_l+0x172>
 800671e:	f04f 0c00 	mov.w	ip, #0
 8006722:	1ca2      	adds	r2, r4, #2
 8006724:	9219      	str	r2, [sp, #100]	@ 0x64
 8006726:	78a2      	ldrb	r2, [r4, #2]
 8006728:	e785      	b.n	8006636 <_strtod_l+0x18e>
 800672a:	f04f 0c01 	mov.w	ip, #1
 800672e:	e7f8      	b.n	8006722 <_strtod_l+0x27a>
 8006730:	08009840 	.word	0x08009840
 8006734:	7ff00000 	.word	0x7ff00000
 8006738:	0800981b 	.word	0x0800981b
 800673c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800673e:	1c51      	adds	r1, r2, #1
 8006740:	9119      	str	r1, [sp, #100]	@ 0x64
 8006742:	7852      	ldrb	r2, [r2, #1]
 8006744:	2a30      	cmp	r2, #48	@ 0x30
 8006746:	d0f9      	beq.n	800673c <_strtod_l+0x294>
 8006748:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800674c:	2908      	cmp	r1, #8
 800674e:	f63f af78 	bhi.w	8006642 <_strtod_l+0x19a>
 8006752:	f04f 080a 	mov.w	r8, #10
 8006756:	3a30      	subs	r2, #48	@ 0x30
 8006758:	920e      	str	r2, [sp, #56]	@ 0x38
 800675a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800675c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800675e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006760:	1c56      	adds	r6, r2, #1
 8006762:	9619      	str	r6, [sp, #100]	@ 0x64
 8006764:	7852      	ldrb	r2, [r2, #1]
 8006766:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800676a:	f1be 0f09 	cmp.w	lr, #9
 800676e:	d939      	bls.n	80067e4 <_strtod_l+0x33c>
 8006770:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006772:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006776:	1a76      	subs	r6, r6, r1
 8006778:	2e08      	cmp	r6, #8
 800677a:	dc03      	bgt.n	8006784 <_strtod_l+0x2dc>
 800677c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800677e:	4588      	cmp	r8, r1
 8006780:	bfa8      	it	ge
 8006782:	4688      	movge	r8, r1
 8006784:	f1bc 0f00 	cmp.w	ip, #0
 8006788:	d001      	beq.n	800678e <_strtod_l+0x2e6>
 800678a:	f1c8 0800 	rsb	r8, r8, #0
 800678e:	2d00      	cmp	r5, #0
 8006790:	d14e      	bne.n	8006830 <_strtod_l+0x388>
 8006792:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006794:	4308      	orrs	r0, r1
 8006796:	f47f aec0 	bne.w	800651a <_strtod_l+0x72>
 800679a:	2b00      	cmp	r3, #0
 800679c:	f47f aed6 	bne.w	800654c <_strtod_l+0xa4>
 80067a0:	2a69      	cmp	r2, #105	@ 0x69
 80067a2:	d028      	beq.n	80067f6 <_strtod_l+0x34e>
 80067a4:	dc25      	bgt.n	80067f2 <_strtod_l+0x34a>
 80067a6:	2a49      	cmp	r2, #73	@ 0x49
 80067a8:	d025      	beq.n	80067f6 <_strtod_l+0x34e>
 80067aa:	2a4e      	cmp	r2, #78	@ 0x4e
 80067ac:	f47f aece 	bne.w	800654c <_strtod_l+0xa4>
 80067b0:	499a      	ldr	r1, [pc, #616]	@ (8006a1c <_strtod_l+0x574>)
 80067b2:	a819      	add	r0, sp, #100	@ 0x64
 80067b4:	f001 fed4 	bl	8008560 <__match>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f43f aec7 	beq.w	800654c <_strtod_l+0xa4>
 80067be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b28      	cmp	r3, #40	@ 0x28
 80067c4:	d12e      	bne.n	8006824 <_strtod_l+0x37c>
 80067c6:	4996      	ldr	r1, [pc, #600]	@ (8006a20 <_strtod_l+0x578>)
 80067c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80067ca:	a819      	add	r0, sp, #100	@ 0x64
 80067cc:	f001 fedc 	bl	8008588 <__hexnan>
 80067d0:	2805      	cmp	r0, #5
 80067d2:	d127      	bne.n	8006824 <_strtod_l+0x37c>
 80067d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80067d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80067da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80067de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80067e2:	e69a      	b.n	800651a <_strtod_l+0x72>
 80067e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80067e6:	fb08 2101 	mla	r1, r8, r1, r2
 80067ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80067ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80067f0:	e7b5      	b.n	800675e <_strtod_l+0x2b6>
 80067f2:	2a6e      	cmp	r2, #110	@ 0x6e
 80067f4:	e7da      	b.n	80067ac <_strtod_l+0x304>
 80067f6:	498b      	ldr	r1, [pc, #556]	@ (8006a24 <_strtod_l+0x57c>)
 80067f8:	a819      	add	r0, sp, #100	@ 0x64
 80067fa:	f001 feb1 	bl	8008560 <__match>
 80067fe:	2800      	cmp	r0, #0
 8006800:	f43f aea4 	beq.w	800654c <_strtod_l+0xa4>
 8006804:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006806:	4988      	ldr	r1, [pc, #544]	@ (8006a28 <_strtod_l+0x580>)
 8006808:	3b01      	subs	r3, #1
 800680a:	a819      	add	r0, sp, #100	@ 0x64
 800680c:	9319      	str	r3, [sp, #100]	@ 0x64
 800680e:	f001 fea7 	bl	8008560 <__match>
 8006812:	b910      	cbnz	r0, 800681a <_strtod_l+0x372>
 8006814:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006816:	3301      	adds	r3, #1
 8006818:	9319      	str	r3, [sp, #100]	@ 0x64
 800681a:	f04f 0a00 	mov.w	sl, #0
 800681e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006a2c <_strtod_l+0x584>
 8006822:	e67a      	b.n	800651a <_strtod_l+0x72>
 8006824:	4882      	ldr	r0, [pc, #520]	@ (8006a30 <_strtod_l+0x588>)
 8006826:	f001 fc0b 	bl	8008040 <nan>
 800682a:	4682      	mov	sl, r0
 800682c:	468b      	mov	fp, r1
 800682e:	e674      	b.n	800651a <_strtod_l+0x72>
 8006830:	eba8 0309 	sub.w	r3, r8, r9
 8006834:	2f00      	cmp	r7, #0
 8006836:	bf08      	it	eq
 8006838:	462f      	moveq	r7, r5
 800683a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800683c:	2d10      	cmp	r5, #16
 800683e:	462c      	mov	r4, r5
 8006840:	9309      	str	r3, [sp, #36]	@ 0x24
 8006842:	bfa8      	it	ge
 8006844:	2410      	movge	r4, #16
 8006846:	f7f9 fdcd 	bl	80003e4 <__aeabi_ui2d>
 800684a:	2d09      	cmp	r5, #9
 800684c:	4682      	mov	sl, r0
 800684e:	468b      	mov	fp, r1
 8006850:	dc11      	bgt.n	8006876 <_strtod_l+0x3ce>
 8006852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	f43f ae60 	beq.w	800651a <_strtod_l+0x72>
 800685a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685c:	dd76      	ble.n	800694c <_strtod_l+0x4a4>
 800685e:	2b16      	cmp	r3, #22
 8006860:	dc5d      	bgt.n	800691e <_strtod_l+0x476>
 8006862:	4974      	ldr	r1, [pc, #464]	@ (8006a34 <_strtod_l+0x58c>)
 8006864:	4652      	mov	r2, sl
 8006866:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800686a:	465b      	mov	r3, fp
 800686c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006870:	f7f9 fe32 	bl	80004d8 <__aeabi_dmul>
 8006874:	e7d9      	b.n	800682a <_strtod_l+0x382>
 8006876:	4b6f      	ldr	r3, [pc, #444]	@ (8006a34 <_strtod_l+0x58c>)
 8006878:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800687c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006880:	f7f9 fe2a 	bl	80004d8 <__aeabi_dmul>
 8006884:	4682      	mov	sl, r0
 8006886:	9808      	ldr	r0, [sp, #32]
 8006888:	468b      	mov	fp, r1
 800688a:	f7f9 fdab 	bl	80003e4 <__aeabi_ui2d>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4650      	mov	r0, sl
 8006894:	4659      	mov	r1, fp
 8006896:	f7f9 fc69 	bl	800016c <__adddf3>
 800689a:	2d0f      	cmp	r5, #15
 800689c:	4682      	mov	sl, r0
 800689e:	468b      	mov	fp, r1
 80068a0:	ddd7      	ble.n	8006852 <_strtod_l+0x3aa>
 80068a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a4:	1b2c      	subs	r4, r5, r4
 80068a6:	441c      	add	r4, r3
 80068a8:	2c00      	cmp	r4, #0
 80068aa:	f340 8096 	ble.w	80069da <_strtod_l+0x532>
 80068ae:	f014 030f 	ands.w	r3, r4, #15
 80068b2:	d00a      	beq.n	80068ca <_strtod_l+0x422>
 80068b4:	495f      	ldr	r1, [pc, #380]	@ (8006a34 <_strtod_l+0x58c>)
 80068b6:	4652      	mov	r2, sl
 80068b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c0:	465b      	mov	r3, fp
 80068c2:	f7f9 fe09 	bl	80004d8 <__aeabi_dmul>
 80068c6:	4682      	mov	sl, r0
 80068c8:	468b      	mov	fp, r1
 80068ca:	f034 040f 	bics.w	r4, r4, #15
 80068ce:	d073      	beq.n	80069b8 <_strtod_l+0x510>
 80068d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80068d4:	dd48      	ble.n	8006968 <_strtod_l+0x4c0>
 80068d6:	2400      	movs	r4, #0
 80068d8:	46a0      	mov	r8, r4
 80068da:	46a1      	mov	r9, r4
 80068dc:	940a      	str	r4, [sp, #40]	@ 0x28
 80068de:	2322      	movs	r3, #34	@ 0x22
 80068e0:	f04f 0a00 	mov.w	sl, #0
 80068e4:	9a05      	ldr	r2, [sp, #20]
 80068e6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006a2c <_strtod_l+0x584>
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f43f ae13 	beq.w	800651a <_strtod_l+0x72>
 80068f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068f6:	9805      	ldr	r0, [sp, #20]
 80068f8:	f001 ff34 	bl	8008764 <_Bfree>
 80068fc:	4649      	mov	r1, r9
 80068fe:	9805      	ldr	r0, [sp, #20]
 8006900:	f001 ff30 	bl	8008764 <_Bfree>
 8006904:	4641      	mov	r1, r8
 8006906:	9805      	ldr	r0, [sp, #20]
 8006908:	f001 ff2c 	bl	8008764 <_Bfree>
 800690c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800690e:	9805      	ldr	r0, [sp, #20]
 8006910:	f001 ff28 	bl	8008764 <_Bfree>
 8006914:	4621      	mov	r1, r4
 8006916:	9805      	ldr	r0, [sp, #20]
 8006918:	f001 ff24 	bl	8008764 <_Bfree>
 800691c:	e5fd      	b.n	800651a <_strtod_l+0x72>
 800691e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006920:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006924:	4293      	cmp	r3, r2
 8006926:	dbbc      	blt.n	80068a2 <_strtod_l+0x3fa>
 8006928:	4c42      	ldr	r4, [pc, #264]	@ (8006a34 <_strtod_l+0x58c>)
 800692a:	f1c5 050f 	rsb	r5, r5, #15
 800692e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006932:	4652      	mov	r2, sl
 8006934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006938:	465b      	mov	r3, fp
 800693a:	f7f9 fdcd 	bl	80004d8 <__aeabi_dmul>
 800693e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006940:	1b5d      	subs	r5, r3, r5
 8006942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006946:	e9d4 2300 	ldrd	r2, r3, [r4]
 800694a:	e791      	b.n	8006870 <_strtod_l+0x3c8>
 800694c:	3316      	adds	r3, #22
 800694e:	dba8      	blt.n	80068a2 <_strtod_l+0x3fa>
 8006950:	4b38      	ldr	r3, [pc, #224]	@ (8006a34 <_strtod_l+0x58c>)
 8006952:	eba9 0808 	sub.w	r8, r9, r8
 8006956:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800695a:	4650      	mov	r0, sl
 800695c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006960:	4659      	mov	r1, fp
 8006962:	f7f9 fee3 	bl	800072c <__aeabi_ddiv>
 8006966:	e760      	b.n	800682a <_strtod_l+0x382>
 8006968:	4b33      	ldr	r3, [pc, #204]	@ (8006a38 <_strtod_l+0x590>)
 800696a:	4650      	mov	r0, sl
 800696c:	9308      	str	r3, [sp, #32]
 800696e:	2300      	movs	r3, #0
 8006970:	4659      	mov	r1, fp
 8006972:	461e      	mov	r6, r3
 8006974:	1124      	asrs	r4, r4, #4
 8006976:	2c01      	cmp	r4, #1
 8006978:	dc21      	bgt.n	80069be <_strtod_l+0x516>
 800697a:	b10b      	cbz	r3, 8006980 <_strtod_l+0x4d8>
 800697c:	4682      	mov	sl, r0
 800697e:	468b      	mov	fp, r1
 8006980:	492d      	ldr	r1, [pc, #180]	@ (8006a38 <_strtod_l+0x590>)
 8006982:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006986:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800698a:	4652      	mov	r2, sl
 800698c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006990:	465b      	mov	r3, fp
 8006992:	f7f9 fda1 	bl	80004d8 <__aeabi_dmul>
 8006996:	4b25      	ldr	r3, [pc, #148]	@ (8006a2c <_strtod_l+0x584>)
 8006998:	460a      	mov	r2, r1
 800699a:	400b      	ands	r3, r1
 800699c:	4927      	ldr	r1, [pc, #156]	@ (8006a3c <_strtod_l+0x594>)
 800699e:	4682      	mov	sl, r0
 80069a0:	428b      	cmp	r3, r1
 80069a2:	d898      	bhi.n	80068d6 <_strtod_l+0x42e>
 80069a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80069a8:	428b      	cmp	r3, r1
 80069aa:	bf86      	itte	hi
 80069ac:	f04f 3aff 	movhi.w	sl, #4294967295
 80069b0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006a40 <_strtod_l+0x598>
 80069b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80069b8:	2300      	movs	r3, #0
 80069ba:	9308      	str	r3, [sp, #32]
 80069bc:	e07a      	b.n	8006ab4 <_strtod_l+0x60c>
 80069be:	07e2      	lsls	r2, r4, #31
 80069c0:	d505      	bpl.n	80069ce <_strtod_l+0x526>
 80069c2:	9b08      	ldr	r3, [sp, #32]
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f7f9 fd86 	bl	80004d8 <__aeabi_dmul>
 80069cc:	2301      	movs	r3, #1
 80069ce:	9a08      	ldr	r2, [sp, #32]
 80069d0:	3601      	adds	r6, #1
 80069d2:	3208      	adds	r2, #8
 80069d4:	1064      	asrs	r4, r4, #1
 80069d6:	9208      	str	r2, [sp, #32]
 80069d8:	e7cd      	b.n	8006976 <_strtod_l+0x4ce>
 80069da:	d0ed      	beq.n	80069b8 <_strtod_l+0x510>
 80069dc:	4264      	negs	r4, r4
 80069de:	f014 020f 	ands.w	r2, r4, #15
 80069e2:	d00a      	beq.n	80069fa <_strtod_l+0x552>
 80069e4:	4b13      	ldr	r3, [pc, #76]	@ (8006a34 <_strtod_l+0x58c>)
 80069e6:	4650      	mov	r0, sl
 80069e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069ec:	4659      	mov	r1, fp
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f7f9 fe9b 	bl	800072c <__aeabi_ddiv>
 80069f6:	4682      	mov	sl, r0
 80069f8:	468b      	mov	fp, r1
 80069fa:	1124      	asrs	r4, r4, #4
 80069fc:	d0dc      	beq.n	80069b8 <_strtod_l+0x510>
 80069fe:	2c1f      	cmp	r4, #31
 8006a00:	dd20      	ble.n	8006a44 <_strtod_l+0x59c>
 8006a02:	2400      	movs	r4, #0
 8006a04:	46a0      	mov	r8, r4
 8006a06:	46a1      	mov	r9, r4
 8006a08:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a0a:	2322      	movs	r3, #34	@ 0x22
 8006a0c:	9a05      	ldr	r2, [sp, #20]
 8006a0e:	f04f 0a00 	mov.w	sl, #0
 8006a12:	f04f 0b00 	mov.w	fp, #0
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	e768      	b.n	80068ec <_strtod_l+0x444>
 8006a1a:	bf00      	nop
 8006a1c:	08009826 	.word	0x08009826
 8006a20:	0800982c 	.word	0x0800982c
 8006a24:	0800981d 	.word	0x0800981d
 8006a28:	08009820 	.word	0x08009820
 8006a2c:	7ff00000 	.word	0x7ff00000
 8006a30:	08009bf3 	.word	0x08009bf3
 8006a34:	08009af0 	.word	0x08009af0
 8006a38:	08009ac8 	.word	0x08009ac8
 8006a3c:	7ca00000 	.word	0x7ca00000
 8006a40:	7fefffff 	.word	0x7fefffff
 8006a44:	f014 0310 	ands.w	r3, r4, #16
 8006a48:	bf18      	it	ne
 8006a4a:	236a      	movne	r3, #106	@ 0x6a
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	9308      	str	r3, [sp, #32]
 8006a50:	4659      	mov	r1, fp
 8006a52:	2300      	movs	r3, #0
 8006a54:	4ea9      	ldr	r6, [pc, #676]	@ (8006cfc <_strtod_l+0x854>)
 8006a56:	07e2      	lsls	r2, r4, #31
 8006a58:	d504      	bpl.n	8006a64 <_strtod_l+0x5bc>
 8006a5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a5e:	f7f9 fd3b 	bl	80004d8 <__aeabi_dmul>
 8006a62:	2301      	movs	r3, #1
 8006a64:	1064      	asrs	r4, r4, #1
 8006a66:	f106 0608 	add.w	r6, r6, #8
 8006a6a:	d1f4      	bne.n	8006a56 <_strtod_l+0x5ae>
 8006a6c:	b10b      	cbz	r3, 8006a72 <_strtod_l+0x5ca>
 8006a6e:	4682      	mov	sl, r0
 8006a70:	468b      	mov	fp, r1
 8006a72:	9b08      	ldr	r3, [sp, #32]
 8006a74:	b1b3      	cbz	r3, 8006aa4 <_strtod_l+0x5fc>
 8006a76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	4659      	mov	r1, fp
 8006a82:	dd0f      	ble.n	8006aa4 <_strtod_l+0x5fc>
 8006a84:	2b1f      	cmp	r3, #31
 8006a86:	dd57      	ble.n	8006b38 <_strtod_l+0x690>
 8006a88:	2b34      	cmp	r3, #52	@ 0x34
 8006a8a:	bfd8      	it	le
 8006a8c:	f04f 33ff 	movle.w	r3, #4294967295
 8006a90:	f04f 0a00 	mov.w	sl, #0
 8006a94:	bfcf      	iteee	gt
 8006a96:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006a9a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006a9e:	4093      	lslle	r3, r2
 8006aa0:	ea03 0b01 	andle.w	fp, r3, r1
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	4659      	mov	r1, fp
 8006aac:	f7f9 ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d1a6      	bne.n	8006a02 <_strtod_l+0x55a>
 8006ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ab6:	463a      	mov	r2, r7
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006abc:	462b      	mov	r3, r5
 8006abe:	9805      	ldr	r0, [sp, #20]
 8006ac0:	f001 feb8 	bl	8008834 <__s2b>
 8006ac4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f af05 	beq.w	80068d6 <_strtod_l+0x42e>
 8006acc:	2400      	movs	r4, #0
 8006ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ad0:	eba9 0308 	sub.w	r3, r9, r8
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	bfa8      	it	ge
 8006ad8:	2300      	movge	r3, #0
 8006ada:	46a0      	mov	r8, r4
 8006adc:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ade:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ae2:	9316      	str	r3, [sp, #88]	@ 0x58
 8006ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ae6:	9805      	ldr	r0, [sp, #20]
 8006ae8:	6859      	ldr	r1, [r3, #4]
 8006aea:	f001 fdfb 	bl	80086e4 <_Balloc>
 8006aee:	4681      	mov	r9, r0
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f43f aef4 	beq.w	80068de <_strtod_l+0x436>
 8006af6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006af8:	300c      	adds	r0, #12
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	f103 010c 	add.w	r1, r3, #12
 8006b00:	3202      	adds	r2, #2
 8006b02:	0092      	lsls	r2, r2, #2
 8006b04:	f001 fa8e 	bl	8008024 <memcpy>
 8006b08:	ab1c      	add	r3, sp, #112	@ 0x70
 8006b0a:	9301      	str	r3, [sp, #4]
 8006b0c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	4652      	mov	r2, sl
 8006b12:	465b      	mov	r3, fp
 8006b14:	9805      	ldr	r0, [sp, #20]
 8006b16:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006b1a:	f002 f9bd 	bl	8008e98 <__d2b>
 8006b1e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006b20:	2800      	cmp	r0, #0
 8006b22:	f43f aedc 	beq.w	80068de <_strtod_l+0x436>
 8006b26:	2101      	movs	r1, #1
 8006b28:	9805      	ldr	r0, [sp, #20]
 8006b2a:	f001 ff19 	bl	8008960 <__i2b>
 8006b2e:	4680      	mov	r8, r0
 8006b30:	b948      	cbnz	r0, 8006b46 <_strtod_l+0x69e>
 8006b32:	f04f 0800 	mov.w	r8, #0
 8006b36:	e6d2      	b.n	80068de <_strtod_l+0x436>
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b40:	ea03 0a0a 	and.w	sl, r3, sl
 8006b44:	e7ae      	b.n	8006aa4 <_strtod_l+0x5fc>
 8006b46:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006b48:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006b4a:	2d00      	cmp	r5, #0
 8006b4c:	bfab      	itete	ge
 8006b4e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006b50:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006b52:	18ef      	addge	r7, r5, r3
 8006b54:	1b5e      	sublt	r6, r3, r5
 8006b56:	9b08      	ldr	r3, [sp, #32]
 8006b58:	bfa8      	it	ge
 8006b5a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006b5c:	eba5 0503 	sub.w	r5, r5, r3
 8006b60:	4415      	add	r5, r2
 8006b62:	4b67      	ldr	r3, [pc, #412]	@ (8006d00 <_strtod_l+0x858>)
 8006b64:	f105 35ff 	add.w	r5, r5, #4294967295
 8006b68:	bfb8      	it	lt
 8006b6a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006b6c:	429d      	cmp	r5, r3
 8006b6e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006b72:	da50      	bge.n	8006c16 <_strtod_l+0x76e>
 8006b74:	1b5b      	subs	r3, r3, r5
 8006b76:	2b1f      	cmp	r3, #31
 8006b78:	f04f 0101 	mov.w	r1, #1
 8006b7c:	eba2 0203 	sub.w	r2, r2, r3
 8006b80:	dc3d      	bgt.n	8006bfe <_strtod_l+0x756>
 8006b82:	fa01 f303 	lsl.w	r3, r1, r3
 8006b86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b88:	2300      	movs	r3, #0
 8006b8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b8c:	18bd      	adds	r5, r7, r2
 8006b8e:	9b08      	ldr	r3, [sp, #32]
 8006b90:	42af      	cmp	r7, r5
 8006b92:	4416      	add	r6, r2
 8006b94:	441e      	add	r6, r3
 8006b96:	463b      	mov	r3, r7
 8006b98:	bfa8      	it	ge
 8006b9a:	462b      	movge	r3, r5
 8006b9c:	42b3      	cmp	r3, r6
 8006b9e:	bfa8      	it	ge
 8006ba0:	4633      	movge	r3, r6
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfc2      	ittt	gt
 8006ba6:	1aed      	subgt	r5, r5, r3
 8006ba8:	1af6      	subgt	r6, r6, r3
 8006baa:	1aff      	subgt	r7, r7, r3
 8006bac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dd16      	ble.n	8006be0 <_strtod_l+0x738>
 8006bb2:	4641      	mov	r1, r8
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	9805      	ldr	r0, [sp, #20]
 8006bb8:	f001 ff90 	bl	8008adc <__pow5mult>
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d0b7      	beq.n	8006b32 <_strtod_l+0x68a>
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006bc6:	9805      	ldr	r0, [sp, #20]
 8006bc8:	f001 fee0 	bl	800898c <__multiply>
 8006bcc:	900e      	str	r0, [sp, #56]	@ 0x38
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f43f ae85 	beq.w	80068de <_strtod_l+0x436>
 8006bd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bd6:	9805      	ldr	r0, [sp, #20]
 8006bd8:	f001 fdc4 	bl	8008764 <_Bfree>
 8006bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bde:	931a      	str	r3, [sp, #104]	@ 0x68
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	dc1d      	bgt.n	8006c20 <_strtod_l+0x778>
 8006be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dd23      	ble.n	8006c32 <_strtod_l+0x78a>
 8006bea:	4649      	mov	r1, r9
 8006bec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006bee:	9805      	ldr	r0, [sp, #20]
 8006bf0:	f001 ff74 	bl	8008adc <__pow5mult>
 8006bf4:	4681      	mov	r9, r0
 8006bf6:	b9e0      	cbnz	r0, 8006c32 <_strtod_l+0x78a>
 8006bf8:	f04f 0900 	mov.w	r9, #0
 8006bfc:	e66f      	b.n	80068de <_strtod_l+0x436>
 8006bfe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006c02:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006c06:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006c0a:	35e2      	adds	r5, #226	@ 0xe2
 8006c0c:	fa01 f305 	lsl.w	r3, r1, r5
 8006c10:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c12:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006c14:	e7ba      	b.n	8006b8c <_strtod_l+0x6e4>
 8006c16:	2300      	movs	r3, #0
 8006c18:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c1e:	e7b5      	b.n	8006b8c <_strtod_l+0x6e4>
 8006c20:	462a      	mov	r2, r5
 8006c22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c24:	9805      	ldr	r0, [sp, #20]
 8006c26:	f001 ffb3 	bl	8008b90 <__lshift>
 8006c2a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d1d9      	bne.n	8006be4 <_strtod_l+0x73c>
 8006c30:	e655      	b.n	80068de <_strtod_l+0x436>
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	dd07      	ble.n	8006c46 <_strtod_l+0x79e>
 8006c36:	4649      	mov	r1, r9
 8006c38:	4632      	mov	r2, r6
 8006c3a:	9805      	ldr	r0, [sp, #20]
 8006c3c:	f001 ffa8 	bl	8008b90 <__lshift>
 8006c40:	4681      	mov	r9, r0
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d0d8      	beq.n	8006bf8 <_strtod_l+0x750>
 8006c46:	2f00      	cmp	r7, #0
 8006c48:	dd08      	ble.n	8006c5c <_strtod_l+0x7b4>
 8006c4a:	4641      	mov	r1, r8
 8006c4c:	463a      	mov	r2, r7
 8006c4e:	9805      	ldr	r0, [sp, #20]
 8006c50:	f001 ff9e 	bl	8008b90 <__lshift>
 8006c54:	4680      	mov	r8, r0
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f43f ae41 	beq.w	80068de <_strtod_l+0x436>
 8006c5c:	464a      	mov	r2, r9
 8006c5e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c60:	9805      	ldr	r0, [sp, #20]
 8006c62:	f002 f81d 	bl	8008ca0 <__mdiff>
 8006c66:	4604      	mov	r4, r0
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	f43f ae38 	beq.w	80068de <_strtod_l+0x436>
 8006c6e:	68c3      	ldr	r3, [r0, #12]
 8006c70:	4641      	mov	r1, r8
 8006c72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c74:	2300      	movs	r3, #0
 8006c76:	60c3      	str	r3, [r0, #12]
 8006c78:	f001 fff6 	bl	8008c68 <__mcmp>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	da45      	bge.n	8006d0c <_strtod_l+0x864>
 8006c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c82:	ea53 030a 	orrs.w	r3, r3, sl
 8006c86:	d16b      	bne.n	8006d60 <_strtod_l+0x8b8>
 8006c88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d167      	bne.n	8006d60 <_strtod_l+0x8b8>
 8006c90:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c94:	0d1b      	lsrs	r3, r3, #20
 8006c96:	051b      	lsls	r3, r3, #20
 8006c98:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c9c:	d960      	bls.n	8006d60 <_strtod_l+0x8b8>
 8006c9e:	6963      	ldr	r3, [r4, #20]
 8006ca0:	b913      	cbnz	r3, 8006ca8 <_strtod_l+0x800>
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	dd5b      	ble.n	8006d60 <_strtod_l+0x8b8>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	2201      	movs	r2, #1
 8006cac:	9805      	ldr	r0, [sp, #20]
 8006cae:	f001 ff6f 	bl	8008b90 <__lshift>
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	f001 ffd7 	bl	8008c68 <__mcmp>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	dd50      	ble.n	8006d60 <_strtod_l+0x8b8>
 8006cbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006cc2:	9a08      	ldr	r2, [sp, #32]
 8006cc4:	0d1b      	lsrs	r3, r3, #20
 8006cc6:	051b      	lsls	r3, r3, #20
 8006cc8:	2a00      	cmp	r2, #0
 8006cca:	d06a      	beq.n	8006da2 <_strtod_l+0x8fa>
 8006ccc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006cd0:	d867      	bhi.n	8006da2 <_strtod_l+0x8fa>
 8006cd2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006cd6:	f67f ae98 	bls.w	8006a0a <_strtod_l+0x562>
 8006cda:	4650      	mov	r0, sl
 8006cdc:	4659      	mov	r1, fp
 8006cde:	4b09      	ldr	r3, [pc, #36]	@ (8006d04 <_strtod_l+0x85c>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f7f9 fbf9 	bl	80004d8 <__aeabi_dmul>
 8006ce6:	4b08      	ldr	r3, [pc, #32]	@ (8006d08 <_strtod_l+0x860>)
 8006ce8:	4682      	mov	sl, r0
 8006cea:	400b      	ands	r3, r1
 8006cec:	468b      	mov	fp, r1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f47f ae00 	bne.w	80068f4 <_strtod_l+0x44c>
 8006cf4:	2322      	movs	r3, #34	@ 0x22
 8006cf6:	9a05      	ldr	r2, [sp, #20]
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e5fb      	b.n	80068f4 <_strtod_l+0x44c>
 8006cfc:	08009858 	.word	0x08009858
 8006d00:	fffffc02 	.word	0xfffffc02
 8006d04:	39500000 	.word	0x39500000
 8006d08:	7ff00000 	.word	0x7ff00000
 8006d0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006d10:	d165      	bne.n	8006dde <_strtod_l+0x936>
 8006d12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006d14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d18:	b35a      	cbz	r2, 8006d72 <_strtod_l+0x8ca>
 8006d1a:	4a99      	ldr	r2, [pc, #612]	@ (8006f80 <_strtod_l+0xad8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d12b      	bne.n	8006d78 <_strtod_l+0x8d0>
 8006d20:	9b08      	ldr	r3, [sp, #32]
 8006d22:	4651      	mov	r1, sl
 8006d24:	b303      	cbz	r3, 8006d68 <_strtod_l+0x8c0>
 8006d26:	465a      	mov	r2, fp
 8006d28:	4b96      	ldr	r3, [pc, #600]	@ (8006f84 <_strtod_l+0xadc>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295
 8006d34:	d81b      	bhi.n	8006d6e <_strtod_l+0x8c6>
 8006d36:	0d1b      	lsrs	r3, r3, #20
 8006d38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d40:	4299      	cmp	r1, r3
 8006d42:	d119      	bne.n	8006d78 <_strtod_l+0x8d0>
 8006d44:	4b90      	ldr	r3, [pc, #576]	@ (8006f88 <_strtod_l+0xae0>)
 8006d46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d102      	bne.n	8006d52 <_strtod_l+0x8aa>
 8006d4c:	3101      	adds	r1, #1
 8006d4e:	f43f adc6 	beq.w	80068de <_strtod_l+0x436>
 8006d52:	f04f 0a00 	mov.w	sl, #0
 8006d56:	4b8b      	ldr	r3, [pc, #556]	@ (8006f84 <_strtod_l+0xadc>)
 8006d58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d5a:	401a      	ands	r2, r3
 8006d5c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006d60:	9b08      	ldr	r3, [sp, #32]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1b9      	bne.n	8006cda <_strtod_l+0x832>
 8006d66:	e5c5      	b.n	80068f4 <_strtod_l+0x44c>
 8006d68:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6c:	e7e8      	b.n	8006d40 <_strtod_l+0x898>
 8006d6e:	4613      	mov	r3, r2
 8006d70:	e7e6      	b.n	8006d40 <_strtod_l+0x898>
 8006d72:	ea53 030a 	orrs.w	r3, r3, sl
 8006d76:	d0a2      	beq.n	8006cbe <_strtod_l+0x816>
 8006d78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d7a:	b1db      	cbz	r3, 8006db4 <_strtod_l+0x90c>
 8006d7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d7e:	4213      	tst	r3, r2
 8006d80:	d0ee      	beq.n	8006d60 <_strtod_l+0x8b8>
 8006d82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d84:	4650      	mov	r0, sl
 8006d86:	4659      	mov	r1, fp
 8006d88:	9a08      	ldr	r2, [sp, #32]
 8006d8a:	b1bb      	cbz	r3, 8006dbc <_strtod_l+0x914>
 8006d8c:	f7ff fb6a 	bl	8006464 <sulp>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d98:	f7f9 f9e8 	bl	800016c <__adddf3>
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	468b      	mov	fp, r1
 8006da0:	e7de      	b.n	8006d60 <_strtod_l+0x8b8>
 8006da2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006da6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006daa:	f04f 3aff 	mov.w	sl, #4294967295
 8006dae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006db2:	e7d5      	b.n	8006d60 <_strtod_l+0x8b8>
 8006db4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006db6:	ea13 0f0a 	tst.w	r3, sl
 8006dba:	e7e1      	b.n	8006d80 <_strtod_l+0x8d8>
 8006dbc:	f7ff fb52 	bl	8006464 <sulp>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dc8:	f7f9 f9ce 	bl	8000168 <__aeabi_dsub>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4682      	mov	sl, r0
 8006dd2:	468b      	mov	fp, r1
 8006dd4:	f7f9 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d0c1      	beq.n	8006d60 <_strtod_l+0x8b8>
 8006ddc:	e615      	b.n	8006a0a <_strtod_l+0x562>
 8006dde:	4641      	mov	r1, r8
 8006de0:	4620      	mov	r0, r4
 8006de2:	f002 f8b1 	bl	8008f48 <__ratio>
 8006de6:	2200      	movs	r2, #0
 8006de8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006dec:	4606      	mov	r6, r0
 8006dee:	460f      	mov	r7, r1
 8006df0:	f7f9 fdee 	bl	80009d0 <__aeabi_dcmple>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d06d      	beq.n	8006ed4 <_strtod_l+0xa2c>
 8006df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d178      	bne.n	8006ef0 <_strtod_l+0xa48>
 8006dfe:	f1ba 0f00 	cmp.w	sl, #0
 8006e02:	d156      	bne.n	8006eb2 <_strtod_l+0xa0a>
 8006e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d158      	bne.n	8006ec0 <_strtod_l+0xa18>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	4630      	mov	r0, r6
 8006e12:	4639      	mov	r1, r7
 8006e14:	4b5d      	ldr	r3, [pc, #372]	@ (8006f8c <_strtod_l+0xae4>)
 8006e16:	f7f9 fdd1 	bl	80009bc <__aeabi_dcmplt>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d157      	bne.n	8006ece <_strtod_l+0xa26>
 8006e1e:	4630      	mov	r0, r6
 8006e20:	4639      	mov	r1, r7
 8006e22:	2200      	movs	r2, #0
 8006e24:	4b5a      	ldr	r3, [pc, #360]	@ (8006f90 <_strtod_l+0xae8>)
 8006e26:	f7f9 fb57 	bl	80004d8 <__aeabi_dmul>
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006e32:	9606      	str	r6, [sp, #24]
 8006e34:	9307      	str	r3, [sp, #28]
 8006e36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e3a:	4d52      	ldr	r5, [pc, #328]	@ (8006f84 <_strtod_l+0xadc>)
 8006e3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e42:	401d      	ands	r5, r3
 8006e44:	4b53      	ldr	r3, [pc, #332]	@ (8006f94 <_strtod_l+0xaec>)
 8006e46:	429d      	cmp	r5, r3
 8006e48:	f040 80aa 	bne.w	8006fa0 <_strtod_l+0xaf8>
 8006e4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e4e:	4650      	mov	r0, sl
 8006e50:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006e54:	4659      	mov	r1, fp
 8006e56:	f001 ffb7 	bl	8008dc8 <__ulp>
 8006e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e5e:	f7f9 fb3b 	bl	80004d8 <__aeabi_dmul>
 8006e62:	4652      	mov	r2, sl
 8006e64:	465b      	mov	r3, fp
 8006e66:	f7f9 f981 	bl	800016c <__adddf3>
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4945      	ldr	r1, [pc, #276]	@ (8006f84 <_strtod_l+0xadc>)
 8006e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006f98 <_strtod_l+0xaf0>)
 8006e70:	4019      	ands	r1, r3
 8006e72:	4291      	cmp	r1, r2
 8006e74:	4682      	mov	sl, r0
 8006e76:	d942      	bls.n	8006efe <_strtod_l+0xa56>
 8006e78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e7a:	4b43      	ldr	r3, [pc, #268]	@ (8006f88 <_strtod_l+0xae0>)
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d103      	bne.n	8006e88 <_strtod_l+0x9e0>
 8006e80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e82:	3301      	adds	r3, #1
 8006e84:	f43f ad2b 	beq.w	80068de <_strtod_l+0x436>
 8006e88:	f04f 3aff 	mov.w	sl, #4294967295
 8006e8c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006f88 <_strtod_l+0xae0>
 8006e90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e92:	9805      	ldr	r0, [sp, #20]
 8006e94:	f001 fc66 	bl	8008764 <_Bfree>
 8006e98:	4649      	mov	r1, r9
 8006e9a:	9805      	ldr	r0, [sp, #20]
 8006e9c:	f001 fc62 	bl	8008764 <_Bfree>
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	9805      	ldr	r0, [sp, #20]
 8006ea4:	f001 fc5e 	bl	8008764 <_Bfree>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	9805      	ldr	r0, [sp, #20]
 8006eac:	f001 fc5a 	bl	8008764 <_Bfree>
 8006eb0:	e618      	b.n	8006ae4 <_strtod_l+0x63c>
 8006eb2:	f1ba 0f01 	cmp.w	sl, #1
 8006eb6:	d103      	bne.n	8006ec0 <_strtod_l+0xa18>
 8006eb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f43f ada5 	beq.w	8006a0a <_strtod_l+0x562>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4b36      	ldr	r3, [pc, #216]	@ (8006f9c <_strtod_l+0xaf4>)
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006eca:	4f30      	ldr	r7, [pc, #192]	@ (8006f8c <_strtod_l+0xae4>)
 8006ecc:	e7b3      	b.n	8006e36 <_strtod_l+0x98e>
 8006ece:	2600      	movs	r6, #0
 8006ed0:	4f2f      	ldr	r7, [pc, #188]	@ (8006f90 <_strtod_l+0xae8>)
 8006ed2:	e7ac      	b.n	8006e2e <_strtod_l+0x986>
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8006f90 <_strtod_l+0xae8>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	f7f9 fafc 	bl	80004d8 <__aeabi_dmul>
 8006ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	460f      	mov	r7, r1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0a1      	beq.n	8006e2e <_strtod_l+0x986>
 8006eea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006eee:	e7a2      	b.n	8006e36 <_strtod_l+0x98e>
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4b26      	ldr	r3, [pc, #152]	@ (8006f8c <_strtod_l+0xae4>)
 8006ef4:	4616      	mov	r6, r2
 8006ef6:	461f      	mov	r7, r3
 8006ef8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006efc:	e79b      	b.n	8006e36 <_strtod_l+0x98e>
 8006efe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006f02:	9b08      	ldr	r3, [sp, #32]
 8006f04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1c1      	bne.n	8006e90 <_strtod_l+0x9e8>
 8006f0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f10:	0d1b      	lsrs	r3, r3, #20
 8006f12:	051b      	lsls	r3, r3, #20
 8006f14:	429d      	cmp	r5, r3
 8006f16:	d1bb      	bne.n	8006e90 <_strtod_l+0x9e8>
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7fa f8d0 	bl	80010c0 <__aeabi_d2lz>
 8006f20:	f7f9 faac 	bl	800047c <__aeabi_l2d>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 f91c 	bl	8000168 <__aeabi_dsub>
 8006f30:	460b      	mov	r3, r1
 8006f32:	4602      	mov	r2, r0
 8006f34:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006f38:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f3e:	ea46 060a 	orr.w	r6, r6, sl
 8006f42:	431e      	orrs	r6, r3
 8006f44:	d069      	beq.n	800701a <_strtod_l+0xb72>
 8006f46:	a30a      	add	r3, pc, #40	@ (adr r3, 8006f70 <_strtod_l+0xac8>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 fd36 	bl	80009bc <__aeabi_dcmplt>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f47f accf 	bne.w	80068f4 <_strtod_l+0x44c>
 8006f56:	a308      	add	r3, pc, #32	@ (adr r3, 8006f78 <_strtod_l+0xad0>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f60:	f7f9 fd4a 	bl	80009f8 <__aeabi_dcmpgt>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d093      	beq.n	8006e90 <_strtod_l+0x9e8>
 8006f68:	e4c4      	b.n	80068f4 <_strtod_l+0x44c>
 8006f6a:	bf00      	nop
 8006f6c:	f3af 8000 	nop.w
 8006f70:	94a03595 	.word	0x94a03595
 8006f74:	3fdfffff 	.word	0x3fdfffff
 8006f78:	35afe535 	.word	0x35afe535
 8006f7c:	3fe00000 	.word	0x3fe00000
 8006f80:	000fffff 	.word	0x000fffff
 8006f84:	7ff00000 	.word	0x7ff00000
 8006f88:	7fefffff 	.word	0x7fefffff
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	3fe00000 	.word	0x3fe00000
 8006f94:	7fe00000 	.word	0x7fe00000
 8006f98:	7c9fffff 	.word	0x7c9fffff
 8006f9c:	bff00000 	.word	0xbff00000
 8006fa0:	9b08      	ldr	r3, [sp, #32]
 8006fa2:	b323      	cbz	r3, 8006fee <_strtod_l+0xb46>
 8006fa4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006fa8:	d821      	bhi.n	8006fee <_strtod_l+0xb46>
 8006faa:	a327      	add	r3, pc, #156	@ (adr r3, 8007048 <_strtod_l+0xba0>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 fd0c 	bl	80009d0 <__aeabi_dcmple>
 8006fb8:	b1a0      	cbz	r0, 8006fe4 <_strtod_l+0xb3c>
 8006fba:	4639      	mov	r1, r7
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7f9 fd3b 	bl	8000a38 <__aeabi_d2uiz>
 8006fc2:	2801      	cmp	r0, #1
 8006fc4:	bf38      	it	cc
 8006fc6:	2001      	movcc	r0, #1
 8006fc8:	f7f9 fa0c 	bl	80003e4 <__aeabi_ui2d>
 8006fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fce:	4606      	mov	r6, r0
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	b9fb      	cbnz	r3, 8007014 <_strtod_l+0xb6c>
 8006fd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006fd8:	9014      	str	r0, [sp, #80]	@ 0x50
 8006fda:	9315      	str	r3, [sp, #84]	@ 0x54
 8006fdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006fe0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006fe4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fe6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006fea:	1b5b      	subs	r3, r3, r5
 8006fec:	9311      	str	r3, [sp, #68]	@ 0x44
 8006fee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ff2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006ff6:	f001 fee7 	bl	8008dc8 <__ulp>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4650      	mov	r0, sl
 8007000:	4659      	mov	r1, fp
 8007002:	f7f9 fa69 	bl	80004d8 <__aeabi_dmul>
 8007006:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800700a:	f7f9 f8af 	bl	800016c <__adddf3>
 800700e:	4682      	mov	sl, r0
 8007010:	468b      	mov	fp, r1
 8007012:	e776      	b.n	8006f02 <_strtod_l+0xa5a>
 8007014:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007018:	e7e0      	b.n	8006fdc <_strtod_l+0xb34>
 800701a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007050 <_strtod_l+0xba8>)
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f7f9 fccc 	bl	80009bc <__aeabi_dcmplt>
 8007024:	e79e      	b.n	8006f64 <_strtod_l+0xabc>
 8007026:	2300      	movs	r3, #0
 8007028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800702a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800702c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	f7ff ba77 	b.w	8006522 <_strtod_l+0x7a>
 8007034:	2a65      	cmp	r2, #101	@ 0x65
 8007036:	f43f ab6e 	beq.w	8006716 <_strtod_l+0x26e>
 800703a:	2a45      	cmp	r2, #69	@ 0x45
 800703c:	f43f ab6b 	beq.w	8006716 <_strtod_l+0x26e>
 8007040:	2301      	movs	r3, #1
 8007042:	f7ff bba6 	b.w	8006792 <_strtod_l+0x2ea>
 8007046:	bf00      	nop
 8007048:	ffc00000 	.word	0xffc00000
 800704c:	41dfffff 	.word	0x41dfffff
 8007050:	94a03595 	.word	0x94a03595
 8007054:	3fcfffff 	.word	0x3fcfffff

08007058 <_strtod_r>:
 8007058:	4b01      	ldr	r3, [pc, #4]	@ (8007060 <_strtod_r+0x8>)
 800705a:	f7ff ba25 	b.w	80064a8 <_strtod_l>
 800705e:	bf00      	nop
 8007060:	2000007c 	.word	0x2000007c

08007064 <_strtol_l.constprop.0>:
 8007064:	2b24      	cmp	r3, #36	@ 0x24
 8007066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706a:	4686      	mov	lr, r0
 800706c:	4690      	mov	r8, r2
 800706e:	d801      	bhi.n	8007074 <_strtol_l.constprop.0+0x10>
 8007070:	2b01      	cmp	r3, #1
 8007072:	d106      	bne.n	8007082 <_strtol_l.constprop.0+0x1e>
 8007074:	f7ff f8ce 	bl	8006214 <__errno>
 8007078:	2316      	movs	r3, #22
 800707a:	6003      	str	r3, [r0, #0]
 800707c:	2000      	movs	r0, #0
 800707e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007082:	460d      	mov	r5, r1
 8007084:	4833      	ldr	r0, [pc, #204]	@ (8007154 <_strtol_l.constprop.0+0xf0>)
 8007086:	462a      	mov	r2, r5
 8007088:	f815 4b01 	ldrb.w	r4, [r5], #1
 800708c:	5d06      	ldrb	r6, [r0, r4]
 800708e:	f016 0608 	ands.w	r6, r6, #8
 8007092:	d1f8      	bne.n	8007086 <_strtol_l.constprop.0+0x22>
 8007094:	2c2d      	cmp	r4, #45	@ 0x2d
 8007096:	d12d      	bne.n	80070f4 <_strtol_l.constprop.0+0x90>
 8007098:	2601      	movs	r6, #1
 800709a:	782c      	ldrb	r4, [r5, #0]
 800709c:	1c95      	adds	r5, r2, #2
 800709e:	f033 0210 	bics.w	r2, r3, #16
 80070a2:	d109      	bne.n	80070b8 <_strtol_l.constprop.0+0x54>
 80070a4:	2c30      	cmp	r4, #48	@ 0x30
 80070a6:	d12a      	bne.n	80070fe <_strtol_l.constprop.0+0x9a>
 80070a8:	782a      	ldrb	r2, [r5, #0]
 80070aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070ae:	2a58      	cmp	r2, #88	@ 0x58
 80070b0:	d125      	bne.n	80070fe <_strtol_l.constprop.0+0x9a>
 80070b2:	2310      	movs	r3, #16
 80070b4:	786c      	ldrb	r4, [r5, #1]
 80070b6:	3502      	adds	r5, #2
 80070b8:	2200      	movs	r2, #0
 80070ba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80070be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80070c2:	fbbc f9f3 	udiv	r9, ip, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80070cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80070d0:	2f09      	cmp	r7, #9
 80070d2:	d81b      	bhi.n	800710c <_strtol_l.constprop.0+0xa8>
 80070d4:	463c      	mov	r4, r7
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	dd27      	ble.n	800712a <_strtol_l.constprop.0+0xc6>
 80070da:	1c57      	adds	r7, r2, #1
 80070dc:	d007      	beq.n	80070ee <_strtol_l.constprop.0+0x8a>
 80070de:	4581      	cmp	r9, r0
 80070e0:	d320      	bcc.n	8007124 <_strtol_l.constprop.0+0xc0>
 80070e2:	d101      	bne.n	80070e8 <_strtol_l.constprop.0+0x84>
 80070e4:	45a2      	cmp	sl, r4
 80070e6:	db1d      	blt.n	8007124 <_strtol_l.constprop.0+0xc0>
 80070e8:	2201      	movs	r2, #1
 80070ea:	fb00 4003 	mla	r0, r0, r3, r4
 80070ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070f2:	e7eb      	b.n	80070cc <_strtol_l.constprop.0+0x68>
 80070f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80070f6:	bf04      	itt	eq
 80070f8:	782c      	ldrbeq	r4, [r5, #0]
 80070fa:	1c95      	addeq	r5, r2, #2
 80070fc:	e7cf      	b.n	800709e <_strtol_l.constprop.0+0x3a>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1da      	bne.n	80070b8 <_strtol_l.constprop.0+0x54>
 8007102:	2c30      	cmp	r4, #48	@ 0x30
 8007104:	bf0c      	ite	eq
 8007106:	2308      	moveq	r3, #8
 8007108:	230a      	movne	r3, #10
 800710a:	e7d5      	b.n	80070b8 <_strtol_l.constprop.0+0x54>
 800710c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007110:	2f19      	cmp	r7, #25
 8007112:	d801      	bhi.n	8007118 <_strtol_l.constprop.0+0xb4>
 8007114:	3c37      	subs	r4, #55	@ 0x37
 8007116:	e7de      	b.n	80070d6 <_strtol_l.constprop.0+0x72>
 8007118:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800711c:	2f19      	cmp	r7, #25
 800711e:	d804      	bhi.n	800712a <_strtol_l.constprop.0+0xc6>
 8007120:	3c57      	subs	r4, #87	@ 0x57
 8007122:	e7d8      	b.n	80070d6 <_strtol_l.constprop.0+0x72>
 8007124:	f04f 32ff 	mov.w	r2, #4294967295
 8007128:	e7e1      	b.n	80070ee <_strtol_l.constprop.0+0x8a>
 800712a:	1c53      	adds	r3, r2, #1
 800712c:	d108      	bne.n	8007140 <_strtol_l.constprop.0+0xdc>
 800712e:	2322      	movs	r3, #34	@ 0x22
 8007130:	4660      	mov	r0, ip
 8007132:	f8ce 3000 	str.w	r3, [lr]
 8007136:	f1b8 0f00 	cmp.w	r8, #0
 800713a:	d0a0      	beq.n	800707e <_strtol_l.constprop.0+0x1a>
 800713c:	1e69      	subs	r1, r5, #1
 800713e:	e006      	b.n	800714e <_strtol_l.constprop.0+0xea>
 8007140:	b106      	cbz	r6, 8007144 <_strtol_l.constprop.0+0xe0>
 8007142:	4240      	negs	r0, r0
 8007144:	f1b8 0f00 	cmp.w	r8, #0
 8007148:	d099      	beq.n	800707e <_strtol_l.constprop.0+0x1a>
 800714a:	2a00      	cmp	r2, #0
 800714c:	d1f6      	bne.n	800713c <_strtol_l.constprop.0+0xd8>
 800714e:	f8c8 1000 	str.w	r1, [r8]
 8007152:	e794      	b.n	800707e <_strtol_l.constprop.0+0x1a>
 8007154:	08009881 	.word	0x08009881

08007158 <_strtol_r>:
 8007158:	f7ff bf84 	b.w	8007064 <_strtol_l.constprop.0>

0800715c <__ssputs_r>:
 800715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	461f      	mov	r7, r3
 8007162:	688e      	ldr	r6, [r1, #8]
 8007164:	4682      	mov	sl, r0
 8007166:	42be      	cmp	r6, r7
 8007168:	460c      	mov	r4, r1
 800716a:	4690      	mov	r8, r2
 800716c:	680b      	ldr	r3, [r1, #0]
 800716e:	d82d      	bhi.n	80071cc <__ssputs_r+0x70>
 8007170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007174:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007178:	d026      	beq.n	80071c8 <__ssputs_r+0x6c>
 800717a:	6965      	ldr	r5, [r4, #20]
 800717c:	6909      	ldr	r1, [r1, #16]
 800717e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007182:	eba3 0901 	sub.w	r9, r3, r1
 8007186:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800718a:	1c7b      	adds	r3, r7, #1
 800718c:	444b      	add	r3, r9
 800718e:	106d      	asrs	r5, r5, #1
 8007190:	429d      	cmp	r5, r3
 8007192:	bf38      	it	cc
 8007194:	461d      	movcc	r5, r3
 8007196:	0553      	lsls	r3, r2, #21
 8007198:	d527      	bpl.n	80071ea <__ssputs_r+0x8e>
 800719a:	4629      	mov	r1, r5
 800719c:	f7ff f8d6 	bl	800634c <_malloc_r>
 80071a0:	4606      	mov	r6, r0
 80071a2:	b360      	cbz	r0, 80071fe <__ssputs_r+0xa2>
 80071a4:	464a      	mov	r2, r9
 80071a6:	6921      	ldr	r1, [r4, #16]
 80071a8:	f000 ff3c 	bl	8008024 <memcpy>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b6:	81a3      	strh	r3, [r4, #12]
 80071b8:	6126      	str	r6, [r4, #16]
 80071ba:	444e      	add	r6, r9
 80071bc:	6026      	str	r6, [r4, #0]
 80071be:	463e      	mov	r6, r7
 80071c0:	6165      	str	r5, [r4, #20]
 80071c2:	eba5 0509 	sub.w	r5, r5, r9
 80071c6:	60a5      	str	r5, [r4, #8]
 80071c8:	42be      	cmp	r6, r7
 80071ca:	d900      	bls.n	80071ce <__ssputs_r+0x72>
 80071cc:	463e      	mov	r6, r7
 80071ce:	4632      	mov	r2, r6
 80071d0:	4641      	mov	r1, r8
 80071d2:	6820      	ldr	r0, [r4, #0]
 80071d4:	f000 fedb 	bl	8007f8e <memmove>
 80071d8:	2000      	movs	r0, #0
 80071da:	68a3      	ldr	r3, [r4, #8]
 80071dc:	1b9b      	subs	r3, r3, r6
 80071de:	60a3      	str	r3, [r4, #8]
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	4433      	add	r3, r6
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ea:	462a      	mov	r2, r5
 80071ec:	f001 ff20 	bl	8009030 <_realloc_r>
 80071f0:	4606      	mov	r6, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d1e0      	bne.n	80071b8 <__ssputs_r+0x5c>
 80071f6:	4650      	mov	r0, sl
 80071f8:	6921      	ldr	r1, [r4, #16]
 80071fa:	f7ff f83d 	bl	8006278 <_free_r>
 80071fe:	230c      	movs	r3, #12
 8007200:	f8ca 3000 	str.w	r3, [sl]
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	f04f 30ff 	mov.w	r0, #4294967295
 800720a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	e7e9      	b.n	80071e6 <__ssputs_r+0x8a>
	...

08007214 <_svfiprintf_r>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	4698      	mov	r8, r3
 800721a:	898b      	ldrh	r3, [r1, #12]
 800721c:	4607      	mov	r7, r0
 800721e:	061b      	lsls	r3, r3, #24
 8007220:	460d      	mov	r5, r1
 8007222:	4614      	mov	r4, r2
 8007224:	b09d      	sub	sp, #116	@ 0x74
 8007226:	d510      	bpl.n	800724a <_svfiprintf_r+0x36>
 8007228:	690b      	ldr	r3, [r1, #16]
 800722a:	b973      	cbnz	r3, 800724a <_svfiprintf_r+0x36>
 800722c:	2140      	movs	r1, #64	@ 0x40
 800722e:	f7ff f88d 	bl	800634c <_malloc_r>
 8007232:	6028      	str	r0, [r5, #0]
 8007234:	6128      	str	r0, [r5, #16]
 8007236:	b930      	cbnz	r0, 8007246 <_svfiprintf_r+0x32>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	b01d      	add	sp, #116	@ 0x74
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	2340      	movs	r3, #64	@ 0x40
 8007248:	616b      	str	r3, [r5, #20]
 800724a:	2300      	movs	r3, #0
 800724c:	9309      	str	r3, [sp, #36]	@ 0x24
 800724e:	2320      	movs	r3, #32
 8007250:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007254:	2330      	movs	r3, #48	@ 0x30
 8007256:	f04f 0901 	mov.w	r9, #1
 800725a:	f8cd 800c 	str.w	r8, [sp, #12]
 800725e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80073f8 <_svfiprintf_r+0x1e4>
 8007262:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007266:	4623      	mov	r3, r4
 8007268:	469a      	mov	sl, r3
 800726a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726e:	b10a      	cbz	r2, 8007274 <_svfiprintf_r+0x60>
 8007270:	2a25      	cmp	r2, #37	@ 0x25
 8007272:	d1f9      	bne.n	8007268 <_svfiprintf_r+0x54>
 8007274:	ebba 0b04 	subs.w	fp, sl, r4
 8007278:	d00b      	beq.n	8007292 <_svfiprintf_r+0x7e>
 800727a:	465b      	mov	r3, fp
 800727c:	4622      	mov	r2, r4
 800727e:	4629      	mov	r1, r5
 8007280:	4638      	mov	r0, r7
 8007282:	f7ff ff6b 	bl	800715c <__ssputs_r>
 8007286:	3001      	adds	r0, #1
 8007288:	f000 80a7 	beq.w	80073da <_svfiprintf_r+0x1c6>
 800728c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800728e:	445a      	add	r2, fp
 8007290:	9209      	str	r2, [sp, #36]	@ 0x24
 8007292:	f89a 3000 	ldrb.w	r3, [sl]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 809f 	beq.w	80073da <_svfiprintf_r+0x1c6>
 800729c:	2300      	movs	r3, #0
 800729e:	f04f 32ff 	mov.w	r2, #4294967295
 80072a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072a6:	f10a 0a01 	add.w	sl, sl, #1
 80072aa:	9304      	str	r3, [sp, #16]
 80072ac:	9307      	str	r3, [sp, #28]
 80072ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80072b4:	4654      	mov	r4, sl
 80072b6:	2205      	movs	r2, #5
 80072b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072bc:	484e      	ldr	r0, [pc, #312]	@ (80073f8 <_svfiprintf_r+0x1e4>)
 80072be:	f000 fea3 	bl	8008008 <memchr>
 80072c2:	9a04      	ldr	r2, [sp, #16]
 80072c4:	b9d8      	cbnz	r0, 80072fe <_svfiprintf_r+0xea>
 80072c6:	06d0      	lsls	r0, r2, #27
 80072c8:	bf44      	itt	mi
 80072ca:	2320      	movmi	r3, #32
 80072cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072d0:	0711      	lsls	r1, r2, #28
 80072d2:	bf44      	itt	mi
 80072d4:	232b      	movmi	r3, #43	@ 0x2b
 80072d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072da:	f89a 3000 	ldrb.w	r3, [sl]
 80072de:	2b2a      	cmp	r3, #42	@ 0x2a
 80072e0:	d015      	beq.n	800730e <_svfiprintf_r+0xfa>
 80072e2:	4654      	mov	r4, sl
 80072e4:	2000      	movs	r0, #0
 80072e6:	f04f 0c0a 	mov.w	ip, #10
 80072ea:	9a07      	ldr	r2, [sp, #28]
 80072ec:	4621      	mov	r1, r4
 80072ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072f2:	3b30      	subs	r3, #48	@ 0x30
 80072f4:	2b09      	cmp	r3, #9
 80072f6:	d94b      	bls.n	8007390 <_svfiprintf_r+0x17c>
 80072f8:	b1b0      	cbz	r0, 8007328 <_svfiprintf_r+0x114>
 80072fa:	9207      	str	r2, [sp, #28]
 80072fc:	e014      	b.n	8007328 <_svfiprintf_r+0x114>
 80072fe:	eba0 0308 	sub.w	r3, r0, r8
 8007302:	fa09 f303 	lsl.w	r3, r9, r3
 8007306:	4313      	orrs	r3, r2
 8007308:	46a2      	mov	sl, r4
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	e7d2      	b.n	80072b4 <_svfiprintf_r+0xa0>
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	1d19      	adds	r1, r3, #4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	9103      	str	r1, [sp, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfbb      	ittet	lt
 800731a:	425b      	neglt	r3, r3
 800731c:	f042 0202 	orrlt.w	r2, r2, #2
 8007320:	9307      	strge	r3, [sp, #28]
 8007322:	9307      	strlt	r3, [sp, #28]
 8007324:	bfb8      	it	lt
 8007326:	9204      	strlt	r2, [sp, #16]
 8007328:	7823      	ldrb	r3, [r4, #0]
 800732a:	2b2e      	cmp	r3, #46	@ 0x2e
 800732c:	d10a      	bne.n	8007344 <_svfiprintf_r+0x130>
 800732e:	7863      	ldrb	r3, [r4, #1]
 8007330:	2b2a      	cmp	r3, #42	@ 0x2a
 8007332:	d132      	bne.n	800739a <_svfiprintf_r+0x186>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	3402      	adds	r4, #2
 8007338:	1d1a      	adds	r2, r3, #4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	9203      	str	r2, [sp, #12]
 800733e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80073fc <_svfiprintf_r+0x1e8>
 8007348:	2203      	movs	r2, #3
 800734a:	4650      	mov	r0, sl
 800734c:	7821      	ldrb	r1, [r4, #0]
 800734e:	f000 fe5b 	bl	8008008 <memchr>
 8007352:	b138      	cbz	r0, 8007364 <_svfiprintf_r+0x150>
 8007354:	2240      	movs	r2, #64	@ 0x40
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	eba0 000a 	sub.w	r0, r0, sl
 800735c:	4082      	lsls	r2, r0
 800735e:	4313      	orrs	r3, r2
 8007360:	3401      	adds	r4, #1
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007368:	2206      	movs	r2, #6
 800736a:	4825      	ldr	r0, [pc, #148]	@ (8007400 <_svfiprintf_r+0x1ec>)
 800736c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007370:	f000 fe4a 	bl	8008008 <memchr>
 8007374:	2800      	cmp	r0, #0
 8007376:	d036      	beq.n	80073e6 <_svfiprintf_r+0x1d2>
 8007378:	4b22      	ldr	r3, [pc, #136]	@ (8007404 <_svfiprintf_r+0x1f0>)
 800737a:	bb1b      	cbnz	r3, 80073c4 <_svfiprintf_r+0x1b0>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	3307      	adds	r3, #7
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	3308      	adds	r3, #8
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738a:	4433      	add	r3, r6
 800738c:	9309      	str	r3, [sp, #36]	@ 0x24
 800738e:	e76a      	b.n	8007266 <_svfiprintf_r+0x52>
 8007390:	460c      	mov	r4, r1
 8007392:	2001      	movs	r0, #1
 8007394:	fb0c 3202 	mla	r2, ip, r2, r3
 8007398:	e7a8      	b.n	80072ec <_svfiprintf_r+0xd8>
 800739a:	2300      	movs	r3, #0
 800739c:	f04f 0c0a 	mov.w	ip, #10
 80073a0:	4619      	mov	r1, r3
 80073a2:	3401      	adds	r4, #1
 80073a4:	9305      	str	r3, [sp, #20]
 80073a6:	4620      	mov	r0, r4
 80073a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ac:	3a30      	subs	r2, #48	@ 0x30
 80073ae:	2a09      	cmp	r2, #9
 80073b0:	d903      	bls.n	80073ba <_svfiprintf_r+0x1a6>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0c6      	beq.n	8007344 <_svfiprintf_r+0x130>
 80073b6:	9105      	str	r1, [sp, #20]
 80073b8:	e7c4      	b.n	8007344 <_svfiprintf_r+0x130>
 80073ba:	4604      	mov	r4, r0
 80073bc:	2301      	movs	r3, #1
 80073be:	fb0c 2101 	mla	r1, ip, r1, r2
 80073c2:	e7f0      	b.n	80073a6 <_svfiprintf_r+0x192>
 80073c4:	ab03      	add	r3, sp, #12
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4638      	mov	r0, r7
 80073cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007408 <_svfiprintf_r+0x1f4>)
 80073ce:	a904      	add	r1, sp, #16
 80073d0:	f3af 8000 	nop.w
 80073d4:	1c42      	adds	r2, r0, #1
 80073d6:	4606      	mov	r6, r0
 80073d8:	d1d6      	bne.n	8007388 <_svfiprintf_r+0x174>
 80073da:	89ab      	ldrh	r3, [r5, #12]
 80073dc:	065b      	lsls	r3, r3, #25
 80073de:	f53f af2d 	bmi.w	800723c <_svfiprintf_r+0x28>
 80073e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073e4:	e72c      	b.n	8007240 <_svfiprintf_r+0x2c>
 80073e6:	ab03      	add	r3, sp, #12
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	462a      	mov	r2, r5
 80073ec:	4638      	mov	r0, r7
 80073ee:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <_svfiprintf_r+0x1f4>)
 80073f0:	a904      	add	r1, sp, #16
 80073f2:	f000 fa47 	bl	8007884 <_printf_i>
 80073f6:	e7ed      	b.n	80073d4 <_svfiprintf_r+0x1c0>
 80073f8:	08009981 	.word	0x08009981
 80073fc:	08009987 	.word	0x08009987
 8007400:	0800998b 	.word	0x0800998b
 8007404:	00000000 	.word	0x00000000
 8007408:	0800715d 	.word	0x0800715d

0800740c <_sungetc_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	1c4b      	adds	r3, r1, #1
 8007410:	4614      	mov	r4, r2
 8007412:	d103      	bne.n	800741c <_sungetc_r+0x10>
 8007414:	f04f 35ff 	mov.w	r5, #4294967295
 8007418:	4628      	mov	r0, r5
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	8993      	ldrh	r3, [r2, #12]
 800741e:	b2cd      	uxtb	r5, r1
 8007420:	f023 0320 	bic.w	r3, r3, #32
 8007424:	8193      	strh	r3, [r2, #12]
 8007426:	6853      	ldr	r3, [r2, #4]
 8007428:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800742a:	b18a      	cbz	r2, 8007450 <_sungetc_r+0x44>
 800742c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800742e:	429a      	cmp	r2, r3
 8007430:	dd08      	ble.n	8007444 <_sungetc_r+0x38>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	1e5a      	subs	r2, r3, #1
 8007436:	6022      	str	r2, [r4, #0]
 8007438:	f803 5c01 	strb.w	r5, [r3, #-1]
 800743c:	6863      	ldr	r3, [r4, #4]
 800743e:	3301      	adds	r3, #1
 8007440:	6063      	str	r3, [r4, #4]
 8007442:	e7e9      	b.n	8007418 <_sungetc_r+0xc>
 8007444:	4621      	mov	r1, r4
 8007446:	f000 fd6a 	bl	8007f1e <__submore>
 800744a:	2800      	cmp	r0, #0
 800744c:	d0f1      	beq.n	8007432 <_sungetc_r+0x26>
 800744e:	e7e1      	b.n	8007414 <_sungetc_r+0x8>
 8007450:	6921      	ldr	r1, [r4, #16]
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	b141      	cbz	r1, 8007468 <_sungetc_r+0x5c>
 8007456:	4291      	cmp	r1, r2
 8007458:	d206      	bcs.n	8007468 <_sungetc_r+0x5c>
 800745a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800745e:	42a9      	cmp	r1, r5
 8007460:	d102      	bne.n	8007468 <_sungetc_r+0x5c>
 8007462:	3a01      	subs	r2, #1
 8007464:	6022      	str	r2, [r4, #0]
 8007466:	e7ea      	b.n	800743e <_sungetc_r+0x32>
 8007468:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800746c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007470:	6363      	str	r3, [r4, #52]	@ 0x34
 8007472:	2303      	movs	r3, #3
 8007474:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007476:	4623      	mov	r3, r4
 8007478:	f803 5f46 	strb.w	r5, [r3, #70]!
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	2301      	movs	r3, #1
 8007480:	e7de      	b.n	8007440 <_sungetc_r+0x34>

08007482 <__ssrefill_r>:
 8007482:	b510      	push	{r4, lr}
 8007484:	460c      	mov	r4, r1
 8007486:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007488:	b169      	cbz	r1, 80074a6 <__ssrefill_r+0x24>
 800748a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800748e:	4299      	cmp	r1, r3
 8007490:	d001      	beq.n	8007496 <__ssrefill_r+0x14>
 8007492:	f7fe fef1 	bl	8006278 <_free_r>
 8007496:	2000      	movs	r0, #0
 8007498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800749a:	6360      	str	r0, [r4, #52]	@ 0x34
 800749c:	6063      	str	r3, [r4, #4]
 800749e:	b113      	cbz	r3, 80074a6 <__ssrefill_r+0x24>
 80074a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	2300      	movs	r3, #0
 80074b0:	6063      	str	r3, [r4, #4]
 80074b2:	89a3      	ldrh	r3, [r4, #12]
 80074b4:	f043 0320 	orr.w	r3, r3, #32
 80074b8:	81a3      	strh	r3, [r4, #12]
 80074ba:	e7f3      	b.n	80074a4 <__ssrefill_r+0x22>

080074bc <__ssvfiscanf_r>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	460c      	mov	r4, r1
 80074c2:	2100      	movs	r1, #0
 80074c4:	4606      	mov	r6, r0
 80074c6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80074ca:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80074ce:	49aa      	ldr	r1, [pc, #680]	@ (8007778 <__ssvfiscanf_r+0x2bc>)
 80074d0:	f10d 0804 	add.w	r8, sp, #4
 80074d4:	91a0      	str	r1, [sp, #640]	@ 0x280
 80074d6:	49a9      	ldr	r1, [pc, #676]	@ (800777c <__ssvfiscanf_r+0x2c0>)
 80074d8:	4fa9      	ldr	r7, [pc, #676]	@ (8007780 <__ssvfiscanf_r+0x2c4>)
 80074da:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80074de:	91a1      	str	r1, [sp, #644]	@ 0x284
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	7813      	ldrb	r3, [r2, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8159 	beq.w	800779c <__ssvfiscanf_r+0x2e0>
 80074ea:	5cf9      	ldrb	r1, [r7, r3]
 80074ec:	1c55      	adds	r5, r2, #1
 80074ee:	f011 0108 	ands.w	r1, r1, #8
 80074f2:	d019      	beq.n	8007528 <__ssvfiscanf_r+0x6c>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	dd0f      	ble.n	800751a <__ssvfiscanf_r+0x5e>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	5cba      	ldrb	r2, [r7, r2]
 8007500:	0712      	lsls	r2, r2, #28
 8007502:	d401      	bmi.n	8007508 <__ssvfiscanf_r+0x4c>
 8007504:	462a      	mov	r2, r5
 8007506:	e7ec      	b.n	80074e2 <__ssvfiscanf_r+0x26>
 8007508:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800750a:	3301      	adds	r3, #1
 800750c:	3201      	adds	r2, #1
 800750e:	9245      	str	r2, [sp, #276]	@ 0x114
 8007510:	6862      	ldr	r2, [r4, #4]
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	3a01      	subs	r2, #1
 8007516:	6062      	str	r2, [r4, #4]
 8007518:	e7ec      	b.n	80074f4 <__ssvfiscanf_r+0x38>
 800751a:	4621      	mov	r1, r4
 800751c:	4630      	mov	r0, r6
 800751e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007520:	4798      	blx	r3
 8007522:	2800      	cmp	r0, #0
 8007524:	d0e9      	beq.n	80074fa <__ssvfiscanf_r+0x3e>
 8007526:	e7ed      	b.n	8007504 <__ssvfiscanf_r+0x48>
 8007528:	2b25      	cmp	r3, #37	@ 0x25
 800752a:	d012      	beq.n	8007552 <__ssvfiscanf_r+0x96>
 800752c:	4699      	mov	r9, r3
 800752e:	6863      	ldr	r3, [r4, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f340 8094 	ble.w	800765e <__ssvfiscanf_r+0x1a2>
 8007536:	6822      	ldr	r2, [r4, #0]
 8007538:	7813      	ldrb	r3, [r2, #0]
 800753a:	454b      	cmp	r3, r9
 800753c:	f040 812e 	bne.w	800779c <__ssvfiscanf_r+0x2e0>
 8007540:	6863      	ldr	r3, [r4, #4]
 8007542:	3201      	adds	r2, #1
 8007544:	3b01      	subs	r3, #1
 8007546:	6063      	str	r3, [r4, #4]
 8007548:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800754a:	6022      	str	r2, [r4, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	9345      	str	r3, [sp, #276]	@ 0x114
 8007550:	e7d8      	b.n	8007504 <__ssvfiscanf_r+0x48>
 8007552:	9141      	str	r1, [sp, #260]	@ 0x104
 8007554:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007556:	7853      	ldrb	r3, [r2, #1]
 8007558:	2b2a      	cmp	r3, #42	@ 0x2a
 800755a:	bf04      	itt	eq
 800755c:	2310      	moveq	r3, #16
 800755e:	1c95      	addeq	r5, r2, #2
 8007560:	f04f 020a 	mov.w	r2, #10
 8007564:	bf08      	it	eq
 8007566:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007568:	46a9      	mov	r9, r5
 800756a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800756e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007572:	2b09      	cmp	r3, #9
 8007574:	d91e      	bls.n	80075b4 <__ssvfiscanf_r+0xf8>
 8007576:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8007784 <__ssvfiscanf_r+0x2c8>
 800757a:	2203      	movs	r2, #3
 800757c:	4650      	mov	r0, sl
 800757e:	f000 fd43 	bl	8008008 <memchr>
 8007582:	b138      	cbz	r0, 8007594 <__ssvfiscanf_r+0xd8>
 8007584:	2301      	movs	r3, #1
 8007586:	464d      	mov	r5, r9
 8007588:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800758a:	eba0 000a 	sub.w	r0, r0, sl
 800758e:	4083      	lsls	r3, r0
 8007590:	4313      	orrs	r3, r2
 8007592:	9341      	str	r3, [sp, #260]	@ 0x104
 8007594:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007598:	2b78      	cmp	r3, #120	@ 0x78
 800759a:	d806      	bhi.n	80075aa <__ssvfiscanf_r+0xee>
 800759c:	2b57      	cmp	r3, #87	@ 0x57
 800759e:	d810      	bhi.n	80075c2 <__ssvfiscanf_r+0x106>
 80075a0:	2b25      	cmp	r3, #37	@ 0x25
 80075a2:	d0c3      	beq.n	800752c <__ssvfiscanf_r+0x70>
 80075a4:	d856      	bhi.n	8007654 <__ssvfiscanf_r+0x198>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d064      	beq.n	8007674 <__ssvfiscanf_r+0x1b8>
 80075aa:	2303      	movs	r3, #3
 80075ac:	9347      	str	r3, [sp, #284]	@ 0x11c
 80075ae:	230a      	movs	r3, #10
 80075b0:	9342      	str	r3, [sp, #264]	@ 0x108
 80075b2:	e077      	b.n	80076a4 <__ssvfiscanf_r+0x1e8>
 80075b4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80075b6:	464d      	mov	r5, r9
 80075b8:	fb02 1103 	mla	r1, r2, r3, r1
 80075bc:	3930      	subs	r1, #48	@ 0x30
 80075be:	9143      	str	r1, [sp, #268]	@ 0x10c
 80075c0:	e7d2      	b.n	8007568 <__ssvfiscanf_r+0xac>
 80075c2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80075c6:	2a20      	cmp	r2, #32
 80075c8:	d8ef      	bhi.n	80075aa <__ssvfiscanf_r+0xee>
 80075ca:	a101      	add	r1, pc, #4	@ (adr r1, 80075d0 <__ssvfiscanf_r+0x114>)
 80075cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075d0:	08007683 	.word	0x08007683
 80075d4:	080075ab 	.word	0x080075ab
 80075d8:	080075ab 	.word	0x080075ab
 80075dc:	080076dd 	.word	0x080076dd
 80075e0:	080075ab 	.word	0x080075ab
 80075e4:	080075ab 	.word	0x080075ab
 80075e8:	080075ab 	.word	0x080075ab
 80075ec:	080075ab 	.word	0x080075ab
 80075f0:	080075ab 	.word	0x080075ab
 80075f4:	080075ab 	.word	0x080075ab
 80075f8:	080075ab 	.word	0x080075ab
 80075fc:	080076f3 	.word	0x080076f3
 8007600:	080076d9 	.word	0x080076d9
 8007604:	0800765b 	.word	0x0800765b
 8007608:	0800765b 	.word	0x0800765b
 800760c:	0800765b 	.word	0x0800765b
 8007610:	080075ab 	.word	0x080075ab
 8007614:	08007695 	.word	0x08007695
 8007618:	080075ab 	.word	0x080075ab
 800761c:	080075ab 	.word	0x080075ab
 8007620:	080075ab 	.word	0x080075ab
 8007624:	080075ab 	.word	0x080075ab
 8007628:	08007703 	.word	0x08007703
 800762c:	0800769d 	.word	0x0800769d
 8007630:	0800767b 	.word	0x0800767b
 8007634:	080075ab 	.word	0x080075ab
 8007638:	080075ab 	.word	0x080075ab
 800763c:	080076ff 	.word	0x080076ff
 8007640:	080075ab 	.word	0x080075ab
 8007644:	080076d9 	.word	0x080076d9
 8007648:	080075ab 	.word	0x080075ab
 800764c:	080075ab 	.word	0x080075ab
 8007650:	08007683 	.word	0x08007683
 8007654:	3b45      	subs	r3, #69	@ 0x45
 8007656:	2b02      	cmp	r3, #2
 8007658:	d8a7      	bhi.n	80075aa <__ssvfiscanf_r+0xee>
 800765a:	2305      	movs	r3, #5
 800765c:	e021      	b.n	80076a2 <__ssvfiscanf_r+0x1e6>
 800765e:	4621      	mov	r1, r4
 8007660:	4630      	mov	r0, r6
 8007662:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007664:	4798      	blx	r3
 8007666:	2800      	cmp	r0, #0
 8007668:	f43f af65 	beq.w	8007536 <__ssvfiscanf_r+0x7a>
 800766c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800766e:	2800      	cmp	r0, #0
 8007670:	f040 808c 	bne.w	800778c <__ssvfiscanf_r+0x2d0>
 8007674:	f04f 30ff 	mov.w	r0, #4294967295
 8007678:	e08c      	b.n	8007794 <__ssvfiscanf_r+0x2d8>
 800767a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800767c:	f042 0220 	orr.w	r2, r2, #32
 8007680:	9241      	str	r2, [sp, #260]	@ 0x104
 8007682:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007688:	9241      	str	r2, [sp, #260]	@ 0x104
 800768a:	2210      	movs	r2, #16
 800768c:	2b6e      	cmp	r3, #110	@ 0x6e
 800768e:	9242      	str	r2, [sp, #264]	@ 0x108
 8007690:	d902      	bls.n	8007698 <__ssvfiscanf_r+0x1dc>
 8007692:	e005      	b.n	80076a0 <__ssvfiscanf_r+0x1e4>
 8007694:	2300      	movs	r3, #0
 8007696:	9342      	str	r3, [sp, #264]	@ 0x108
 8007698:	2303      	movs	r3, #3
 800769a:	e002      	b.n	80076a2 <__ssvfiscanf_r+0x1e6>
 800769c:	2308      	movs	r3, #8
 800769e:	9342      	str	r3, [sp, #264]	@ 0x108
 80076a0:	2304      	movs	r3, #4
 80076a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80076a4:	6863      	ldr	r3, [r4, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dd39      	ble.n	800771e <__ssvfiscanf_r+0x262>
 80076aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80076ac:	0659      	lsls	r1, r3, #25
 80076ae:	d404      	bmi.n	80076ba <__ssvfiscanf_r+0x1fe>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	5cba      	ldrb	r2, [r7, r2]
 80076b6:	0712      	lsls	r2, r2, #28
 80076b8:	d438      	bmi.n	800772c <__ssvfiscanf_r+0x270>
 80076ba:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80076bc:	2b02      	cmp	r3, #2
 80076be:	dc47      	bgt.n	8007750 <__ssvfiscanf_r+0x294>
 80076c0:	466b      	mov	r3, sp
 80076c2:	4622      	mov	r2, r4
 80076c4:	4630      	mov	r0, r6
 80076c6:	a941      	add	r1, sp, #260	@ 0x104
 80076c8:	f000 f9fc 	bl	8007ac4 <_scanf_chars>
 80076cc:	2801      	cmp	r0, #1
 80076ce:	d065      	beq.n	800779c <__ssvfiscanf_r+0x2e0>
 80076d0:	2802      	cmp	r0, #2
 80076d2:	f47f af17 	bne.w	8007504 <__ssvfiscanf_r+0x48>
 80076d6:	e7c9      	b.n	800766c <__ssvfiscanf_r+0x1b0>
 80076d8:	220a      	movs	r2, #10
 80076da:	e7d7      	b.n	800768c <__ssvfiscanf_r+0x1d0>
 80076dc:	4629      	mov	r1, r5
 80076de:	4640      	mov	r0, r8
 80076e0:	f000 fbe4 	bl	8007eac <__sccl>
 80076e4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80076e6:	4605      	mov	r5, r0
 80076e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ec:	9341      	str	r3, [sp, #260]	@ 0x104
 80076ee:	2301      	movs	r3, #1
 80076f0:	e7d7      	b.n	80076a2 <__ssvfiscanf_r+0x1e6>
 80076f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80076f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076f8:	9341      	str	r3, [sp, #260]	@ 0x104
 80076fa:	2300      	movs	r3, #0
 80076fc:	e7d1      	b.n	80076a2 <__ssvfiscanf_r+0x1e6>
 80076fe:	2302      	movs	r3, #2
 8007700:	e7cf      	b.n	80076a2 <__ssvfiscanf_r+0x1e6>
 8007702:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007704:	06c3      	lsls	r3, r0, #27
 8007706:	f53f aefd 	bmi.w	8007504 <__ssvfiscanf_r+0x48>
 800770a:	9b00      	ldr	r3, [sp, #0]
 800770c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800770e:	1d19      	adds	r1, r3, #4
 8007710:	9100      	str	r1, [sp, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	07c0      	lsls	r0, r0, #31
 8007716:	bf4c      	ite	mi
 8007718:	801a      	strhmi	r2, [r3, #0]
 800771a:	601a      	strpl	r2, [r3, #0]
 800771c:	e6f2      	b.n	8007504 <__ssvfiscanf_r+0x48>
 800771e:	4621      	mov	r1, r4
 8007720:	4630      	mov	r0, r6
 8007722:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007724:	4798      	blx	r3
 8007726:	2800      	cmp	r0, #0
 8007728:	d0bf      	beq.n	80076aa <__ssvfiscanf_r+0x1ee>
 800772a:	e79f      	b.n	800766c <__ssvfiscanf_r+0x1b0>
 800772c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800772e:	3201      	adds	r2, #1
 8007730:	9245      	str	r2, [sp, #276]	@ 0x114
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	3a01      	subs	r2, #1
 8007736:	2a00      	cmp	r2, #0
 8007738:	6062      	str	r2, [r4, #4]
 800773a:	dd02      	ble.n	8007742 <__ssvfiscanf_r+0x286>
 800773c:	3301      	adds	r3, #1
 800773e:	6023      	str	r3, [r4, #0]
 8007740:	e7b6      	b.n	80076b0 <__ssvfiscanf_r+0x1f4>
 8007742:	4621      	mov	r1, r4
 8007744:	4630      	mov	r0, r6
 8007746:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007748:	4798      	blx	r3
 800774a:	2800      	cmp	r0, #0
 800774c:	d0b0      	beq.n	80076b0 <__ssvfiscanf_r+0x1f4>
 800774e:	e78d      	b.n	800766c <__ssvfiscanf_r+0x1b0>
 8007750:	2b04      	cmp	r3, #4
 8007752:	dc06      	bgt.n	8007762 <__ssvfiscanf_r+0x2a6>
 8007754:	466b      	mov	r3, sp
 8007756:	4622      	mov	r2, r4
 8007758:	4630      	mov	r0, r6
 800775a:	a941      	add	r1, sp, #260	@ 0x104
 800775c:	f000 fa0c 	bl	8007b78 <_scanf_i>
 8007760:	e7b4      	b.n	80076cc <__ssvfiscanf_r+0x210>
 8007762:	4b09      	ldr	r3, [pc, #36]	@ (8007788 <__ssvfiscanf_r+0x2cc>)
 8007764:	2b00      	cmp	r3, #0
 8007766:	f43f aecd 	beq.w	8007504 <__ssvfiscanf_r+0x48>
 800776a:	466b      	mov	r3, sp
 800776c:	4622      	mov	r2, r4
 800776e:	4630      	mov	r0, r6
 8007770:	a941      	add	r1, sp, #260	@ 0x104
 8007772:	f7fe f99f 	bl	8005ab4 <_scanf_float>
 8007776:	e7a9      	b.n	80076cc <__ssvfiscanf_r+0x210>
 8007778:	0800740d 	.word	0x0800740d
 800777c:	08007483 	.word	0x08007483
 8007780:	08009881 	.word	0x08009881
 8007784:	08009987 	.word	0x08009987
 8007788:	08005ab5 	.word	0x08005ab5
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	065b      	lsls	r3, r3, #25
 8007790:	f53f af70 	bmi.w	8007674 <__ssvfiscanf_r+0x1b8>
 8007794:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8007798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800779e:	e7f9      	b.n	8007794 <__ssvfiscanf_r+0x2d8>

080077a0 <_printf_common>:
 80077a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	4616      	mov	r6, r2
 80077a6:	4698      	mov	r8, r3
 80077a8:	688a      	ldr	r2, [r1, #8]
 80077aa:	690b      	ldr	r3, [r1, #16]
 80077ac:	4607      	mov	r7, r0
 80077ae:	4293      	cmp	r3, r2
 80077b0:	bfb8      	it	lt
 80077b2:	4613      	movlt	r3, r2
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077ba:	460c      	mov	r4, r1
 80077bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077c0:	b10a      	cbz	r2, 80077c6 <_printf_common+0x26>
 80077c2:	3301      	adds	r3, #1
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	0699      	lsls	r1, r3, #26
 80077ca:	bf42      	ittt	mi
 80077cc:	6833      	ldrmi	r3, [r6, #0]
 80077ce:	3302      	addmi	r3, #2
 80077d0:	6033      	strmi	r3, [r6, #0]
 80077d2:	6825      	ldr	r5, [r4, #0]
 80077d4:	f015 0506 	ands.w	r5, r5, #6
 80077d8:	d106      	bne.n	80077e8 <_printf_common+0x48>
 80077da:	f104 0a19 	add.w	sl, r4, #25
 80077de:	68e3      	ldr	r3, [r4, #12]
 80077e0:	6832      	ldr	r2, [r6, #0]
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	42ab      	cmp	r3, r5
 80077e6:	dc2b      	bgt.n	8007840 <_printf_common+0xa0>
 80077e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077ec:	6822      	ldr	r2, [r4, #0]
 80077ee:	3b00      	subs	r3, #0
 80077f0:	bf18      	it	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	0692      	lsls	r2, r2, #26
 80077f6:	d430      	bmi.n	800785a <_printf_common+0xba>
 80077f8:	4641      	mov	r1, r8
 80077fa:	4638      	mov	r0, r7
 80077fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007800:	47c8      	blx	r9
 8007802:	3001      	adds	r0, #1
 8007804:	d023      	beq.n	800784e <_printf_common+0xae>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	6922      	ldr	r2, [r4, #16]
 800780a:	f003 0306 	and.w	r3, r3, #6
 800780e:	2b04      	cmp	r3, #4
 8007810:	bf14      	ite	ne
 8007812:	2500      	movne	r5, #0
 8007814:	6833      	ldreq	r3, [r6, #0]
 8007816:	f04f 0600 	mov.w	r6, #0
 800781a:	bf08      	it	eq
 800781c:	68e5      	ldreq	r5, [r4, #12]
 800781e:	f104 041a 	add.w	r4, r4, #26
 8007822:	bf08      	it	eq
 8007824:	1aed      	subeq	r5, r5, r3
 8007826:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800782a:	bf08      	it	eq
 800782c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007830:	4293      	cmp	r3, r2
 8007832:	bfc4      	itt	gt
 8007834:	1a9b      	subgt	r3, r3, r2
 8007836:	18ed      	addgt	r5, r5, r3
 8007838:	42b5      	cmp	r5, r6
 800783a:	d11a      	bne.n	8007872 <_printf_common+0xd2>
 800783c:	2000      	movs	r0, #0
 800783e:	e008      	b.n	8007852 <_printf_common+0xb2>
 8007840:	2301      	movs	r3, #1
 8007842:	4652      	mov	r2, sl
 8007844:	4641      	mov	r1, r8
 8007846:	4638      	mov	r0, r7
 8007848:	47c8      	blx	r9
 800784a:	3001      	adds	r0, #1
 800784c:	d103      	bne.n	8007856 <_printf_common+0xb6>
 800784e:	f04f 30ff 	mov.w	r0, #4294967295
 8007852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007856:	3501      	adds	r5, #1
 8007858:	e7c1      	b.n	80077de <_printf_common+0x3e>
 800785a:	2030      	movs	r0, #48	@ 0x30
 800785c:	18e1      	adds	r1, r4, r3
 800785e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007868:	4422      	add	r2, r4
 800786a:	3302      	adds	r3, #2
 800786c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007870:	e7c2      	b.n	80077f8 <_printf_common+0x58>
 8007872:	2301      	movs	r3, #1
 8007874:	4622      	mov	r2, r4
 8007876:	4641      	mov	r1, r8
 8007878:	4638      	mov	r0, r7
 800787a:	47c8      	blx	r9
 800787c:	3001      	adds	r0, #1
 800787e:	d0e6      	beq.n	800784e <_printf_common+0xae>
 8007880:	3601      	adds	r6, #1
 8007882:	e7d9      	b.n	8007838 <_printf_common+0x98>

08007884 <_printf_i>:
 8007884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007888:	7e0f      	ldrb	r7, [r1, #24]
 800788a:	4691      	mov	r9, r2
 800788c:	2f78      	cmp	r7, #120	@ 0x78
 800788e:	4680      	mov	r8, r0
 8007890:	460c      	mov	r4, r1
 8007892:	469a      	mov	sl, r3
 8007894:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800789a:	d807      	bhi.n	80078ac <_printf_i+0x28>
 800789c:	2f62      	cmp	r7, #98	@ 0x62
 800789e:	d80a      	bhi.n	80078b6 <_printf_i+0x32>
 80078a0:	2f00      	cmp	r7, #0
 80078a2:	f000 80d3 	beq.w	8007a4c <_printf_i+0x1c8>
 80078a6:	2f58      	cmp	r7, #88	@ 0x58
 80078a8:	f000 80ba 	beq.w	8007a20 <_printf_i+0x19c>
 80078ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078b4:	e03a      	b.n	800792c <_printf_i+0xa8>
 80078b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078ba:	2b15      	cmp	r3, #21
 80078bc:	d8f6      	bhi.n	80078ac <_printf_i+0x28>
 80078be:	a101      	add	r1, pc, #4	@ (adr r1, 80078c4 <_printf_i+0x40>)
 80078c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078c4:	0800791d 	.word	0x0800791d
 80078c8:	08007931 	.word	0x08007931
 80078cc:	080078ad 	.word	0x080078ad
 80078d0:	080078ad 	.word	0x080078ad
 80078d4:	080078ad 	.word	0x080078ad
 80078d8:	080078ad 	.word	0x080078ad
 80078dc:	08007931 	.word	0x08007931
 80078e0:	080078ad 	.word	0x080078ad
 80078e4:	080078ad 	.word	0x080078ad
 80078e8:	080078ad 	.word	0x080078ad
 80078ec:	080078ad 	.word	0x080078ad
 80078f0:	08007a33 	.word	0x08007a33
 80078f4:	0800795b 	.word	0x0800795b
 80078f8:	080079ed 	.word	0x080079ed
 80078fc:	080078ad 	.word	0x080078ad
 8007900:	080078ad 	.word	0x080078ad
 8007904:	08007a55 	.word	0x08007a55
 8007908:	080078ad 	.word	0x080078ad
 800790c:	0800795b 	.word	0x0800795b
 8007910:	080078ad 	.word	0x080078ad
 8007914:	080078ad 	.word	0x080078ad
 8007918:	080079f5 	.word	0x080079f5
 800791c:	6833      	ldr	r3, [r6, #0]
 800791e:	1d1a      	adds	r2, r3, #4
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6032      	str	r2, [r6, #0]
 8007924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800792c:	2301      	movs	r3, #1
 800792e:	e09e      	b.n	8007a6e <_printf_i+0x1ea>
 8007930:	6833      	ldr	r3, [r6, #0]
 8007932:	6820      	ldr	r0, [r4, #0]
 8007934:	1d19      	adds	r1, r3, #4
 8007936:	6031      	str	r1, [r6, #0]
 8007938:	0606      	lsls	r6, r0, #24
 800793a:	d501      	bpl.n	8007940 <_printf_i+0xbc>
 800793c:	681d      	ldr	r5, [r3, #0]
 800793e:	e003      	b.n	8007948 <_printf_i+0xc4>
 8007940:	0645      	lsls	r5, r0, #25
 8007942:	d5fb      	bpl.n	800793c <_printf_i+0xb8>
 8007944:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007948:	2d00      	cmp	r5, #0
 800794a:	da03      	bge.n	8007954 <_printf_i+0xd0>
 800794c:	232d      	movs	r3, #45	@ 0x2d
 800794e:	426d      	negs	r5, r5
 8007950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007954:	230a      	movs	r3, #10
 8007956:	4859      	ldr	r0, [pc, #356]	@ (8007abc <_printf_i+0x238>)
 8007958:	e011      	b.n	800797e <_printf_i+0xfa>
 800795a:	6821      	ldr	r1, [r4, #0]
 800795c:	6833      	ldr	r3, [r6, #0]
 800795e:	0608      	lsls	r0, r1, #24
 8007960:	f853 5b04 	ldr.w	r5, [r3], #4
 8007964:	d402      	bmi.n	800796c <_printf_i+0xe8>
 8007966:	0649      	lsls	r1, r1, #25
 8007968:	bf48      	it	mi
 800796a:	b2ad      	uxthmi	r5, r5
 800796c:	2f6f      	cmp	r7, #111	@ 0x6f
 800796e:	6033      	str	r3, [r6, #0]
 8007970:	bf14      	ite	ne
 8007972:	230a      	movne	r3, #10
 8007974:	2308      	moveq	r3, #8
 8007976:	4851      	ldr	r0, [pc, #324]	@ (8007abc <_printf_i+0x238>)
 8007978:	2100      	movs	r1, #0
 800797a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800797e:	6866      	ldr	r6, [r4, #4]
 8007980:	2e00      	cmp	r6, #0
 8007982:	bfa8      	it	ge
 8007984:	6821      	ldrge	r1, [r4, #0]
 8007986:	60a6      	str	r6, [r4, #8]
 8007988:	bfa4      	itt	ge
 800798a:	f021 0104 	bicge.w	r1, r1, #4
 800798e:	6021      	strge	r1, [r4, #0]
 8007990:	b90d      	cbnz	r5, 8007996 <_printf_i+0x112>
 8007992:	2e00      	cmp	r6, #0
 8007994:	d04b      	beq.n	8007a2e <_printf_i+0x1aa>
 8007996:	4616      	mov	r6, r2
 8007998:	fbb5 f1f3 	udiv	r1, r5, r3
 800799c:	fb03 5711 	mls	r7, r3, r1, r5
 80079a0:	5dc7      	ldrb	r7, [r0, r7]
 80079a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079a6:	462f      	mov	r7, r5
 80079a8:	42bb      	cmp	r3, r7
 80079aa:	460d      	mov	r5, r1
 80079ac:	d9f4      	bls.n	8007998 <_printf_i+0x114>
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	d10b      	bne.n	80079ca <_printf_i+0x146>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	07df      	lsls	r7, r3, #31
 80079b6:	d508      	bpl.n	80079ca <_printf_i+0x146>
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	6861      	ldr	r1, [r4, #4]
 80079bc:	4299      	cmp	r1, r3
 80079be:	bfde      	ittt	le
 80079c0:	2330      	movle	r3, #48	@ 0x30
 80079c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079ca:	1b92      	subs	r2, r2, r6
 80079cc:	6122      	str	r2, [r4, #16]
 80079ce:	464b      	mov	r3, r9
 80079d0:	4621      	mov	r1, r4
 80079d2:	4640      	mov	r0, r8
 80079d4:	f8cd a000 	str.w	sl, [sp]
 80079d8:	aa03      	add	r2, sp, #12
 80079da:	f7ff fee1 	bl	80077a0 <_printf_common>
 80079de:	3001      	adds	r0, #1
 80079e0:	d14a      	bne.n	8007a78 <_printf_i+0x1f4>
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
 80079e6:	b004      	add	sp, #16
 80079e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	f043 0320 	orr.w	r3, r3, #32
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	2778      	movs	r7, #120	@ 0x78
 80079f6:	4832      	ldr	r0, [pc, #200]	@ (8007ac0 <_printf_i+0x23c>)
 80079f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	6831      	ldr	r1, [r6, #0]
 8007a00:	061f      	lsls	r7, r3, #24
 8007a02:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a06:	d402      	bmi.n	8007a0e <_printf_i+0x18a>
 8007a08:	065f      	lsls	r7, r3, #25
 8007a0a:	bf48      	it	mi
 8007a0c:	b2ad      	uxthmi	r5, r5
 8007a0e:	6031      	str	r1, [r6, #0]
 8007a10:	07d9      	lsls	r1, r3, #31
 8007a12:	bf44      	itt	mi
 8007a14:	f043 0320 	orrmi.w	r3, r3, #32
 8007a18:	6023      	strmi	r3, [r4, #0]
 8007a1a:	b11d      	cbz	r5, 8007a24 <_printf_i+0x1a0>
 8007a1c:	2310      	movs	r3, #16
 8007a1e:	e7ab      	b.n	8007978 <_printf_i+0xf4>
 8007a20:	4826      	ldr	r0, [pc, #152]	@ (8007abc <_printf_i+0x238>)
 8007a22:	e7e9      	b.n	80079f8 <_printf_i+0x174>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	f023 0320 	bic.w	r3, r3, #32
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	e7f6      	b.n	8007a1c <_printf_i+0x198>
 8007a2e:	4616      	mov	r6, r2
 8007a30:	e7bd      	b.n	80079ae <_printf_i+0x12a>
 8007a32:	6833      	ldr	r3, [r6, #0]
 8007a34:	6825      	ldr	r5, [r4, #0]
 8007a36:	1d18      	adds	r0, r3, #4
 8007a38:	6961      	ldr	r1, [r4, #20]
 8007a3a:	6030      	str	r0, [r6, #0]
 8007a3c:	062e      	lsls	r6, r5, #24
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	d501      	bpl.n	8007a46 <_printf_i+0x1c2>
 8007a42:	6019      	str	r1, [r3, #0]
 8007a44:	e002      	b.n	8007a4c <_printf_i+0x1c8>
 8007a46:	0668      	lsls	r0, r5, #25
 8007a48:	d5fb      	bpl.n	8007a42 <_printf_i+0x1be>
 8007a4a:	8019      	strh	r1, [r3, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4616      	mov	r6, r2
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	e7bc      	b.n	80079ce <_printf_i+0x14a>
 8007a54:	6833      	ldr	r3, [r6, #0]
 8007a56:	2100      	movs	r1, #0
 8007a58:	1d1a      	adds	r2, r3, #4
 8007a5a:	6032      	str	r2, [r6, #0]
 8007a5c:	681e      	ldr	r6, [r3, #0]
 8007a5e:	6862      	ldr	r2, [r4, #4]
 8007a60:	4630      	mov	r0, r6
 8007a62:	f000 fad1 	bl	8008008 <memchr>
 8007a66:	b108      	cbz	r0, 8007a6c <_printf_i+0x1e8>
 8007a68:	1b80      	subs	r0, r0, r6
 8007a6a:	6060      	str	r0, [r4, #4]
 8007a6c:	6863      	ldr	r3, [r4, #4]
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	2300      	movs	r3, #0
 8007a72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a76:	e7aa      	b.n	80079ce <_printf_i+0x14a>
 8007a78:	4632      	mov	r2, r6
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	47d0      	blx	sl
 8007a82:	3001      	adds	r0, #1
 8007a84:	d0ad      	beq.n	80079e2 <_printf_i+0x15e>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	079b      	lsls	r3, r3, #30
 8007a8a:	d413      	bmi.n	8007ab4 <_printf_i+0x230>
 8007a8c:	68e0      	ldr	r0, [r4, #12]
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	4298      	cmp	r0, r3
 8007a92:	bfb8      	it	lt
 8007a94:	4618      	movlt	r0, r3
 8007a96:	e7a6      	b.n	80079e6 <_printf_i+0x162>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4632      	mov	r2, r6
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	47d0      	blx	sl
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d09d      	beq.n	80079e2 <_printf_i+0x15e>
 8007aa6:	3501      	adds	r5, #1
 8007aa8:	68e3      	ldr	r3, [r4, #12]
 8007aaa:	9903      	ldr	r1, [sp, #12]
 8007aac:	1a5b      	subs	r3, r3, r1
 8007aae:	42ab      	cmp	r3, r5
 8007ab0:	dcf2      	bgt.n	8007a98 <_printf_i+0x214>
 8007ab2:	e7eb      	b.n	8007a8c <_printf_i+0x208>
 8007ab4:	2500      	movs	r5, #0
 8007ab6:	f104 0619 	add.w	r6, r4, #25
 8007aba:	e7f5      	b.n	8007aa8 <_printf_i+0x224>
 8007abc:	08009992 	.word	0x08009992
 8007ac0:	080099a3 	.word	0x080099a3

08007ac4 <_scanf_chars>:
 8007ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac8:	4615      	mov	r5, r2
 8007aca:	688a      	ldr	r2, [r1, #8]
 8007acc:	4680      	mov	r8, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	b932      	cbnz	r2, 8007ae0 <_scanf_chars+0x1c>
 8007ad2:	698a      	ldr	r2, [r1, #24]
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	bf14      	ite	ne
 8007ad8:	f04f 32ff 	movne.w	r2, #4294967295
 8007adc:	2201      	moveq	r2, #1
 8007ade:	608a      	str	r2, [r1, #8]
 8007ae0:	2700      	movs	r7, #0
 8007ae2:	6822      	ldr	r2, [r4, #0]
 8007ae4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8007b74 <_scanf_chars+0xb0>
 8007ae8:	06d1      	lsls	r1, r2, #27
 8007aea:	bf5f      	itttt	pl
 8007aec:	681a      	ldrpl	r2, [r3, #0]
 8007aee:	1d11      	addpl	r1, r2, #4
 8007af0:	6019      	strpl	r1, [r3, #0]
 8007af2:	6816      	ldrpl	r6, [r2, #0]
 8007af4:	69a0      	ldr	r0, [r4, #24]
 8007af6:	b188      	cbz	r0, 8007b1c <_scanf_chars+0x58>
 8007af8:	2801      	cmp	r0, #1
 8007afa:	d107      	bne.n	8007b0c <_scanf_chars+0x48>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	781a      	ldrb	r2, [r3, #0]
 8007b00:	6963      	ldr	r3, [r4, #20]
 8007b02:	5c9b      	ldrb	r3, [r3, r2]
 8007b04:	b953      	cbnz	r3, 8007b1c <_scanf_chars+0x58>
 8007b06:	2f00      	cmp	r7, #0
 8007b08:	d031      	beq.n	8007b6e <_scanf_chars+0xaa>
 8007b0a:	e022      	b.n	8007b52 <_scanf_chars+0x8e>
 8007b0c:	2802      	cmp	r0, #2
 8007b0e:	d120      	bne.n	8007b52 <_scanf_chars+0x8e>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007b18:	071b      	lsls	r3, r3, #28
 8007b1a:	d41a      	bmi.n	8007b52 <_scanf_chars+0x8e>
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	3701      	adds	r7, #1
 8007b20:	06da      	lsls	r2, r3, #27
 8007b22:	bf5e      	ittt	pl
 8007b24:	682b      	ldrpl	r3, [r5, #0]
 8007b26:	781b      	ldrbpl	r3, [r3, #0]
 8007b28:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007b2c:	682a      	ldr	r2, [r5, #0]
 8007b2e:	686b      	ldr	r3, [r5, #4]
 8007b30:	3201      	adds	r2, #1
 8007b32:	602a      	str	r2, [r5, #0]
 8007b34:	68a2      	ldr	r2, [r4, #8]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	3a01      	subs	r2, #1
 8007b3a:	606b      	str	r3, [r5, #4]
 8007b3c:	60a2      	str	r2, [r4, #8]
 8007b3e:	b142      	cbz	r2, 8007b52 <_scanf_chars+0x8e>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dcd7      	bgt.n	8007af4 <_scanf_chars+0x30>
 8007b44:	4629      	mov	r1, r5
 8007b46:	4640      	mov	r0, r8
 8007b48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b4c:	4798      	blx	r3
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d0d0      	beq.n	8007af4 <_scanf_chars+0x30>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	f013 0310 	ands.w	r3, r3, #16
 8007b58:	d105      	bne.n	8007b66 <_scanf_chars+0xa2>
 8007b5a:	68e2      	ldr	r2, [r4, #12]
 8007b5c:	3201      	adds	r2, #1
 8007b5e:	60e2      	str	r2, [r4, #12]
 8007b60:	69a2      	ldr	r2, [r4, #24]
 8007b62:	b102      	cbz	r2, 8007b66 <_scanf_chars+0xa2>
 8007b64:	7033      	strb	r3, [r6, #0]
 8007b66:	2000      	movs	r0, #0
 8007b68:	6923      	ldr	r3, [r4, #16]
 8007b6a:	443b      	add	r3, r7
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b72:	bf00      	nop
 8007b74:	08009881 	.word	0x08009881

08007b78 <_scanf_i>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	4698      	mov	r8, r3
 8007b80:	4b72      	ldr	r3, [pc, #456]	@ (8007d4c <_scanf_i+0x1d4>)
 8007b82:	b087      	sub	sp, #28
 8007b84:	4682      	mov	sl, r0
 8007b86:	4616      	mov	r6, r2
 8007b88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b8c:	ab03      	add	r3, sp, #12
 8007b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007b92:	4b6f      	ldr	r3, [pc, #444]	@ (8007d50 <_scanf_i+0x1d8>)
 8007b94:	69a1      	ldr	r1, [r4, #24]
 8007b96:	4a6f      	ldr	r2, [pc, #444]	@ (8007d54 <_scanf_i+0x1dc>)
 8007b98:	4627      	mov	r7, r4
 8007b9a:	2903      	cmp	r1, #3
 8007b9c:	bf08      	it	eq
 8007b9e:	461a      	moveq	r2, r3
 8007ba0:	68a3      	ldr	r3, [r4, #8]
 8007ba2:	9201      	str	r2, [sp, #4]
 8007ba4:	1e5a      	subs	r2, r3, #1
 8007ba6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007baa:	bf81      	itttt	hi
 8007bac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007bb0:	eb03 0905 	addhi.w	r9, r3, r5
 8007bb4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007bb8:	60a3      	strhi	r3, [r4, #8]
 8007bba:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007bbe:	bf98      	it	ls
 8007bc0:	f04f 0900 	movls.w	r9, #0
 8007bc4:	463d      	mov	r5, r7
 8007bc6:	f04f 0b00 	mov.w	fp, #0
 8007bca:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	6831      	ldr	r1, [r6, #0]
 8007bd2:	ab03      	add	r3, sp, #12
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	7809      	ldrb	r1, [r1, #0]
 8007bd8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007bdc:	f000 fa14 	bl	8008008 <memchr>
 8007be0:	b328      	cbz	r0, 8007c2e <_scanf_i+0xb6>
 8007be2:	f1bb 0f01 	cmp.w	fp, #1
 8007be6:	d159      	bne.n	8007c9c <_scanf_i+0x124>
 8007be8:	6862      	ldr	r2, [r4, #4]
 8007bea:	b92a      	cbnz	r2, 8007bf8 <_scanf_i+0x80>
 8007bec:	2108      	movs	r1, #8
 8007bee:	6822      	ldr	r2, [r4, #0]
 8007bf0:	6061      	str	r1, [r4, #4]
 8007bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bf6:	6022      	str	r2, [r4, #0]
 8007bf8:	6822      	ldr	r2, [r4, #0]
 8007bfa:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007bfe:	6022      	str	r2, [r4, #0]
 8007c00:	68a2      	ldr	r2, [r4, #8]
 8007c02:	1e51      	subs	r1, r2, #1
 8007c04:	60a1      	str	r1, [r4, #8]
 8007c06:	b192      	cbz	r2, 8007c2e <_scanf_i+0xb6>
 8007c08:	6832      	ldr	r2, [r6, #0]
 8007c0a:	1c51      	adds	r1, r2, #1
 8007c0c:	6031      	str	r1, [r6, #0]
 8007c0e:	7812      	ldrb	r2, [r2, #0]
 8007c10:	f805 2b01 	strb.w	r2, [r5], #1
 8007c14:	6872      	ldr	r2, [r6, #4]
 8007c16:	3a01      	subs	r2, #1
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	6072      	str	r2, [r6, #4]
 8007c1c:	dc07      	bgt.n	8007c2e <_scanf_i+0xb6>
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4650      	mov	r0, sl
 8007c22:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007c26:	4790      	blx	r2
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	f040 8085 	bne.w	8007d38 <_scanf_i+0x1c0>
 8007c2e:	f10b 0b01 	add.w	fp, fp, #1
 8007c32:	f1bb 0f03 	cmp.w	fp, #3
 8007c36:	d1cb      	bne.n	8007bd0 <_scanf_i+0x58>
 8007c38:	6863      	ldr	r3, [r4, #4]
 8007c3a:	b90b      	cbnz	r3, 8007c40 <_scanf_i+0xc8>
 8007c3c:	230a      	movs	r3, #10
 8007c3e:	6063      	str	r3, [r4, #4]
 8007c40:	6863      	ldr	r3, [r4, #4]
 8007c42:	4945      	ldr	r1, [pc, #276]	@ (8007d58 <_scanf_i+0x1e0>)
 8007c44:	6960      	ldr	r0, [r4, #20]
 8007c46:	1ac9      	subs	r1, r1, r3
 8007c48:	f000 f930 	bl	8007eac <__sccl>
 8007c4c:	f04f 0b00 	mov.w	fp, #0
 8007c50:	68a3      	ldr	r3, [r4, #8]
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d03d      	beq.n	8007cd4 <_scanf_i+0x15c>
 8007c58:	6831      	ldr	r1, [r6, #0]
 8007c5a:	6960      	ldr	r0, [r4, #20]
 8007c5c:	f891 c000 	ldrb.w	ip, [r1]
 8007c60:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d035      	beq.n	8007cd4 <_scanf_i+0x15c>
 8007c68:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007c6c:	d124      	bne.n	8007cb8 <_scanf_i+0x140>
 8007c6e:	0510      	lsls	r0, r2, #20
 8007c70:	d522      	bpl.n	8007cb8 <_scanf_i+0x140>
 8007c72:	f10b 0b01 	add.w	fp, fp, #1
 8007c76:	f1b9 0f00 	cmp.w	r9, #0
 8007c7a:	d003      	beq.n	8007c84 <_scanf_i+0x10c>
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007c82:	60a3      	str	r3, [r4, #8]
 8007c84:	6873      	ldr	r3, [r6, #4]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	6073      	str	r3, [r6, #4]
 8007c8c:	dd1b      	ble.n	8007cc6 <_scanf_i+0x14e>
 8007c8e:	6833      	ldr	r3, [r6, #0]
 8007c90:	3301      	adds	r3, #1
 8007c92:	6033      	str	r3, [r6, #0]
 8007c94:	68a3      	ldr	r3, [r4, #8]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	e7d9      	b.n	8007c50 <_scanf_i+0xd8>
 8007c9c:	f1bb 0f02 	cmp.w	fp, #2
 8007ca0:	d1ae      	bne.n	8007c00 <_scanf_i+0x88>
 8007ca2:	6822      	ldr	r2, [r4, #0]
 8007ca4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007ca8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007cac:	d1bf      	bne.n	8007c2e <_scanf_i+0xb6>
 8007cae:	2110      	movs	r1, #16
 8007cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cb4:	6061      	str	r1, [r4, #4]
 8007cb6:	e7a2      	b.n	8007bfe <_scanf_i+0x86>
 8007cb8:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007cbc:	6022      	str	r2, [r4, #0]
 8007cbe:	780b      	ldrb	r3, [r1, #0]
 8007cc0:	f805 3b01 	strb.w	r3, [r5], #1
 8007cc4:	e7de      	b.n	8007c84 <_scanf_i+0x10c>
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4650      	mov	r0, sl
 8007cca:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007cce:	4798      	blx	r3
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d0df      	beq.n	8007c94 <_scanf_i+0x11c>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	05d9      	lsls	r1, r3, #23
 8007cd8:	d50d      	bpl.n	8007cf6 <_scanf_i+0x17e>
 8007cda:	42bd      	cmp	r5, r7
 8007cdc:	d909      	bls.n	8007cf2 <_scanf_i+0x17a>
 8007cde:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007cea:	f105 39ff 	add.w	r9, r5, #4294967295
 8007cee:	4798      	blx	r3
 8007cf0:	464d      	mov	r5, r9
 8007cf2:	42bd      	cmp	r5, r7
 8007cf4:	d028      	beq.n	8007d48 <_scanf_i+0x1d0>
 8007cf6:	6822      	ldr	r2, [r4, #0]
 8007cf8:	f012 0210 	ands.w	r2, r2, #16
 8007cfc:	d113      	bne.n	8007d26 <_scanf_i+0x1ae>
 8007cfe:	702a      	strb	r2, [r5, #0]
 8007d00:	4639      	mov	r1, r7
 8007d02:	6863      	ldr	r3, [r4, #4]
 8007d04:	4650      	mov	r0, sl
 8007d06:	9e01      	ldr	r6, [sp, #4]
 8007d08:	47b0      	blx	r6
 8007d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d0e:	6821      	ldr	r1, [r4, #0]
 8007d10:	1d1a      	adds	r2, r3, #4
 8007d12:	f8c8 2000 	str.w	r2, [r8]
 8007d16:	f011 0f20 	tst.w	r1, #32
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	d00f      	beq.n	8007d3e <_scanf_i+0x1c6>
 8007d1e:	6018      	str	r0, [r3, #0]
 8007d20:	68e3      	ldr	r3, [r4, #12]
 8007d22:	3301      	adds	r3, #1
 8007d24:	60e3      	str	r3, [r4, #12]
 8007d26:	2000      	movs	r0, #0
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	1bed      	subs	r5, r5, r7
 8007d2c:	445d      	add	r5, fp
 8007d2e:	442b      	add	r3, r5
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	b007      	add	sp, #28
 8007d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d38:	f04f 0b00 	mov.w	fp, #0
 8007d3c:	e7ca      	b.n	8007cd4 <_scanf_i+0x15c>
 8007d3e:	07ca      	lsls	r2, r1, #31
 8007d40:	bf4c      	ite	mi
 8007d42:	8018      	strhmi	r0, [r3, #0]
 8007d44:	6018      	strpl	r0, [r3, #0]
 8007d46:	e7eb      	b.n	8007d20 <_scanf_i+0x1a8>
 8007d48:	2001      	movs	r0, #1
 8007d4a:	e7f2      	b.n	8007d32 <_scanf_i+0x1ba>
 8007d4c:	080097e0 	.word	0x080097e0
 8007d50:	08007159 	.word	0x08007159
 8007d54:	08009169 	.word	0x08009169
 8007d58:	080099c4 	.word	0x080099c4

08007d5c <__sflush_r>:
 8007d5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	0716      	lsls	r6, r2, #28
 8007d64:	4605      	mov	r5, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	d454      	bmi.n	8007e14 <__sflush_r+0xb8>
 8007d6a:	684b      	ldr	r3, [r1, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dc02      	bgt.n	8007d76 <__sflush_r+0x1a>
 8007d70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	dd48      	ble.n	8007e08 <__sflush_r+0xac>
 8007d76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d78:	2e00      	cmp	r6, #0
 8007d7a:	d045      	beq.n	8007e08 <__sflush_r+0xac>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d82:	682f      	ldr	r7, [r5, #0]
 8007d84:	6a21      	ldr	r1, [r4, #32]
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	d030      	beq.n	8007dec <__sflush_r+0x90>
 8007d8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	0759      	lsls	r1, r3, #29
 8007d90:	d505      	bpl.n	8007d9e <__sflush_r+0x42>
 8007d92:	6863      	ldr	r3, [r4, #4]
 8007d94:	1ad2      	subs	r2, r2, r3
 8007d96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d98:	b10b      	cbz	r3, 8007d9e <__sflush_r+0x42>
 8007d9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d9c:	1ad2      	subs	r2, r2, r3
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4628      	mov	r0, r5
 8007da2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007da4:	6a21      	ldr	r1, [r4, #32]
 8007da6:	47b0      	blx	r6
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	d106      	bne.n	8007dbc <__sflush_r+0x60>
 8007dae:	6829      	ldr	r1, [r5, #0]
 8007db0:	291d      	cmp	r1, #29
 8007db2:	d82b      	bhi.n	8007e0c <__sflush_r+0xb0>
 8007db4:	4a28      	ldr	r2, [pc, #160]	@ (8007e58 <__sflush_r+0xfc>)
 8007db6:	410a      	asrs	r2, r1
 8007db8:	07d6      	lsls	r6, r2, #31
 8007dba:	d427      	bmi.n	8007e0c <__sflush_r+0xb0>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	6062      	str	r2, [r4, #4]
 8007dc0:	6922      	ldr	r2, [r4, #16]
 8007dc2:	04d9      	lsls	r1, r3, #19
 8007dc4:	6022      	str	r2, [r4, #0]
 8007dc6:	d504      	bpl.n	8007dd2 <__sflush_r+0x76>
 8007dc8:	1c42      	adds	r2, r0, #1
 8007dca:	d101      	bne.n	8007dd0 <__sflush_r+0x74>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b903      	cbnz	r3, 8007dd2 <__sflush_r+0x76>
 8007dd0:	6560      	str	r0, [r4, #84]	@ 0x54
 8007dd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dd4:	602f      	str	r7, [r5, #0]
 8007dd6:	b1b9      	cbz	r1, 8007e08 <__sflush_r+0xac>
 8007dd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d002      	beq.n	8007de6 <__sflush_r+0x8a>
 8007de0:	4628      	mov	r0, r5
 8007de2:	f7fe fa49 	bl	8006278 <_free_r>
 8007de6:	2300      	movs	r3, #0
 8007de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dea:	e00d      	b.n	8007e08 <__sflush_r+0xac>
 8007dec:	2301      	movs	r3, #1
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b0      	blx	r6
 8007df2:	4602      	mov	r2, r0
 8007df4:	1c50      	adds	r0, r2, #1
 8007df6:	d1c9      	bne.n	8007d8c <__sflush_r+0x30>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0c6      	beq.n	8007d8c <__sflush_r+0x30>
 8007dfe:	2b1d      	cmp	r3, #29
 8007e00:	d001      	beq.n	8007e06 <__sflush_r+0xaa>
 8007e02:	2b16      	cmp	r3, #22
 8007e04:	d11d      	bne.n	8007e42 <__sflush_r+0xe6>
 8007e06:	602f      	str	r7, [r5, #0]
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e021      	b.n	8007e50 <__sflush_r+0xf4>
 8007e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e10:	b21b      	sxth	r3, r3
 8007e12:	e01a      	b.n	8007e4a <__sflush_r+0xee>
 8007e14:	690f      	ldr	r7, [r1, #16]
 8007e16:	2f00      	cmp	r7, #0
 8007e18:	d0f6      	beq.n	8007e08 <__sflush_r+0xac>
 8007e1a:	0793      	lsls	r3, r2, #30
 8007e1c:	bf18      	it	ne
 8007e1e:	2300      	movne	r3, #0
 8007e20:	680e      	ldr	r6, [r1, #0]
 8007e22:	bf08      	it	eq
 8007e24:	694b      	ldreq	r3, [r1, #20]
 8007e26:	1bf6      	subs	r6, r6, r7
 8007e28:	600f      	str	r7, [r1, #0]
 8007e2a:	608b      	str	r3, [r1, #8]
 8007e2c:	2e00      	cmp	r6, #0
 8007e2e:	ddeb      	ble.n	8007e08 <__sflush_r+0xac>
 8007e30:	4633      	mov	r3, r6
 8007e32:	463a      	mov	r2, r7
 8007e34:	4628      	mov	r0, r5
 8007e36:	6a21      	ldr	r1, [r4, #32]
 8007e38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007e3c:	47e0      	blx	ip
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	dc07      	bgt.n	8007e52 <__sflush_r+0xf6>
 8007e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4e:	81a3      	strh	r3, [r4, #12]
 8007e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e52:	4407      	add	r7, r0
 8007e54:	1a36      	subs	r6, r6, r0
 8007e56:	e7e9      	b.n	8007e2c <__sflush_r+0xd0>
 8007e58:	dfbffffe 	.word	0xdfbffffe

08007e5c <_fflush_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	690b      	ldr	r3, [r1, #16]
 8007e60:	4605      	mov	r5, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	b913      	cbnz	r3, 8007e6c <_fflush_r+0x10>
 8007e66:	2500      	movs	r5, #0
 8007e68:	4628      	mov	r0, r5
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	b118      	cbz	r0, 8007e76 <_fflush_r+0x1a>
 8007e6e:	6a03      	ldr	r3, [r0, #32]
 8007e70:	b90b      	cbnz	r3, 8007e76 <_fflush_r+0x1a>
 8007e72:	f7fe f8bb 	bl	8005fec <__sinit>
 8007e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0f3      	beq.n	8007e66 <_fflush_r+0xa>
 8007e7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e80:	07d0      	lsls	r0, r2, #31
 8007e82:	d404      	bmi.n	8007e8e <_fflush_r+0x32>
 8007e84:	0599      	lsls	r1, r3, #22
 8007e86:	d402      	bmi.n	8007e8e <_fflush_r+0x32>
 8007e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e8a:	f7fe f9ee 	bl	800626a <__retarget_lock_acquire_recursive>
 8007e8e:	4628      	mov	r0, r5
 8007e90:	4621      	mov	r1, r4
 8007e92:	f7ff ff63 	bl	8007d5c <__sflush_r>
 8007e96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e98:	4605      	mov	r5, r0
 8007e9a:	07da      	lsls	r2, r3, #31
 8007e9c:	d4e4      	bmi.n	8007e68 <_fflush_r+0xc>
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	059b      	lsls	r3, r3, #22
 8007ea2:	d4e1      	bmi.n	8007e68 <_fflush_r+0xc>
 8007ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ea6:	f7fe f9e1 	bl	800626c <__retarget_lock_release_recursive>
 8007eaa:	e7dd      	b.n	8007e68 <_fflush_r+0xc>

08007eac <__sccl>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	780b      	ldrb	r3, [r1, #0]
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	2b5e      	cmp	r3, #94	@ 0x5e
 8007eb4:	bf0b      	itete	eq
 8007eb6:	784b      	ldrbeq	r3, [r1, #1]
 8007eb8:	1c4a      	addne	r2, r1, #1
 8007eba:	1c8a      	addeq	r2, r1, #2
 8007ebc:	2100      	movne	r1, #0
 8007ebe:	bf08      	it	eq
 8007ec0:	2101      	moveq	r1, #1
 8007ec2:	3801      	subs	r0, #1
 8007ec4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007ec8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007ecc:	42a8      	cmp	r0, r5
 8007ece:	d1fb      	bne.n	8007ec8 <__sccl+0x1c>
 8007ed0:	b90b      	cbnz	r3, 8007ed6 <__sccl+0x2a>
 8007ed2:	1e50      	subs	r0, r2, #1
 8007ed4:	bd70      	pop	{r4, r5, r6, pc}
 8007ed6:	f081 0101 	eor.w	r1, r1, #1
 8007eda:	4610      	mov	r0, r2
 8007edc:	54e1      	strb	r1, [r4, r3]
 8007ede:	4602      	mov	r2, r0
 8007ee0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ee4:	2d2d      	cmp	r5, #45	@ 0x2d
 8007ee6:	d005      	beq.n	8007ef4 <__sccl+0x48>
 8007ee8:	2d5d      	cmp	r5, #93	@ 0x5d
 8007eea:	d016      	beq.n	8007f1a <__sccl+0x6e>
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	d0f1      	beq.n	8007ed4 <__sccl+0x28>
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	e7f2      	b.n	8007eda <__sccl+0x2e>
 8007ef4:	7846      	ldrb	r6, [r0, #1]
 8007ef6:	2e5d      	cmp	r6, #93	@ 0x5d
 8007ef8:	d0fa      	beq.n	8007ef0 <__sccl+0x44>
 8007efa:	42b3      	cmp	r3, r6
 8007efc:	dcf8      	bgt.n	8007ef0 <__sccl+0x44>
 8007efe:	461a      	mov	r2, r3
 8007f00:	3002      	adds	r0, #2
 8007f02:	3201      	adds	r2, #1
 8007f04:	4296      	cmp	r6, r2
 8007f06:	54a1      	strb	r1, [r4, r2]
 8007f08:	dcfb      	bgt.n	8007f02 <__sccl+0x56>
 8007f0a:	1af2      	subs	r2, r6, r3
 8007f0c:	3a01      	subs	r2, #1
 8007f0e:	42b3      	cmp	r3, r6
 8007f10:	bfa8      	it	ge
 8007f12:	2200      	movge	r2, #0
 8007f14:	1c5d      	adds	r5, r3, #1
 8007f16:	18ab      	adds	r3, r5, r2
 8007f18:	e7e1      	b.n	8007ede <__sccl+0x32>
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	e7da      	b.n	8007ed4 <__sccl+0x28>

08007f1e <__submore>:
 8007f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f22:	460c      	mov	r4, r1
 8007f24:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007f26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f2a:	4299      	cmp	r1, r3
 8007f2c:	d11b      	bne.n	8007f66 <__submore+0x48>
 8007f2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007f32:	f7fe fa0b 	bl	800634c <_malloc_r>
 8007f36:	b918      	cbnz	r0, 8007f40 <__submore+0x22>
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f44:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007f46:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007f4a:	6360      	str	r0, [r4, #52]	@ 0x34
 8007f4c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007f50:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007f54:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007f58:	7043      	strb	r3, [r0, #1]
 8007f5a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007f5e:	7003      	strb	r3, [r0, #0]
 8007f60:	6020      	str	r0, [r4, #0]
 8007f62:	2000      	movs	r0, #0
 8007f64:	e7ea      	b.n	8007f3c <__submore+0x1e>
 8007f66:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007f68:	0077      	lsls	r7, r6, #1
 8007f6a:	463a      	mov	r2, r7
 8007f6c:	f001 f860 	bl	8009030 <_realloc_r>
 8007f70:	4605      	mov	r5, r0
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d0e0      	beq.n	8007f38 <__submore+0x1a>
 8007f76:	eb00 0806 	add.w	r8, r0, r6
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	4640      	mov	r0, r8
 8007f80:	f000 f850 	bl	8008024 <memcpy>
 8007f84:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007f88:	f8c4 8000 	str.w	r8, [r4]
 8007f8c:	e7e9      	b.n	8007f62 <__submore+0x44>

08007f8e <memmove>:
 8007f8e:	4288      	cmp	r0, r1
 8007f90:	b510      	push	{r4, lr}
 8007f92:	eb01 0402 	add.w	r4, r1, r2
 8007f96:	d902      	bls.n	8007f9e <memmove+0x10>
 8007f98:	4284      	cmp	r4, r0
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	d807      	bhi.n	8007fae <memmove+0x20>
 8007f9e:	1e43      	subs	r3, r0, #1
 8007fa0:	42a1      	cmp	r1, r4
 8007fa2:	d008      	beq.n	8007fb6 <memmove+0x28>
 8007fa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fa8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fac:	e7f8      	b.n	8007fa0 <memmove+0x12>
 8007fae:	4601      	mov	r1, r0
 8007fb0:	4402      	add	r2, r0
 8007fb2:	428a      	cmp	r2, r1
 8007fb4:	d100      	bne.n	8007fb8 <memmove+0x2a>
 8007fb6:	bd10      	pop	{r4, pc}
 8007fb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fbc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fc0:	e7f7      	b.n	8007fb2 <memmove+0x24>

08007fc2 <strncmp>:
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	b16a      	cbz	r2, 8007fe2 <strncmp+0x20>
 8007fc6:	3901      	subs	r1, #1
 8007fc8:	1884      	adds	r4, r0, r2
 8007fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d103      	bne.n	8007fde <strncmp+0x1c>
 8007fd6:	42a0      	cmp	r0, r4
 8007fd8:	d001      	beq.n	8007fde <strncmp+0x1c>
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	d1f5      	bne.n	8007fca <strncmp+0x8>
 8007fde:	1ad0      	subs	r0, r2, r3
 8007fe0:	bd10      	pop	{r4, pc}
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	e7fc      	b.n	8007fe0 <strncmp+0x1e>
	...

08007fe8 <_sbrk_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	2300      	movs	r3, #0
 8007fec:	4d05      	ldr	r5, [pc, #20]	@ (8008004 <_sbrk_r+0x1c>)
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	f7fa fa04 	bl	8002400 <_sbrk>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_sbrk_r+0x1a>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_sbrk_r+0x1a>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	20000604 	.word	0x20000604

08008008 <memchr>:
 8008008:	4603      	mov	r3, r0
 800800a:	b510      	push	{r4, lr}
 800800c:	b2c9      	uxtb	r1, r1
 800800e:	4402      	add	r2, r0
 8008010:	4293      	cmp	r3, r2
 8008012:	4618      	mov	r0, r3
 8008014:	d101      	bne.n	800801a <memchr+0x12>
 8008016:	2000      	movs	r0, #0
 8008018:	e003      	b.n	8008022 <memchr+0x1a>
 800801a:	7804      	ldrb	r4, [r0, #0]
 800801c:	3301      	adds	r3, #1
 800801e:	428c      	cmp	r4, r1
 8008020:	d1f6      	bne.n	8008010 <memchr+0x8>
 8008022:	bd10      	pop	{r4, pc}

08008024 <memcpy>:
 8008024:	440a      	add	r2, r1
 8008026:	4291      	cmp	r1, r2
 8008028:	f100 33ff 	add.w	r3, r0, #4294967295
 800802c:	d100      	bne.n	8008030 <memcpy+0xc>
 800802e:	4770      	bx	lr
 8008030:	b510      	push	{r4, lr}
 8008032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008036:	4291      	cmp	r1, r2
 8008038:	f803 4f01 	strb.w	r4, [r3, #1]!
 800803c:	d1f9      	bne.n	8008032 <memcpy+0xe>
 800803e:	bd10      	pop	{r4, pc}

08008040 <nan>:
 8008040:	2000      	movs	r0, #0
 8008042:	4901      	ldr	r1, [pc, #4]	@ (8008048 <nan+0x8>)
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	7ff80000 	.word	0x7ff80000

0800804c <rshift>:
 800804c:	6903      	ldr	r3, [r0, #16]
 800804e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008052:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008056:	f100 0414 	add.w	r4, r0, #20
 800805a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800805e:	dd46      	ble.n	80080ee <rshift+0xa2>
 8008060:	f011 011f 	ands.w	r1, r1, #31
 8008064:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008068:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800806c:	d10c      	bne.n	8008088 <rshift+0x3c>
 800806e:	4629      	mov	r1, r5
 8008070:	f100 0710 	add.w	r7, r0, #16
 8008074:	42b1      	cmp	r1, r6
 8008076:	d335      	bcc.n	80080e4 <rshift+0x98>
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	1eea      	subs	r2, r5, #3
 800807e:	4296      	cmp	r6, r2
 8008080:	bf38      	it	cc
 8008082:	2300      	movcc	r3, #0
 8008084:	4423      	add	r3, r4
 8008086:	e015      	b.n	80080b4 <rshift+0x68>
 8008088:	46a1      	mov	r9, r4
 800808a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800808e:	f1c1 0820 	rsb	r8, r1, #32
 8008092:	40cf      	lsrs	r7, r1
 8008094:	f105 0e04 	add.w	lr, r5, #4
 8008098:	4576      	cmp	r6, lr
 800809a:	46f4      	mov	ip, lr
 800809c:	d816      	bhi.n	80080cc <rshift+0x80>
 800809e:	1a9a      	subs	r2, r3, r2
 80080a0:	0092      	lsls	r2, r2, #2
 80080a2:	3a04      	subs	r2, #4
 80080a4:	3501      	adds	r5, #1
 80080a6:	42ae      	cmp	r6, r5
 80080a8:	bf38      	it	cc
 80080aa:	2200      	movcc	r2, #0
 80080ac:	18a3      	adds	r3, r4, r2
 80080ae:	50a7      	str	r7, [r4, r2]
 80080b0:	b107      	cbz	r7, 80080b4 <rshift+0x68>
 80080b2:	3304      	adds	r3, #4
 80080b4:	42a3      	cmp	r3, r4
 80080b6:	eba3 0204 	sub.w	r2, r3, r4
 80080ba:	bf08      	it	eq
 80080bc:	2300      	moveq	r3, #0
 80080be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80080c2:	6102      	str	r2, [r0, #16]
 80080c4:	bf08      	it	eq
 80080c6:	6143      	streq	r3, [r0, #20]
 80080c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080cc:	f8dc c000 	ldr.w	ip, [ip]
 80080d0:	fa0c fc08 	lsl.w	ip, ip, r8
 80080d4:	ea4c 0707 	orr.w	r7, ip, r7
 80080d8:	f849 7b04 	str.w	r7, [r9], #4
 80080dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080e0:	40cf      	lsrs	r7, r1
 80080e2:	e7d9      	b.n	8008098 <rshift+0x4c>
 80080e4:	f851 cb04 	ldr.w	ip, [r1], #4
 80080e8:	f847 cf04 	str.w	ip, [r7, #4]!
 80080ec:	e7c2      	b.n	8008074 <rshift+0x28>
 80080ee:	4623      	mov	r3, r4
 80080f0:	e7e0      	b.n	80080b4 <rshift+0x68>

080080f2 <__hexdig_fun>:
 80080f2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80080f6:	2b09      	cmp	r3, #9
 80080f8:	d802      	bhi.n	8008100 <__hexdig_fun+0xe>
 80080fa:	3820      	subs	r0, #32
 80080fc:	b2c0      	uxtb	r0, r0
 80080fe:	4770      	bx	lr
 8008100:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008104:	2b05      	cmp	r3, #5
 8008106:	d801      	bhi.n	800810c <__hexdig_fun+0x1a>
 8008108:	3847      	subs	r0, #71	@ 0x47
 800810a:	e7f7      	b.n	80080fc <__hexdig_fun+0xa>
 800810c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008110:	2b05      	cmp	r3, #5
 8008112:	d801      	bhi.n	8008118 <__hexdig_fun+0x26>
 8008114:	3827      	subs	r0, #39	@ 0x27
 8008116:	e7f1      	b.n	80080fc <__hexdig_fun+0xa>
 8008118:	2000      	movs	r0, #0
 800811a:	4770      	bx	lr

0800811c <__gethex>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	468a      	mov	sl, r1
 8008122:	4690      	mov	r8, r2
 8008124:	b085      	sub	sp, #20
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	680b      	ldr	r3, [r1, #0]
 800812a:	9001      	str	r0, [sp, #4]
 800812c:	1c9c      	adds	r4, r3, #2
 800812e:	46a1      	mov	r9, r4
 8008130:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008134:	2830      	cmp	r0, #48	@ 0x30
 8008136:	d0fa      	beq.n	800812e <__gethex+0x12>
 8008138:	eba9 0303 	sub.w	r3, r9, r3
 800813c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008140:	f7ff ffd7 	bl	80080f2 <__hexdig_fun>
 8008144:	4605      	mov	r5, r0
 8008146:	2800      	cmp	r0, #0
 8008148:	d168      	bne.n	800821c <__gethex+0x100>
 800814a:	2201      	movs	r2, #1
 800814c:	4648      	mov	r0, r9
 800814e:	499f      	ldr	r1, [pc, #636]	@ (80083cc <__gethex+0x2b0>)
 8008150:	f7ff ff37 	bl	8007fc2 <strncmp>
 8008154:	4607      	mov	r7, r0
 8008156:	2800      	cmp	r0, #0
 8008158:	d167      	bne.n	800822a <__gethex+0x10e>
 800815a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800815e:	4626      	mov	r6, r4
 8008160:	f7ff ffc7 	bl	80080f2 <__hexdig_fun>
 8008164:	2800      	cmp	r0, #0
 8008166:	d062      	beq.n	800822e <__gethex+0x112>
 8008168:	4623      	mov	r3, r4
 800816a:	7818      	ldrb	r0, [r3, #0]
 800816c:	4699      	mov	r9, r3
 800816e:	2830      	cmp	r0, #48	@ 0x30
 8008170:	f103 0301 	add.w	r3, r3, #1
 8008174:	d0f9      	beq.n	800816a <__gethex+0x4e>
 8008176:	f7ff ffbc 	bl	80080f2 <__hexdig_fun>
 800817a:	fab0 f580 	clz	r5, r0
 800817e:	f04f 0b01 	mov.w	fp, #1
 8008182:	096d      	lsrs	r5, r5, #5
 8008184:	464a      	mov	r2, r9
 8008186:	4616      	mov	r6, r2
 8008188:	7830      	ldrb	r0, [r6, #0]
 800818a:	3201      	adds	r2, #1
 800818c:	f7ff ffb1 	bl	80080f2 <__hexdig_fun>
 8008190:	2800      	cmp	r0, #0
 8008192:	d1f8      	bne.n	8008186 <__gethex+0x6a>
 8008194:	2201      	movs	r2, #1
 8008196:	4630      	mov	r0, r6
 8008198:	498c      	ldr	r1, [pc, #560]	@ (80083cc <__gethex+0x2b0>)
 800819a:	f7ff ff12 	bl	8007fc2 <strncmp>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d13f      	bne.n	8008222 <__gethex+0x106>
 80081a2:	b944      	cbnz	r4, 80081b6 <__gethex+0x9a>
 80081a4:	1c74      	adds	r4, r6, #1
 80081a6:	4622      	mov	r2, r4
 80081a8:	4616      	mov	r6, r2
 80081aa:	7830      	ldrb	r0, [r6, #0]
 80081ac:	3201      	adds	r2, #1
 80081ae:	f7ff ffa0 	bl	80080f2 <__hexdig_fun>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d1f8      	bne.n	80081a8 <__gethex+0x8c>
 80081b6:	1ba4      	subs	r4, r4, r6
 80081b8:	00a7      	lsls	r7, r4, #2
 80081ba:	7833      	ldrb	r3, [r6, #0]
 80081bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80081c0:	2b50      	cmp	r3, #80	@ 0x50
 80081c2:	d13e      	bne.n	8008242 <__gethex+0x126>
 80081c4:	7873      	ldrb	r3, [r6, #1]
 80081c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80081c8:	d033      	beq.n	8008232 <__gethex+0x116>
 80081ca:	2b2d      	cmp	r3, #45	@ 0x2d
 80081cc:	d034      	beq.n	8008238 <__gethex+0x11c>
 80081ce:	2400      	movs	r4, #0
 80081d0:	1c71      	adds	r1, r6, #1
 80081d2:	7808      	ldrb	r0, [r1, #0]
 80081d4:	f7ff ff8d 	bl	80080f2 <__hexdig_fun>
 80081d8:	1e43      	subs	r3, r0, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b18      	cmp	r3, #24
 80081de:	d830      	bhi.n	8008242 <__gethex+0x126>
 80081e0:	f1a0 0210 	sub.w	r2, r0, #16
 80081e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081e8:	f7ff ff83 	bl	80080f2 <__hexdig_fun>
 80081ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80081f0:	fa5f fc8c 	uxtb.w	ip, ip
 80081f4:	f1bc 0f18 	cmp.w	ip, #24
 80081f8:	f04f 030a 	mov.w	r3, #10
 80081fc:	d91e      	bls.n	800823c <__gethex+0x120>
 80081fe:	b104      	cbz	r4, 8008202 <__gethex+0xe6>
 8008200:	4252      	negs	r2, r2
 8008202:	4417      	add	r7, r2
 8008204:	f8ca 1000 	str.w	r1, [sl]
 8008208:	b1ed      	cbz	r5, 8008246 <__gethex+0x12a>
 800820a:	f1bb 0f00 	cmp.w	fp, #0
 800820e:	bf0c      	ite	eq
 8008210:	2506      	moveq	r5, #6
 8008212:	2500      	movne	r5, #0
 8008214:	4628      	mov	r0, r5
 8008216:	b005      	add	sp, #20
 8008218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821c:	2500      	movs	r5, #0
 800821e:	462c      	mov	r4, r5
 8008220:	e7b0      	b.n	8008184 <__gethex+0x68>
 8008222:	2c00      	cmp	r4, #0
 8008224:	d1c7      	bne.n	80081b6 <__gethex+0x9a>
 8008226:	4627      	mov	r7, r4
 8008228:	e7c7      	b.n	80081ba <__gethex+0x9e>
 800822a:	464e      	mov	r6, r9
 800822c:	462f      	mov	r7, r5
 800822e:	2501      	movs	r5, #1
 8008230:	e7c3      	b.n	80081ba <__gethex+0x9e>
 8008232:	2400      	movs	r4, #0
 8008234:	1cb1      	adds	r1, r6, #2
 8008236:	e7cc      	b.n	80081d2 <__gethex+0xb6>
 8008238:	2401      	movs	r4, #1
 800823a:	e7fb      	b.n	8008234 <__gethex+0x118>
 800823c:	fb03 0002 	mla	r0, r3, r2, r0
 8008240:	e7ce      	b.n	80081e0 <__gethex+0xc4>
 8008242:	4631      	mov	r1, r6
 8008244:	e7de      	b.n	8008204 <__gethex+0xe8>
 8008246:	4629      	mov	r1, r5
 8008248:	eba6 0309 	sub.w	r3, r6, r9
 800824c:	3b01      	subs	r3, #1
 800824e:	2b07      	cmp	r3, #7
 8008250:	dc0a      	bgt.n	8008268 <__gethex+0x14c>
 8008252:	9801      	ldr	r0, [sp, #4]
 8008254:	f000 fa46 	bl	80086e4 <_Balloc>
 8008258:	4604      	mov	r4, r0
 800825a:	b940      	cbnz	r0, 800826e <__gethex+0x152>
 800825c:	4602      	mov	r2, r0
 800825e:	21e4      	movs	r1, #228	@ 0xe4
 8008260:	4b5b      	ldr	r3, [pc, #364]	@ (80083d0 <__gethex+0x2b4>)
 8008262:	485c      	ldr	r0, [pc, #368]	@ (80083d4 <__gethex+0x2b8>)
 8008264:	f000 ff90 	bl	8009188 <__assert_func>
 8008268:	3101      	adds	r1, #1
 800826a:	105b      	asrs	r3, r3, #1
 800826c:	e7ef      	b.n	800824e <__gethex+0x132>
 800826e:	2300      	movs	r3, #0
 8008270:	f100 0a14 	add.w	sl, r0, #20
 8008274:	4655      	mov	r5, sl
 8008276:	469b      	mov	fp, r3
 8008278:	45b1      	cmp	r9, r6
 800827a:	d337      	bcc.n	80082ec <__gethex+0x1d0>
 800827c:	f845 bb04 	str.w	fp, [r5], #4
 8008280:	eba5 050a 	sub.w	r5, r5, sl
 8008284:	10ad      	asrs	r5, r5, #2
 8008286:	6125      	str	r5, [r4, #16]
 8008288:	4658      	mov	r0, fp
 800828a:	f000 fb1d 	bl	80088c8 <__hi0bits>
 800828e:	016d      	lsls	r5, r5, #5
 8008290:	f8d8 6000 	ldr.w	r6, [r8]
 8008294:	1a2d      	subs	r5, r5, r0
 8008296:	42b5      	cmp	r5, r6
 8008298:	dd54      	ble.n	8008344 <__gethex+0x228>
 800829a:	1bad      	subs	r5, r5, r6
 800829c:	4629      	mov	r1, r5
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 fea5 	bl	8008fee <__any_on>
 80082a4:	4681      	mov	r9, r0
 80082a6:	b178      	cbz	r0, 80082c8 <__gethex+0x1ac>
 80082a8:	f04f 0901 	mov.w	r9, #1
 80082ac:	1e6b      	subs	r3, r5, #1
 80082ae:	1159      	asrs	r1, r3, #5
 80082b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80082b4:	f003 021f 	and.w	r2, r3, #31
 80082b8:	fa09 f202 	lsl.w	r2, r9, r2
 80082bc:	420a      	tst	r2, r1
 80082be:	d003      	beq.n	80082c8 <__gethex+0x1ac>
 80082c0:	454b      	cmp	r3, r9
 80082c2:	dc36      	bgt.n	8008332 <__gethex+0x216>
 80082c4:	f04f 0902 	mov.w	r9, #2
 80082c8:	4629      	mov	r1, r5
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7ff febe 	bl	800804c <rshift>
 80082d0:	442f      	add	r7, r5
 80082d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082d6:	42bb      	cmp	r3, r7
 80082d8:	da42      	bge.n	8008360 <__gethex+0x244>
 80082da:	4621      	mov	r1, r4
 80082dc:	9801      	ldr	r0, [sp, #4]
 80082de:	f000 fa41 	bl	8008764 <_Bfree>
 80082e2:	2300      	movs	r3, #0
 80082e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082e6:	25a3      	movs	r5, #163	@ 0xa3
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	e793      	b.n	8008214 <__gethex+0xf8>
 80082ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80082f0:	2a2e      	cmp	r2, #46	@ 0x2e
 80082f2:	d012      	beq.n	800831a <__gethex+0x1fe>
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d104      	bne.n	8008302 <__gethex+0x1e6>
 80082f8:	f845 bb04 	str.w	fp, [r5], #4
 80082fc:	f04f 0b00 	mov.w	fp, #0
 8008300:	465b      	mov	r3, fp
 8008302:	7830      	ldrb	r0, [r6, #0]
 8008304:	9303      	str	r3, [sp, #12]
 8008306:	f7ff fef4 	bl	80080f2 <__hexdig_fun>
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	f000 000f 	and.w	r0, r0, #15
 8008310:	4098      	lsls	r0, r3
 8008312:	ea4b 0b00 	orr.w	fp, fp, r0
 8008316:	3304      	adds	r3, #4
 8008318:	e7ae      	b.n	8008278 <__gethex+0x15c>
 800831a:	45b1      	cmp	r9, r6
 800831c:	d8ea      	bhi.n	80082f4 <__gethex+0x1d8>
 800831e:	2201      	movs	r2, #1
 8008320:	4630      	mov	r0, r6
 8008322:	492a      	ldr	r1, [pc, #168]	@ (80083cc <__gethex+0x2b0>)
 8008324:	9303      	str	r3, [sp, #12]
 8008326:	f7ff fe4c 	bl	8007fc2 <strncmp>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	2800      	cmp	r0, #0
 800832e:	d1e1      	bne.n	80082f4 <__gethex+0x1d8>
 8008330:	e7a2      	b.n	8008278 <__gethex+0x15c>
 8008332:	4620      	mov	r0, r4
 8008334:	1ea9      	subs	r1, r5, #2
 8008336:	f000 fe5a 	bl	8008fee <__any_on>
 800833a:	2800      	cmp	r0, #0
 800833c:	d0c2      	beq.n	80082c4 <__gethex+0x1a8>
 800833e:	f04f 0903 	mov.w	r9, #3
 8008342:	e7c1      	b.n	80082c8 <__gethex+0x1ac>
 8008344:	da09      	bge.n	800835a <__gethex+0x23e>
 8008346:	1b75      	subs	r5, r6, r5
 8008348:	4621      	mov	r1, r4
 800834a:	462a      	mov	r2, r5
 800834c:	9801      	ldr	r0, [sp, #4]
 800834e:	f000 fc1f 	bl	8008b90 <__lshift>
 8008352:	4604      	mov	r4, r0
 8008354:	1b7f      	subs	r7, r7, r5
 8008356:	f100 0a14 	add.w	sl, r0, #20
 800835a:	f04f 0900 	mov.w	r9, #0
 800835e:	e7b8      	b.n	80082d2 <__gethex+0x1b6>
 8008360:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008364:	42bd      	cmp	r5, r7
 8008366:	dd6f      	ble.n	8008448 <__gethex+0x32c>
 8008368:	1bed      	subs	r5, r5, r7
 800836a:	42ae      	cmp	r6, r5
 800836c:	dc34      	bgt.n	80083d8 <__gethex+0x2bc>
 800836e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d022      	beq.n	80083bc <__gethex+0x2a0>
 8008376:	2b03      	cmp	r3, #3
 8008378:	d024      	beq.n	80083c4 <__gethex+0x2a8>
 800837a:	2b01      	cmp	r3, #1
 800837c:	d115      	bne.n	80083aa <__gethex+0x28e>
 800837e:	42ae      	cmp	r6, r5
 8008380:	d113      	bne.n	80083aa <__gethex+0x28e>
 8008382:	2e01      	cmp	r6, #1
 8008384:	d10b      	bne.n	800839e <__gethex+0x282>
 8008386:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800838a:	9a02      	ldr	r2, [sp, #8]
 800838c:	2562      	movs	r5, #98	@ 0x62
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	2301      	movs	r3, #1
 8008392:	6123      	str	r3, [r4, #16]
 8008394:	f8ca 3000 	str.w	r3, [sl]
 8008398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800839a:	601c      	str	r4, [r3, #0]
 800839c:	e73a      	b.n	8008214 <__gethex+0xf8>
 800839e:	4620      	mov	r0, r4
 80083a0:	1e71      	subs	r1, r6, #1
 80083a2:	f000 fe24 	bl	8008fee <__any_on>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d1ed      	bne.n	8008386 <__gethex+0x26a>
 80083aa:	4621      	mov	r1, r4
 80083ac:	9801      	ldr	r0, [sp, #4]
 80083ae:	f000 f9d9 	bl	8008764 <_Bfree>
 80083b2:	2300      	movs	r3, #0
 80083b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083b6:	2550      	movs	r5, #80	@ 0x50
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	e72b      	b.n	8008214 <__gethex+0xf8>
 80083bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f3      	bne.n	80083aa <__gethex+0x28e>
 80083c2:	e7e0      	b.n	8008386 <__gethex+0x26a>
 80083c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1dd      	bne.n	8008386 <__gethex+0x26a>
 80083ca:	e7ee      	b.n	80083aa <__gethex+0x28e>
 80083cc:	0800981b 	.word	0x0800981b
 80083d0:	080099d7 	.word	0x080099d7
 80083d4:	080099e8 	.word	0x080099e8
 80083d8:	1e6f      	subs	r7, r5, #1
 80083da:	f1b9 0f00 	cmp.w	r9, #0
 80083de:	d130      	bne.n	8008442 <__gethex+0x326>
 80083e0:	b127      	cbz	r7, 80083ec <__gethex+0x2d0>
 80083e2:	4639      	mov	r1, r7
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 fe02 	bl	8008fee <__any_on>
 80083ea:	4681      	mov	r9, r0
 80083ec:	2301      	movs	r3, #1
 80083ee:	4629      	mov	r1, r5
 80083f0:	1b76      	subs	r6, r6, r5
 80083f2:	2502      	movs	r5, #2
 80083f4:	117a      	asrs	r2, r7, #5
 80083f6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80083fa:	f007 071f 	and.w	r7, r7, #31
 80083fe:	40bb      	lsls	r3, r7
 8008400:	4213      	tst	r3, r2
 8008402:	4620      	mov	r0, r4
 8008404:	bf18      	it	ne
 8008406:	f049 0902 	orrne.w	r9, r9, #2
 800840a:	f7ff fe1f 	bl	800804c <rshift>
 800840e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008412:	f1b9 0f00 	cmp.w	r9, #0
 8008416:	d047      	beq.n	80084a8 <__gethex+0x38c>
 8008418:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d015      	beq.n	800844c <__gethex+0x330>
 8008420:	2b03      	cmp	r3, #3
 8008422:	d017      	beq.n	8008454 <__gethex+0x338>
 8008424:	2b01      	cmp	r3, #1
 8008426:	d109      	bne.n	800843c <__gethex+0x320>
 8008428:	f019 0f02 	tst.w	r9, #2
 800842c:	d006      	beq.n	800843c <__gethex+0x320>
 800842e:	f8da 3000 	ldr.w	r3, [sl]
 8008432:	ea49 0903 	orr.w	r9, r9, r3
 8008436:	f019 0f01 	tst.w	r9, #1
 800843a:	d10e      	bne.n	800845a <__gethex+0x33e>
 800843c:	f045 0510 	orr.w	r5, r5, #16
 8008440:	e032      	b.n	80084a8 <__gethex+0x38c>
 8008442:	f04f 0901 	mov.w	r9, #1
 8008446:	e7d1      	b.n	80083ec <__gethex+0x2d0>
 8008448:	2501      	movs	r5, #1
 800844a:	e7e2      	b.n	8008412 <__gethex+0x2f6>
 800844c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800844e:	f1c3 0301 	rsb	r3, r3, #1
 8008452:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f0      	beq.n	800843c <__gethex+0x320>
 800845a:	f04f 0c00 	mov.w	ip, #0
 800845e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008462:	f104 0314 	add.w	r3, r4, #20
 8008466:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800846a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800846e:	4618      	mov	r0, r3
 8008470:	f853 2b04 	ldr.w	r2, [r3], #4
 8008474:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008478:	d01b      	beq.n	80084b2 <__gethex+0x396>
 800847a:	3201      	adds	r2, #1
 800847c:	6002      	str	r2, [r0, #0]
 800847e:	2d02      	cmp	r5, #2
 8008480:	f104 0314 	add.w	r3, r4, #20
 8008484:	d13c      	bne.n	8008500 <__gethex+0x3e4>
 8008486:	f8d8 2000 	ldr.w	r2, [r8]
 800848a:	3a01      	subs	r2, #1
 800848c:	42b2      	cmp	r2, r6
 800848e:	d109      	bne.n	80084a4 <__gethex+0x388>
 8008490:	2201      	movs	r2, #1
 8008492:	1171      	asrs	r1, r6, #5
 8008494:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008498:	f006 061f 	and.w	r6, r6, #31
 800849c:	fa02 f606 	lsl.w	r6, r2, r6
 80084a0:	421e      	tst	r6, r3
 80084a2:	d13a      	bne.n	800851a <__gethex+0x3fe>
 80084a4:	f045 0520 	orr.w	r5, r5, #32
 80084a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084aa:	601c      	str	r4, [r3, #0]
 80084ac:	9b02      	ldr	r3, [sp, #8]
 80084ae:	601f      	str	r7, [r3, #0]
 80084b0:	e6b0      	b.n	8008214 <__gethex+0xf8>
 80084b2:	4299      	cmp	r1, r3
 80084b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80084b8:	d8d9      	bhi.n	800846e <__gethex+0x352>
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	459b      	cmp	fp, r3
 80084be:	db17      	blt.n	80084f0 <__gethex+0x3d4>
 80084c0:	6861      	ldr	r1, [r4, #4]
 80084c2:	9801      	ldr	r0, [sp, #4]
 80084c4:	3101      	adds	r1, #1
 80084c6:	f000 f90d 	bl	80086e4 <_Balloc>
 80084ca:	4681      	mov	r9, r0
 80084cc:	b918      	cbnz	r0, 80084d6 <__gethex+0x3ba>
 80084ce:	4602      	mov	r2, r0
 80084d0:	2184      	movs	r1, #132	@ 0x84
 80084d2:	4b19      	ldr	r3, [pc, #100]	@ (8008538 <__gethex+0x41c>)
 80084d4:	e6c5      	b.n	8008262 <__gethex+0x146>
 80084d6:	6922      	ldr	r2, [r4, #16]
 80084d8:	f104 010c 	add.w	r1, r4, #12
 80084dc:	3202      	adds	r2, #2
 80084de:	0092      	lsls	r2, r2, #2
 80084e0:	300c      	adds	r0, #12
 80084e2:	f7ff fd9f 	bl	8008024 <memcpy>
 80084e6:	4621      	mov	r1, r4
 80084e8:	9801      	ldr	r0, [sp, #4]
 80084ea:	f000 f93b 	bl	8008764 <_Bfree>
 80084ee:	464c      	mov	r4, r9
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	6122      	str	r2, [r4, #16]
 80084f6:	2201      	movs	r2, #1
 80084f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084fc:	615a      	str	r2, [r3, #20]
 80084fe:	e7be      	b.n	800847e <__gethex+0x362>
 8008500:	6922      	ldr	r2, [r4, #16]
 8008502:	455a      	cmp	r2, fp
 8008504:	dd0b      	ble.n	800851e <__gethex+0x402>
 8008506:	2101      	movs	r1, #1
 8008508:	4620      	mov	r0, r4
 800850a:	f7ff fd9f 	bl	800804c <rshift>
 800850e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008512:	3701      	adds	r7, #1
 8008514:	42bb      	cmp	r3, r7
 8008516:	f6ff aee0 	blt.w	80082da <__gethex+0x1be>
 800851a:	2501      	movs	r5, #1
 800851c:	e7c2      	b.n	80084a4 <__gethex+0x388>
 800851e:	f016 061f 	ands.w	r6, r6, #31
 8008522:	d0fa      	beq.n	800851a <__gethex+0x3fe>
 8008524:	4453      	add	r3, sl
 8008526:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800852a:	f000 f9cd 	bl	80088c8 <__hi0bits>
 800852e:	f1c6 0620 	rsb	r6, r6, #32
 8008532:	42b0      	cmp	r0, r6
 8008534:	dbe7      	blt.n	8008506 <__gethex+0x3ea>
 8008536:	e7f0      	b.n	800851a <__gethex+0x3fe>
 8008538:	080099d7 	.word	0x080099d7

0800853c <L_shift>:
 800853c:	f1c2 0208 	rsb	r2, r2, #8
 8008540:	0092      	lsls	r2, r2, #2
 8008542:	b570      	push	{r4, r5, r6, lr}
 8008544:	f1c2 0620 	rsb	r6, r2, #32
 8008548:	6843      	ldr	r3, [r0, #4]
 800854a:	6804      	ldr	r4, [r0, #0]
 800854c:	fa03 f506 	lsl.w	r5, r3, r6
 8008550:	432c      	orrs	r4, r5
 8008552:	40d3      	lsrs	r3, r2
 8008554:	6004      	str	r4, [r0, #0]
 8008556:	f840 3f04 	str.w	r3, [r0, #4]!
 800855a:	4288      	cmp	r0, r1
 800855c:	d3f4      	bcc.n	8008548 <L_shift+0xc>
 800855e:	bd70      	pop	{r4, r5, r6, pc}

08008560 <__match>:
 8008560:	b530      	push	{r4, r5, lr}
 8008562:	6803      	ldr	r3, [r0, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800856a:	b914      	cbnz	r4, 8008572 <__match+0x12>
 800856c:	6003      	str	r3, [r0, #0]
 800856e:	2001      	movs	r0, #1
 8008570:	bd30      	pop	{r4, r5, pc}
 8008572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008576:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800857a:	2d19      	cmp	r5, #25
 800857c:	bf98      	it	ls
 800857e:	3220      	addls	r2, #32
 8008580:	42a2      	cmp	r2, r4
 8008582:	d0f0      	beq.n	8008566 <__match+0x6>
 8008584:	2000      	movs	r0, #0
 8008586:	e7f3      	b.n	8008570 <__match+0x10>

08008588 <__hexnan>:
 8008588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	2500      	movs	r5, #0
 800858e:	680b      	ldr	r3, [r1, #0]
 8008590:	4682      	mov	sl, r0
 8008592:	115e      	asrs	r6, r3, #5
 8008594:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008598:	f013 031f 	ands.w	r3, r3, #31
 800859c:	bf18      	it	ne
 800859e:	3604      	addne	r6, #4
 80085a0:	1f37      	subs	r7, r6, #4
 80085a2:	4690      	mov	r8, r2
 80085a4:	46b9      	mov	r9, r7
 80085a6:	463c      	mov	r4, r7
 80085a8:	46ab      	mov	fp, r5
 80085aa:	b087      	sub	sp, #28
 80085ac:	6801      	ldr	r1, [r0, #0]
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	f846 5c04 	str.w	r5, [r6, #-4]
 80085b4:	9502      	str	r5, [sp, #8]
 80085b6:	784a      	ldrb	r2, [r1, #1]
 80085b8:	1c4b      	adds	r3, r1, #1
 80085ba:	9303      	str	r3, [sp, #12]
 80085bc:	b342      	cbz	r2, 8008610 <__hexnan+0x88>
 80085be:	4610      	mov	r0, r2
 80085c0:	9105      	str	r1, [sp, #20]
 80085c2:	9204      	str	r2, [sp, #16]
 80085c4:	f7ff fd95 	bl	80080f2 <__hexdig_fun>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d151      	bne.n	8008670 <__hexnan+0xe8>
 80085cc:	9a04      	ldr	r2, [sp, #16]
 80085ce:	9905      	ldr	r1, [sp, #20]
 80085d0:	2a20      	cmp	r2, #32
 80085d2:	d818      	bhi.n	8008606 <__hexnan+0x7e>
 80085d4:	9b02      	ldr	r3, [sp, #8]
 80085d6:	459b      	cmp	fp, r3
 80085d8:	dd13      	ble.n	8008602 <__hexnan+0x7a>
 80085da:	454c      	cmp	r4, r9
 80085dc:	d206      	bcs.n	80085ec <__hexnan+0x64>
 80085de:	2d07      	cmp	r5, #7
 80085e0:	dc04      	bgt.n	80085ec <__hexnan+0x64>
 80085e2:	462a      	mov	r2, r5
 80085e4:	4649      	mov	r1, r9
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7ff ffa8 	bl	800853c <L_shift>
 80085ec:	4544      	cmp	r4, r8
 80085ee:	d952      	bls.n	8008696 <__hexnan+0x10e>
 80085f0:	2300      	movs	r3, #0
 80085f2:	f1a4 0904 	sub.w	r9, r4, #4
 80085f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80085fa:	461d      	mov	r5, r3
 80085fc:	464c      	mov	r4, r9
 80085fe:	f8cd b008 	str.w	fp, [sp, #8]
 8008602:	9903      	ldr	r1, [sp, #12]
 8008604:	e7d7      	b.n	80085b6 <__hexnan+0x2e>
 8008606:	2a29      	cmp	r2, #41	@ 0x29
 8008608:	d157      	bne.n	80086ba <__hexnan+0x132>
 800860a:	3102      	adds	r1, #2
 800860c:	f8ca 1000 	str.w	r1, [sl]
 8008610:	f1bb 0f00 	cmp.w	fp, #0
 8008614:	d051      	beq.n	80086ba <__hexnan+0x132>
 8008616:	454c      	cmp	r4, r9
 8008618:	d206      	bcs.n	8008628 <__hexnan+0xa0>
 800861a:	2d07      	cmp	r5, #7
 800861c:	dc04      	bgt.n	8008628 <__hexnan+0xa0>
 800861e:	462a      	mov	r2, r5
 8008620:	4649      	mov	r1, r9
 8008622:	4620      	mov	r0, r4
 8008624:	f7ff ff8a 	bl	800853c <L_shift>
 8008628:	4544      	cmp	r4, r8
 800862a:	d936      	bls.n	800869a <__hexnan+0x112>
 800862c:	4623      	mov	r3, r4
 800862e:	f1a8 0204 	sub.w	r2, r8, #4
 8008632:	f853 1b04 	ldr.w	r1, [r3], #4
 8008636:	429f      	cmp	r7, r3
 8008638:	f842 1f04 	str.w	r1, [r2, #4]!
 800863c:	d2f9      	bcs.n	8008632 <__hexnan+0xaa>
 800863e:	1b3b      	subs	r3, r7, r4
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	3304      	adds	r3, #4
 8008646:	3401      	adds	r4, #1
 8008648:	3e03      	subs	r6, #3
 800864a:	42b4      	cmp	r4, r6
 800864c:	bf88      	it	hi
 800864e:	2304      	movhi	r3, #4
 8008650:	2200      	movs	r2, #0
 8008652:	4443      	add	r3, r8
 8008654:	f843 2b04 	str.w	r2, [r3], #4
 8008658:	429f      	cmp	r7, r3
 800865a:	d2fb      	bcs.n	8008654 <__hexnan+0xcc>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	b91b      	cbnz	r3, 8008668 <__hexnan+0xe0>
 8008660:	4547      	cmp	r7, r8
 8008662:	d128      	bne.n	80086b6 <__hexnan+0x12e>
 8008664:	2301      	movs	r3, #1
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	2005      	movs	r0, #5
 800866a:	b007      	add	sp, #28
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008670:	3501      	adds	r5, #1
 8008672:	2d08      	cmp	r5, #8
 8008674:	f10b 0b01 	add.w	fp, fp, #1
 8008678:	dd06      	ble.n	8008688 <__hexnan+0x100>
 800867a:	4544      	cmp	r4, r8
 800867c:	d9c1      	bls.n	8008602 <__hexnan+0x7a>
 800867e:	2300      	movs	r3, #0
 8008680:	2501      	movs	r5, #1
 8008682:	f844 3c04 	str.w	r3, [r4, #-4]
 8008686:	3c04      	subs	r4, #4
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	f000 000f 	and.w	r0, r0, #15
 800868e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008692:	6020      	str	r0, [r4, #0]
 8008694:	e7b5      	b.n	8008602 <__hexnan+0x7a>
 8008696:	2508      	movs	r5, #8
 8008698:	e7b3      	b.n	8008602 <__hexnan+0x7a>
 800869a:	9b01      	ldr	r3, [sp, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0dd      	beq.n	800865c <__hexnan+0xd4>
 80086a0:	f04f 32ff 	mov.w	r2, #4294967295
 80086a4:	f1c3 0320 	rsb	r3, r3, #32
 80086a8:	40da      	lsrs	r2, r3
 80086aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80086ae:	4013      	ands	r3, r2
 80086b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80086b4:	e7d2      	b.n	800865c <__hexnan+0xd4>
 80086b6:	3f04      	subs	r7, #4
 80086b8:	e7d0      	b.n	800865c <__hexnan+0xd4>
 80086ba:	2004      	movs	r0, #4
 80086bc:	e7d5      	b.n	800866a <__hexnan+0xe2>

080086be <__ascii_mbtowc>:
 80086be:	b082      	sub	sp, #8
 80086c0:	b901      	cbnz	r1, 80086c4 <__ascii_mbtowc+0x6>
 80086c2:	a901      	add	r1, sp, #4
 80086c4:	b142      	cbz	r2, 80086d8 <__ascii_mbtowc+0x1a>
 80086c6:	b14b      	cbz	r3, 80086dc <__ascii_mbtowc+0x1e>
 80086c8:	7813      	ldrb	r3, [r2, #0]
 80086ca:	600b      	str	r3, [r1, #0]
 80086cc:	7812      	ldrb	r2, [r2, #0]
 80086ce:	1e10      	subs	r0, r2, #0
 80086d0:	bf18      	it	ne
 80086d2:	2001      	movne	r0, #1
 80086d4:	b002      	add	sp, #8
 80086d6:	4770      	bx	lr
 80086d8:	4610      	mov	r0, r2
 80086da:	e7fb      	b.n	80086d4 <__ascii_mbtowc+0x16>
 80086dc:	f06f 0001 	mvn.w	r0, #1
 80086e0:	e7f8      	b.n	80086d4 <__ascii_mbtowc+0x16>
	...

080086e4 <_Balloc>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	69c6      	ldr	r6, [r0, #28]
 80086e8:	4604      	mov	r4, r0
 80086ea:	460d      	mov	r5, r1
 80086ec:	b976      	cbnz	r6, 800870c <_Balloc+0x28>
 80086ee:	2010      	movs	r0, #16
 80086f0:	f000 fd7c 	bl	80091ec <malloc>
 80086f4:	4602      	mov	r2, r0
 80086f6:	61e0      	str	r0, [r4, #28]
 80086f8:	b920      	cbnz	r0, 8008704 <_Balloc+0x20>
 80086fa:	216b      	movs	r1, #107	@ 0x6b
 80086fc:	4b17      	ldr	r3, [pc, #92]	@ (800875c <_Balloc+0x78>)
 80086fe:	4818      	ldr	r0, [pc, #96]	@ (8008760 <_Balloc+0x7c>)
 8008700:	f000 fd42 	bl	8009188 <__assert_func>
 8008704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008708:	6006      	str	r6, [r0, #0]
 800870a:	60c6      	str	r6, [r0, #12]
 800870c:	69e6      	ldr	r6, [r4, #28]
 800870e:	68f3      	ldr	r3, [r6, #12]
 8008710:	b183      	cbz	r3, 8008734 <_Balloc+0x50>
 8008712:	69e3      	ldr	r3, [r4, #28]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800871a:	b9b8      	cbnz	r0, 800874c <_Balloc+0x68>
 800871c:	2101      	movs	r1, #1
 800871e:	fa01 f605 	lsl.w	r6, r1, r5
 8008722:	1d72      	adds	r2, r6, #5
 8008724:	4620      	mov	r0, r4
 8008726:	0092      	lsls	r2, r2, #2
 8008728:	f000 fd4c 	bl	80091c4 <_calloc_r>
 800872c:	b160      	cbz	r0, 8008748 <_Balloc+0x64>
 800872e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008732:	e00e      	b.n	8008752 <_Balloc+0x6e>
 8008734:	2221      	movs	r2, #33	@ 0x21
 8008736:	2104      	movs	r1, #4
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fd43 	bl	80091c4 <_calloc_r>
 800873e:	69e3      	ldr	r3, [r4, #28]
 8008740:	60f0      	str	r0, [r6, #12]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e4      	bne.n	8008712 <_Balloc+0x2e>
 8008748:	2000      	movs	r0, #0
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	6802      	ldr	r2, [r0, #0]
 800874e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008752:	2300      	movs	r3, #0
 8008754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008758:	e7f7      	b.n	800874a <_Balloc+0x66>
 800875a:	bf00      	nop
 800875c:	08009a48 	.word	0x08009a48
 8008760:	08009a5f 	.word	0x08009a5f

08008764 <_Bfree>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	69c6      	ldr	r6, [r0, #28]
 8008768:	4605      	mov	r5, r0
 800876a:	460c      	mov	r4, r1
 800876c:	b976      	cbnz	r6, 800878c <_Bfree+0x28>
 800876e:	2010      	movs	r0, #16
 8008770:	f000 fd3c 	bl	80091ec <malloc>
 8008774:	4602      	mov	r2, r0
 8008776:	61e8      	str	r0, [r5, #28]
 8008778:	b920      	cbnz	r0, 8008784 <_Bfree+0x20>
 800877a:	218f      	movs	r1, #143	@ 0x8f
 800877c:	4b08      	ldr	r3, [pc, #32]	@ (80087a0 <_Bfree+0x3c>)
 800877e:	4809      	ldr	r0, [pc, #36]	@ (80087a4 <_Bfree+0x40>)
 8008780:	f000 fd02 	bl	8009188 <__assert_func>
 8008784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008788:	6006      	str	r6, [r0, #0]
 800878a:	60c6      	str	r6, [r0, #12]
 800878c:	b13c      	cbz	r4, 800879e <_Bfree+0x3a>
 800878e:	69eb      	ldr	r3, [r5, #28]
 8008790:	6862      	ldr	r2, [r4, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008798:	6021      	str	r1, [r4, #0]
 800879a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	08009a48 	.word	0x08009a48
 80087a4:	08009a5f 	.word	0x08009a5f

080087a8 <__multadd>:
 80087a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ac:	4607      	mov	r7, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	461e      	mov	r6, r3
 80087b2:	2000      	movs	r0, #0
 80087b4:	690d      	ldr	r5, [r1, #16]
 80087b6:	f101 0c14 	add.w	ip, r1, #20
 80087ba:	f8dc 3000 	ldr.w	r3, [ip]
 80087be:	3001      	adds	r0, #1
 80087c0:	b299      	uxth	r1, r3
 80087c2:	fb02 6101 	mla	r1, r2, r1, r6
 80087c6:	0c1e      	lsrs	r6, r3, #16
 80087c8:	0c0b      	lsrs	r3, r1, #16
 80087ca:	fb02 3306 	mla	r3, r2, r6, r3
 80087ce:	b289      	uxth	r1, r1
 80087d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087d4:	4285      	cmp	r5, r0
 80087d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087da:	f84c 1b04 	str.w	r1, [ip], #4
 80087de:	dcec      	bgt.n	80087ba <__multadd+0x12>
 80087e0:	b30e      	cbz	r6, 8008826 <__multadd+0x7e>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	42ab      	cmp	r3, r5
 80087e6:	dc19      	bgt.n	800881c <__multadd+0x74>
 80087e8:	6861      	ldr	r1, [r4, #4]
 80087ea:	4638      	mov	r0, r7
 80087ec:	3101      	adds	r1, #1
 80087ee:	f7ff ff79 	bl	80086e4 <_Balloc>
 80087f2:	4680      	mov	r8, r0
 80087f4:	b928      	cbnz	r0, 8008802 <__multadd+0x5a>
 80087f6:	4602      	mov	r2, r0
 80087f8:	21ba      	movs	r1, #186	@ 0xba
 80087fa:	4b0c      	ldr	r3, [pc, #48]	@ (800882c <__multadd+0x84>)
 80087fc:	480c      	ldr	r0, [pc, #48]	@ (8008830 <__multadd+0x88>)
 80087fe:	f000 fcc3 	bl	8009188 <__assert_func>
 8008802:	6922      	ldr	r2, [r4, #16]
 8008804:	f104 010c 	add.w	r1, r4, #12
 8008808:	3202      	adds	r2, #2
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	300c      	adds	r0, #12
 800880e:	f7ff fc09 	bl	8008024 <memcpy>
 8008812:	4621      	mov	r1, r4
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff ffa5 	bl	8008764 <_Bfree>
 800881a:	4644      	mov	r4, r8
 800881c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008820:	3501      	adds	r5, #1
 8008822:	615e      	str	r6, [r3, #20]
 8008824:	6125      	str	r5, [r4, #16]
 8008826:	4620      	mov	r0, r4
 8008828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882c:	080099d7 	.word	0x080099d7
 8008830:	08009a5f 	.word	0x08009a5f

08008834 <__s2b>:
 8008834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008838:	4615      	mov	r5, r2
 800883a:	2209      	movs	r2, #9
 800883c:	461f      	mov	r7, r3
 800883e:	3308      	adds	r3, #8
 8008840:	460c      	mov	r4, r1
 8008842:	fb93 f3f2 	sdiv	r3, r3, r2
 8008846:	4606      	mov	r6, r0
 8008848:	2201      	movs	r2, #1
 800884a:	2100      	movs	r1, #0
 800884c:	429a      	cmp	r2, r3
 800884e:	db09      	blt.n	8008864 <__s2b+0x30>
 8008850:	4630      	mov	r0, r6
 8008852:	f7ff ff47 	bl	80086e4 <_Balloc>
 8008856:	b940      	cbnz	r0, 800886a <__s2b+0x36>
 8008858:	4602      	mov	r2, r0
 800885a:	21d3      	movs	r1, #211	@ 0xd3
 800885c:	4b18      	ldr	r3, [pc, #96]	@ (80088c0 <__s2b+0x8c>)
 800885e:	4819      	ldr	r0, [pc, #100]	@ (80088c4 <__s2b+0x90>)
 8008860:	f000 fc92 	bl	8009188 <__assert_func>
 8008864:	0052      	lsls	r2, r2, #1
 8008866:	3101      	adds	r1, #1
 8008868:	e7f0      	b.n	800884c <__s2b+0x18>
 800886a:	9b08      	ldr	r3, [sp, #32]
 800886c:	2d09      	cmp	r5, #9
 800886e:	6143      	str	r3, [r0, #20]
 8008870:	f04f 0301 	mov.w	r3, #1
 8008874:	6103      	str	r3, [r0, #16]
 8008876:	dd16      	ble.n	80088a6 <__s2b+0x72>
 8008878:	f104 0909 	add.w	r9, r4, #9
 800887c:	46c8      	mov	r8, r9
 800887e:	442c      	add	r4, r5
 8008880:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008884:	4601      	mov	r1, r0
 8008886:	220a      	movs	r2, #10
 8008888:	4630      	mov	r0, r6
 800888a:	3b30      	subs	r3, #48	@ 0x30
 800888c:	f7ff ff8c 	bl	80087a8 <__multadd>
 8008890:	45a0      	cmp	r8, r4
 8008892:	d1f5      	bne.n	8008880 <__s2b+0x4c>
 8008894:	f1a5 0408 	sub.w	r4, r5, #8
 8008898:	444c      	add	r4, r9
 800889a:	1b2d      	subs	r5, r5, r4
 800889c:	1963      	adds	r3, r4, r5
 800889e:	42bb      	cmp	r3, r7
 80088a0:	db04      	blt.n	80088ac <__s2b+0x78>
 80088a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a6:	2509      	movs	r5, #9
 80088a8:	340a      	adds	r4, #10
 80088aa:	e7f6      	b.n	800889a <__s2b+0x66>
 80088ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088b0:	4601      	mov	r1, r0
 80088b2:	220a      	movs	r2, #10
 80088b4:	4630      	mov	r0, r6
 80088b6:	3b30      	subs	r3, #48	@ 0x30
 80088b8:	f7ff ff76 	bl	80087a8 <__multadd>
 80088bc:	e7ee      	b.n	800889c <__s2b+0x68>
 80088be:	bf00      	nop
 80088c0:	080099d7 	.word	0x080099d7
 80088c4:	08009a5f 	.word	0x08009a5f

080088c8 <__hi0bits>:
 80088c8:	4603      	mov	r3, r0
 80088ca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80088ce:	bf3a      	itte	cc
 80088d0:	0403      	lslcc	r3, r0, #16
 80088d2:	2010      	movcc	r0, #16
 80088d4:	2000      	movcs	r0, #0
 80088d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088da:	bf3c      	itt	cc
 80088dc:	021b      	lslcc	r3, r3, #8
 80088de:	3008      	addcc	r0, #8
 80088e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088e4:	bf3c      	itt	cc
 80088e6:	011b      	lslcc	r3, r3, #4
 80088e8:	3004      	addcc	r0, #4
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ee:	bf3c      	itt	cc
 80088f0:	009b      	lslcc	r3, r3, #2
 80088f2:	3002      	addcc	r0, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	db05      	blt.n	8008904 <__hi0bits+0x3c>
 80088f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80088fc:	f100 0001 	add.w	r0, r0, #1
 8008900:	bf08      	it	eq
 8008902:	2020      	moveq	r0, #32
 8008904:	4770      	bx	lr

08008906 <__lo0bits>:
 8008906:	6803      	ldr	r3, [r0, #0]
 8008908:	4602      	mov	r2, r0
 800890a:	f013 0007 	ands.w	r0, r3, #7
 800890e:	d00b      	beq.n	8008928 <__lo0bits+0x22>
 8008910:	07d9      	lsls	r1, r3, #31
 8008912:	d421      	bmi.n	8008958 <__lo0bits+0x52>
 8008914:	0798      	lsls	r0, r3, #30
 8008916:	bf49      	itett	mi
 8008918:	085b      	lsrmi	r3, r3, #1
 800891a:	089b      	lsrpl	r3, r3, #2
 800891c:	2001      	movmi	r0, #1
 800891e:	6013      	strmi	r3, [r2, #0]
 8008920:	bf5c      	itt	pl
 8008922:	2002      	movpl	r0, #2
 8008924:	6013      	strpl	r3, [r2, #0]
 8008926:	4770      	bx	lr
 8008928:	b299      	uxth	r1, r3
 800892a:	b909      	cbnz	r1, 8008930 <__lo0bits+0x2a>
 800892c:	2010      	movs	r0, #16
 800892e:	0c1b      	lsrs	r3, r3, #16
 8008930:	b2d9      	uxtb	r1, r3
 8008932:	b909      	cbnz	r1, 8008938 <__lo0bits+0x32>
 8008934:	3008      	adds	r0, #8
 8008936:	0a1b      	lsrs	r3, r3, #8
 8008938:	0719      	lsls	r1, r3, #28
 800893a:	bf04      	itt	eq
 800893c:	091b      	lsreq	r3, r3, #4
 800893e:	3004      	addeq	r0, #4
 8008940:	0799      	lsls	r1, r3, #30
 8008942:	bf04      	itt	eq
 8008944:	089b      	lsreq	r3, r3, #2
 8008946:	3002      	addeq	r0, #2
 8008948:	07d9      	lsls	r1, r3, #31
 800894a:	d403      	bmi.n	8008954 <__lo0bits+0x4e>
 800894c:	085b      	lsrs	r3, r3, #1
 800894e:	f100 0001 	add.w	r0, r0, #1
 8008952:	d003      	beq.n	800895c <__lo0bits+0x56>
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	4770      	bx	lr
 8008958:	2000      	movs	r0, #0
 800895a:	4770      	bx	lr
 800895c:	2020      	movs	r0, #32
 800895e:	4770      	bx	lr

08008960 <__i2b>:
 8008960:	b510      	push	{r4, lr}
 8008962:	460c      	mov	r4, r1
 8008964:	2101      	movs	r1, #1
 8008966:	f7ff febd 	bl	80086e4 <_Balloc>
 800896a:	4602      	mov	r2, r0
 800896c:	b928      	cbnz	r0, 800897a <__i2b+0x1a>
 800896e:	f240 1145 	movw	r1, #325	@ 0x145
 8008972:	4b04      	ldr	r3, [pc, #16]	@ (8008984 <__i2b+0x24>)
 8008974:	4804      	ldr	r0, [pc, #16]	@ (8008988 <__i2b+0x28>)
 8008976:	f000 fc07 	bl	8009188 <__assert_func>
 800897a:	2301      	movs	r3, #1
 800897c:	6144      	str	r4, [r0, #20]
 800897e:	6103      	str	r3, [r0, #16]
 8008980:	bd10      	pop	{r4, pc}
 8008982:	bf00      	nop
 8008984:	080099d7 	.word	0x080099d7
 8008988:	08009a5f 	.word	0x08009a5f

0800898c <__multiply>:
 800898c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008990:	4614      	mov	r4, r2
 8008992:	690a      	ldr	r2, [r1, #16]
 8008994:	6923      	ldr	r3, [r4, #16]
 8008996:	460f      	mov	r7, r1
 8008998:	429a      	cmp	r2, r3
 800899a:	bfa2      	ittt	ge
 800899c:	4623      	movge	r3, r4
 800899e:	460c      	movge	r4, r1
 80089a0:	461f      	movge	r7, r3
 80089a2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80089a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80089aa:	68a3      	ldr	r3, [r4, #8]
 80089ac:	6861      	ldr	r1, [r4, #4]
 80089ae:	eb0a 0609 	add.w	r6, sl, r9
 80089b2:	42b3      	cmp	r3, r6
 80089b4:	b085      	sub	sp, #20
 80089b6:	bfb8      	it	lt
 80089b8:	3101      	addlt	r1, #1
 80089ba:	f7ff fe93 	bl	80086e4 <_Balloc>
 80089be:	b930      	cbnz	r0, 80089ce <__multiply+0x42>
 80089c0:	4602      	mov	r2, r0
 80089c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80089c6:	4b43      	ldr	r3, [pc, #268]	@ (8008ad4 <__multiply+0x148>)
 80089c8:	4843      	ldr	r0, [pc, #268]	@ (8008ad8 <__multiply+0x14c>)
 80089ca:	f000 fbdd 	bl	8009188 <__assert_func>
 80089ce:	f100 0514 	add.w	r5, r0, #20
 80089d2:	462b      	mov	r3, r5
 80089d4:	2200      	movs	r2, #0
 80089d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089da:	4543      	cmp	r3, r8
 80089dc:	d321      	bcc.n	8008a22 <__multiply+0x96>
 80089de:	f107 0114 	add.w	r1, r7, #20
 80089e2:	f104 0214 	add.w	r2, r4, #20
 80089e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80089ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80089ee:	9302      	str	r3, [sp, #8]
 80089f0:	1b13      	subs	r3, r2, r4
 80089f2:	3b15      	subs	r3, #21
 80089f4:	f023 0303 	bic.w	r3, r3, #3
 80089f8:	3304      	adds	r3, #4
 80089fa:	f104 0715 	add.w	r7, r4, #21
 80089fe:	42ba      	cmp	r2, r7
 8008a00:	bf38      	it	cc
 8008a02:	2304      	movcc	r3, #4
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	9b02      	ldr	r3, [sp, #8]
 8008a08:	9103      	str	r1, [sp, #12]
 8008a0a:	428b      	cmp	r3, r1
 8008a0c:	d80c      	bhi.n	8008a28 <__multiply+0x9c>
 8008a0e:	2e00      	cmp	r6, #0
 8008a10:	dd03      	ble.n	8008a1a <__multiply+0x8e>
 8008a12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d05a      	beq.n	8008ad0 <__multiply+0x144>
 8008a1a:	6106      	str	r6, [r0, #16]
 8008a1c:	b005      	add	sp, #20
 8008a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a22:	f843 2b04 	str.w	r2, [r3], #4
 8008a26:	e7d8      	b.n	80089da <__multiply+0x4e>
 8008a28:	f8b1 a000 	ldrh.w	sl, [r1]
 8008a2c:	f1ba 0f00 	cmp.w	sl, #0
 8008a30:	d023      	beq.n	8008a7a <__multiply+0xee>
 8008a32:	46a9      	mov	r9, r5
 8008a34:	f04f 0c00 	mov.w	ip, #0
 8008a38:	f104 0e14 	add.w	lr, r4, #20
 8008a3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a40:	f8d9 3000 	ldr.w	r3, [r9]
 8008a44:	fa1f fb87 	uxth.w	fp, r7
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a4e:	4463      	add	r3, ip
 8008a50:	f8d9 c000 	ldr.w	ip, [r9]
 8008a54:	0c3f      	lsrs	r7, r7, #16
 8008a56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008a5a:	fb0a c707 	mla	r7, sl, r7, ip
 8008a5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a68:	4572      	cmp	r2, lr
 8008a6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008a6e:	f849 3b04 	str.w	r3, [r9], #4
 8008a72:	d8e3      	bhi.n	8008a3c <__multiply+0xb0>
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	f845 c003 	str.w	ip, [r5, r3]
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	3104      	adds	r1, #4
 8008a7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a82:	f1b9 0f00 	cmp.w	r9, #0
 8008a86:	d021      	beq.n	8008acc <__multiply+0x140>
 8008a88:	46ae      	mov	lr, r5
 8008a8a:	f04f 0a00 	mov.w	sl, #0
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	f104 0c14 	add.w	ip, r4, #20
 8008a94:	f8bc b000 	ldrh.w	fp, [ip]
 8008a98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	fb09 770b 	mla	r7, r9, fp, r7
 8008aa2:	4457      	add	r7, sl
 8008aa4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008aa8:	f84e 3b04 	str.w	r3, [lr], #4
 8008aac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ab0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ab4:	f8be 3000 	ldrh.w	r3, [lr]
 8008ab8:	4562      	cmp	r2, ip
 8008aba:	fb09 330a 	mla	r3, r9, sl, r3
 8008abe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008ac2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ac6:	d8e5      	bhi.n	8008a94 <__multiply+0x108>
 8008ac8:	9f01      	ldr	r7, [sp, #4]
 8008aca:	51eb      	str	r3, [r5, r7]
 8008acc:	3504      	adds	r5, #4
 8008ace:	e79a      	b.n	8008a06 <__multiply+0x7a>
 8008ad0:	3e01      	subs	r6, #1
 8008ad2:	e79c      	b.n	8008a0e <__multiply+0x82>
 8008ad4:	080099d7 	.word	0x080099d7
 8008ad8:	08009a5f 	.word	0x08009a5f

08008adc <__pow5mult>:
 8008adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae0:	4615      	mov	r5, r2
 8008ae2:	f012 0203 	ands.w	r2, r2, #3
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	460e      	mov	r6, r1
 8008aea:	d007      	beq.n	8008afc <__pow5mult+0x20>
 8008aec:	4c25      	ldr	r4, [pc, #148]	@ (8008b84 <__pow5mult+0xa8>)
 8008aee:	3a01      	subs	r2, #1
 8008af0:	2300      	movs	r3, #0
 8008af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008af6:	f7ff fe57 	bl	80087a8 <__multadd>
 8008afa:	4606      	mov	r6, r0
 8008afc:	10ad      	asrs	r5, r5, #2
 8008afe:	d03d      	beq.n	8008b7c <__pow5mult+0xa0>
 8008b00:	69fc      	ldr	r4, [r7, #28]
 8008b02:	b97c      	cbnz	r4, 8008b24 <__pow5mult+0x48>
 8008b04:	2010      	movs	r0, #16
 8008b06:	f000 fb71 	bl	80091ec <malloc>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	61f8      	str	r0, [r7, #28]
 8008b0e:	b928      	cbnz	r0, 8008b1c <__pow5mult+0x40>
 8008b10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008b14:	4b1c      	ldr	r3, [pc, #112]	@ (8008b88 <__pow5mult+0xac>)
 8008b16:	481d      	ldr	r0, [pc, #116]	@ (8008b8c <__pow5mult+0xb0>)
 8008b18:	f000 fb36 	bl	8009188 <__assert_func>
 8008b1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b20:	6004      	str	r4, [r0, #0]
 8008b22:	60c4      	str	r4, [r0, #12]
 8008b24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008b28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b2c:	b94c      	cbnz	r4, 8008b42 <__pow5mult+0x66>
 8008b2e:	f240 2171 	movw	r1, #625	@ 0x271
 8008b32:	4638      	mov	r0, r7
 8008b34:	f7ff ff14 	bl	8008960 <__i2b>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b40:	6003      	str	r3, [r0, #0]
 8008b42:	f04f 0900 	mov.w	r9, #0
 8008b46:	07eb      	lsls	r3, r5, #31
 8008b48:	d50a      	bpl.n	8008b60 <__pow5mult+0x84>
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f7ff ff1c 	bl	800898c <__multiply>
 8008b54:	4680      	mov	r8, r0
 8008b56:	4631      	mov	r1, r6
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7ff fe03 	bl	8008764 <_Bfree>
 8008b5e:	4646      	mov	r6, r8
 8008b60:	106d      	asrs	r5, r5, #1
 8008b62:	d00b      	beq.n	8008b7c <__pow5mult+0xa0>
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	b938      	cbnz	r0, 8008b78 <__pow5mult+0x9c>
 8008b68:	4622      	mov	r2, r4
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7ff ff0d 	bl	800898c <__multiply>
 8008b72:	6020      	str	r0, [r4, #0]
 8008b74:	f8c0 9000 	str.w	r9, [r0]
 8008b78:	4604      	mov	r4, r0
 8008b7a:	e7e4      	b.n	8008b46 <__pow5mult+0x6a>
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b82:	bf00      	nop
 8008b84:	08009ab8 	.word	0x08009ab8
 8008b88:	08009a48 	.word	0x08009a48
 8008b8c:	08009a5f 	.word	0x08009a5f

08008b90 <__lshift>:
 8008b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b94:	460c      	mov	r4, r1
 8008b96:	4607      	mov	r7, r0
 8008b98:	4691      	mov	r9, r2
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	6849      	ldr	r1, [r1, #4]
 8008b9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ba8:	f108 0601 	add.w	r6, r8, #1
 8008bac:	42b3      	cmp	r3, r6
 8008bae:	db0b      	blt.n	8008bc8 <__lshift+0x38>
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff fd97 	bl	80086e4 <_Balloc>
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	b948      	cbnz	r0, 8008bce <__lshift+0x3e>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008bc0:	4b27      	ldr	r3, [pc, #156]	@ (8008c60 <__lshift+0xd0>)
 8008bc2:	4828      	ldr	r0, [pc, #160]	@ (8008c64 <__lshift+0xd4>)
 8008bc4:	f000 fae0 	bl	8009188 <__assert_func>
 8008bc8:	3101      	adds	r1, #1
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	e7ee      	b.n	8008bac <__lshift+0x1c>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f100 0114 	add.w	r1, r0, #20
 8008bd4:	f100 0210 	add.w	r2, r0, #16
 8008bd8:	4618      	mov	r0, r3
 8008bda:	4553      	cmp	r3, sl
 8008bdc:	db33      	blt.n	8008c46 <__lshift+0xb6>
 8008bde:	6920      	ldr	r0, [r4, #16]
 8008be0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008be4:	f104 0314 	add.w	r3, r4, #20
 8008be8:	f019 091f 	ands.w	r9, r9, #31
 8008bec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bf4:	d02b      	beq.n	8008c4e <__lshift+0xbe>
 8008bf6:	468a      	mov	sl, r1
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f1c9 0e20 	rsb	lr, r9, #32
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	fa00 f009 	lsl.w	r0, r0, r9
 8008c04:	4310      	orrs	r0, r2
 8008c06:	f84a 0b04 	str.w	r0, [sl], #4
 8008c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c0e:	459c      	cmp	ip, r3
 8008c10:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c14:	d8f3      	bhi.n	8008bfe <__lshift+0x6e>
 8008c16:	ebac 0304 	sub.w	r3, ip, r4
 8008c1a:	3b15      	subs	r3, #21
 8008c1c:	f023 0303 	bic.w	r3, r3, #3
 8008c20:	3304      	adds	r3, #4
 8008c22:	f104 0015 	add.w	r0, r4, #21
 8008c26:	4584      	cmp	ip, r0
 8008c28:	bf38      	it	cc
 8008c2a:	2304      	movcc	r3, #4
 8008c2c:	50ca      	str	r2, [r1, r3]
 8008c2e:	b10a      	cbz	r2, 8008c34 <__lshift+0xa4>
 8008c30:	f108 0602 	add.w	r6, r8, #2
 8008c34:	3e01      	subs	r6, #1
 8008c36:	4638      	mov	r0, r7
 8008c38:	4621      	mov	r1, r4
 8008c3a:	612e      	str	r6, [r5, #16]
 8008c3c:	f7ff fd92 	bl	8008764 <_Bfree>
 8008c40:	4628      	mov	r0, r5
 8008c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	e7c5      	b.n	8008bda <__lshift+0x4a>
 8008c4e:	3904      	subs	r1, #4
 8008c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c54:	459c      	cmp	ip, r3
 8008c56:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c5a:	d8f9      	bhi.n	8008c50 <__lshift+0xc0>
 8008c5c:	e7ea      	b.n	8008c34 <__lshift+0xa4>
 8008c5e:	bf00      	nop
 8008c60:	080099d7 	.word	0x080099d7
 8008c64:	08009a5f 	.word	0x08009a5f

08008c68 <__mcmp>:
 8008c68:	4603      	mov	r3, r0
 8008c6a:	690a      	ldr	r2, [r1, #16]
 8008c6c:	6900      	ldr	r0, [r0, #16]
 8008c6e:	b530      	push	{r4, r5, lr}
 8008c70:	1a80      	subs	r0, r0, r2
 8008c72:	d10e      	bne.n	8008c92 <__mcmp+0x2a>
 8008c74:	3314      	adds	r3, #20
 8008c76:	3114      	adds	r1, #20
 8008c78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c88:	4295      	cmp	r5, r2
 8008c8a:	d003      	beq.n	8008c94 <__mcmp+0x2c>
 8008c8c:	d205      	bcs.n	8008c9a <__mcmp+0x32>
 8008c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c92:	bd30      	pop	{r4, r5, pc}
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d3f3      	bcc.n	8008c80 <__mcmp+0x18>
 8008c98:	e7fb      	b.n	8008c92 <__mcmp+0x2a>
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	e7f9      	b.n	8008c92 <__mcmp+0x2a>
	...

08008ca0 <__mdiff>:
 8008ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	4689      	mov	r9, r1
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4648      	mov	r0, r9
 8008cac:	4614      	mov	r4, r2
 8008cae:	f7ff ffdb 	bl	8008c68 <__mcmp>
 8008cb2:	1e05      	subs	r5, r0, #0
 8008cb4:	d112      	bne.n	8008cdc <__mdiff+0x3c>
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff fd13 	bl	80086e4 <_Balloc>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	b928      	cbnz	r0, 8008cce <__mdiff+0x2e>
 8008cc2:	f240 2137 	movw	r1, #567	@ 0x237
 8008cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8008dc0 <__mdiff+0x120>)
 8008cc8:	483e      	ldr	r0, [pc, #248]	@ (8008dc4 <__mdiff+0x124>)
 8008cca:	f000 fa5d 	bl	8009188 <__assert_func>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	b003      	add	sp, #12
 8008cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cdc:	bfbc      	itt	lt
 8008cde:	464b      	movlt	r3, r9
 8008ce0:	46a1      	movlt	r9, r4
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ce8:	bfba      	itte	lt
 8008cea:	461c      	movlt	r4, r3
 8008cec:	2501      	movlt	r5, #1
 8008cee:	2500      	movge	r5, #0
 8008cf0:	f7ff fcf8 	bl	80086e4 <_Balloc>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	b918      	cbnz	r0, 8008d00 <__mdiff+0x60>
 8008cf8:	f240 2145 	movw	r1, #581	@ 0x245
 8008cfc:	4b30      	ldr	r3, [pc, #192]	@ (8008dc0 <__mdiff+0x120>)
 8008cfe:	e7e3      	b.n	8008cc8 <__mdiff+0x28>
 8008d00:	f100 0b14 	add.w	fp, r0, #20
 8008d04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008d08:	f109 0310 	add.w	r3, r9, #16
 8008d0c:	60c5      	str	r5, [r0, #12]
 8008d0e:	f04f 0c00 	mov.w	ip, #0
 8008d12:	f109 0514 	add.w	r5, r9, #20
 8008d16:	46d9      	mov	r9, fp
 8008d18:	6926      	ldr	r6, [r4, #16]
 8008d1a:	f104 0e14 	add.w	lr, r4, #20
 8008d1e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008d22:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	9b01      	ldr	r3, [sp, #4]
 8008d2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008d2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008d32:	b281      	uxth	r1, r0
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	fa1f f38a 	uxth.w	r3, sl
 8008d3a:	1a5b      	subs	r3, r3, r1
 8008d3c:	0c00      	lsrs	r0, r0, #16
 8008d3e:	4463      	add	r3, ip
 8008d40:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008d44:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d4e:	4576      	cmp	r6, lr
 8008d50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d54:	f849 3b04 	str.w	r3, [r9], #4
 8008d58:	d8e6      	bhi.n	8008d28 <__mdiff+0x88>
 8008d5a:	1b33      	subs	r3, r6, r4
 8008d5c:	3b15      	subs	r3, #21
 8008d5e:	f023 0303 	bic.w	r3, r3, #3
 8008d62:	3415      	adds	r4, #21
 8008d64:	3304      	adds	r3, #4
 8008d66:	42a6      	cmp	r6, r4
 8008d68:	bf38      	it	cc
 8008d6a:	2304      	movcc	r3, #4
 8008d6c:	441d      	add	r5, r3
 8008d6e:	445b      	add	r3, fp
 8008d70:	461e      	mov	r6, r3
 8008d72:	462c      	mov	r4, r5
 8008d74:	4544      	cmp	r4, r8
 8008d76:	d30e      	bcc.n	8008d96 <__mdiff+0xf6>
 8008d78:	f108 0103 	add.w	r1, r8, #3
 8008d7c:	1b49      	subs	r1, r1, r5
 8008d7e:	f021 0103 	bic.w	r1, r1, #3
 8008d82:	3d03      	subs	r5, #3
 8008d84:	45a8      	cmp	r8, r5
 8008d86:	bf38      	it	cc
 8008d88:	2100      	movcc	r1, #0
 8008d8a:	440b      	add	r3, r1
 8008d8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d90:	b199      	cbz	r1, 8008dba <__mdiff+0x11a>
 8008d92:	6117      	str	r7, [r2, #16]
 8008d94:	e79e      	b.n	8008cd4 <__mdiff+0x34>
 8008d96:	46e6      	mov	lr, ip
 8008d98:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d9c:	fa1f fc81 	uxth.w	ip, r1
 8008da0:	44f4      	add	ip, lr
 8008da2:	0c08      	lsrs	r0, r1, #16
 8008da4:	4471      	add	r1, lr
 8008da6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008daa:	b289      	uxth	r1, r1
 8008dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008db0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008db4:	f846 1b04 	str.w	r1, [r6], #4
 8008db8:	e7dc      	b.n	8008d74 <__mdiff+0xd4>
 8008dba:	3f01      	subs	r7, #1
 8008dbc:	e7e6      	b.n	8008d8c <__mdiff+0xec>
 8008dbe:	bf00      	nop
 8008dc0:	080099d7 	.word	0x080099d7
 8008dc4:	08009a5f 	.word	0x08009a5f

08008dc8 <__ulp>:
 8008dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e04 <__ulp+0x3c>)
 8008dca:	400b      	ands	r3, r1
 8008dcc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dc08      	bgt.n	8008de6 <__ulp+0x1e>
 8008dd4:	425b      	negs	r3, r3
 8008dd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008dda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008dde:	da04      	bge.n	8008dea <__ulp+0x22>
 8008de0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008de4:	4113      	asrs	r3, r2
 8008de6:	2200      	movs	r2, #0
 8008de8:	e008      	b.n	8008dfc <__ulp+0x34>
 8008dea:	f1a2 0314 	sub.w	r3, r2, #20
 8008dee:	2b1e      	cmp	r3, #30
 8008df0:	bfd6      	itet	le
 8008df2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008df6:	2201      	movgt	r2, #1
 8008df8:	40da      	lsrle	r2, r3
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	7ff00000 	.word	0x7ff00000

08008e08 <__b2d>:
 8008e08:	6902      	ldr	r2, [r0, #16]
 8008e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0c:	f100 0614 	add.w	r6, r0, #20
 8008e10:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008e14:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008e18:	4f1e      	ldr	r7, [pc, #120]	@ (8008e94 <__b2d+0x8c>)
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f7ff fd54 	bl	80088c8 <__hi0bits>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f1c0 0020 	rsb	r0, r0, #32
 8008e26:	2b0a      	cmp	r3, #10
 8008e28:	f1a2 0504 	sub.w	r5, r2, #4
 8008e2c:	6008      	str	r0, [r1, #0]
 8008e2e:	dc12      	bgt.n	8008e56 <__b2d+0x4e>
 8008e30:	42ae      	cmp	r6, r5
 8008e32:	bf2c      	ite	cs
 8008e34:	2200      	movcs	r2, #0
 8008e36:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008e3a:	f1c3 0c0b 	rsb	ip, r3, #11
 8008e3e:	3315      	adds	r3, #21
 8008e40:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008e44:	fa04 f303 	lsl.w	r3, r4, r3
 8008e48:	fa22 f20c 	lsr.w	r2, r2, ip
 8008e4c:	ea4e 0107 	orr.w	r1, lr, r7
 8008e50:	431a      	orrs	r2, r3
 8008e52:	4610      	mov	r0, r2
 8008e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e56:	42ae      	cmp	r6, r5
 8008e58:	bf36      	itet	cc
 8008e5a:	f1a2 0508 	subcc.w	r5, r2, #8
 8008e5e:	2200      	movcs	r2, #0
 8008e60:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008e64:	3b0b      	subs	r3, #11
 8008e66:	d012      	beq.n	8008e8e <__b2d+0x86>
 8008e68:	f1c3 0720 	rsb	r7, r3, #32
 8008e6c:	fa22 f107 	lsr.w	r1, r2, r7
 8008e70:	409c      	lsls	r4, r3
 8008e72:	430c      	orrs	r4, r1
 8008e74:	42b5      	cmp	r5, r6
 8008e76:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008e7a:	bf94      	ite	ls
 8008e7c:	2400      	movls	r4, #0
 8008e7e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008e82:	409a      	lsls	r2, r3
 8008e84:	40fc      	lsrs	r4, r7
 8008e86:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008e8a:	4322      	orrs	r2, r4
 8008e8c:	e7e1      	b.n	8008e52 <__b2d+0x4a>
 8008e8e:	ea44 0107 	orr.w	r1, r4, r7
 8008e92:	e7de      	b.n	8008e52 <__b2d+0x4a>
 8008e94:	3ff00000 	.word	0x3ff00000

08008e98 <__d2b>:
 8008e98:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	4690      	mov	r8, r2
 8008ea0:	4699      	mov	r9, r3
 8008ea2:	9e08      	ldr	r6, [sp, #32]
 8008ea4:	f7ff fc1e 	bl	80086e4 <_Balloc>
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	b930      	cbnz	r0, 8008eba <__d2b+0x22>
 8008eac:	4602      	mov	r2, r0
 8008eae:	f240 310f 	movw	r1, #783	@ 0x30f
 8008eb2:	4b23      	ldr	r3, [pc, #140]	@ (8008f40 <__d2b+0xa8>)
 8008eb4:	4823      	ldr	r0, [pc, #140]	@ (8008f44 <__d2b+0xac>)
 8008eb6:	f000 f967 	bl	8009188 <__assert_func>
 8008eba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ebe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ec2:	b10d      	cbz	r5, 8008ec8 <__d2b+0x30>
 8008ec4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	f1b8 0300 	subs.w	r3, r8, #0
 8008ece:	d024      	beq.n	8008f1a <__d2b+0x82>
 8008ed0:	4668      	mov	r0, sp
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	f7ff fd17 	bl	8008906 <__lo0bits>
 8008ed8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008edc:	b1d8      	cbz	r0, 8008f16 <__d2b+0x7e>
 8008ede:	f1c0 0320 	rsb	r3, r0, #32
 8008ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee6:	430b      	orrs	r3, r1
 8008ee8:	40c2      	lsrs	r2, r0
 8008eea:	6163      	str	r3, [r4, #20]
 8008eec:	9201      	str	r2, [sp, #4]
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	bf0c      	ite	eq
 8008ef4:	2201      	moveq	r2, #1
 8008ef6:	2202      	movne	r2, #2
 8008ef8:	61a3      	str	r3, [r4, #24]
 8008efa:	6122      	str	r2, [r4, #16]
 8008efc:	b1ad      	cbz	r5, 8008f2a <__d2b+0x92>
 8008efe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f02:	4405      	add	r5, r0
 8008f04:	6035      	str	r5, [r6, #0]
 8008f06:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f0c:	6018      	str	r0, [r3, #0]
 8008f0e:	4620      	mov	r0, r4
 8008f10:	b002      	add	sp, #8
 8008f12:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008f16:	6161      	str	r1, [r4, #20]
 8008f18:	e7e9      	b.n	8008eee <__d2b+0x56>
 8008f1a:	a801      	add	r0, sp, #4
 8008f1c:	f7ff fcf3 	bl	8008906 <__lo0bits>
 8008f20:	9b01      	ldr	r3, [sp, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	6163      	str	r3, [r4, #20]
 8008f26:	3020      	adds	r0, #32
 8008f28:	e7e7      	b.n	8008efa <__d2b+0x62>
 8008f2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f32:	6030      	str	r0, [r6, #0]
 8008f34:	6918      	ldr	r0, [r3, #16]
 8008f36:	f7ff fcc7 	bl	80088c8 <__hi0bits>
 8008f3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f3e:	e7e4      	b.n	8008f0a <__d2b+0x72>
 8008f40:	080099d7 	.word	0x080099d7
 8008f44:	08009a5f 	.word	0x08009a5f

08008f48 <__ratio>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	b085      	sub	sp, #20
 8008f4e:	e9cd 1000 	strd	r1, r0, [sp]
 8008f52:	a902      	add	r1, sp, #8
 8008f54:	f7ff ff58 	bl	8008e08 <__b2d>
 8008f58:	468b      	mov	fp, r1
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	460f      	mov	r7, r1
 8008f5e:	9800      	ldr	r0, [sp, #0]
 8008f60:	a903      	add	r1, sp, #12
 8008f62:	f7ff ff51 	bl	8008e08 <__b2d>
 8008f66:	460d      	mov	r5, r1
 8008f68:	9b01      	ldr	r3, [sp, #4]
 8008f6a:	4689      	mov	r9, r1
 8008f6c:	6919      	ldr	r1, [r3, #16]
 8008f6e:	9b00      	ldr	r3, [sp, #0]
 8008f70:	4604      	mov	r4, r0
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	4630      	mov	r0, r6
 8008f76:	1ac9      	subs	r1, r1, r3
 8008f78:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008f7c:	1a9b      	subs	r3, r3, r2
 8008f7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bfcd      	iteet	gt
 8008f86:	463a      	movgt	r2, r7
 8008f88:	462a      	movle	r2, r5
 8008f8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f8e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008f92:	bfd8      	it	le
 8008f94:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008f98:	464b      	mov	r3, r9
 8008f9a:	4622      	mov	r2, r4
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	f7f7 fbc5 	bl	800072c <__aeabi_ddiv>
 8008fa2:	b005      	add	sp, #20
 8008fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fa8 <__copybits>:
 8008fa8:	3901      	subs	r1, #1
 8008faa:	b570      	push	{r4, r5, r6, lr}
 8008fac:	1149      	asrs	r1, r1, #5
 8008fae:	6914      	ldr	r4, [r2, #16]
 8008fb0:	3101      	adds	r1, #1
 8008fb2:	f102 0314 	add.w	r3, r2, #20
 8008fb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008fba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008fbe:	1f05      	subs	r5, r0, #4
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d30c      	bcc.n	8008fde <__copybits+0x36>
 8008fc4:	1aa3      	subs	r3, r4, r2
 8008fc6:	3b11      	subs	r3, #17
 8008fc8:	f023 0303 	bic.w	r3, r3, #3
 8008fcc:	3211      	adds	r2, #17
 8008fce:	42a2      	cmp	r2, r4
 8008fd0:	bf88      	it	hi
 8008fd2:	2300      	movhi	r3, #0
 8008fd4:	4418      	add	r0, r3
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	4288      	cmp	r0, r1
 8008fda:	d305      	bcc.n	8008fe8 <__copybits+0x40>
 8008fdc:	bd70      	pop	{r4, r5, r6, pc}
 8008fde:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fe2:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fe6:	e7eb      	b.n	8008fc0 <__copybits+0x18>
 8008fe8:	f840 3b04 	str.w	r3, [r0], #4
 8008fec:	e7f4      	b.n	8008fd8 <__copybits+0x30>

08008fee <__any_on>:
 8008fee:	f100 0214 	add.w	r2, r0, #20
 8008ff2:	6900      	ldr	r0, [r0, #16]
 8008ff4:	114b      	asrs	r3, r1, #5
 8008ff6:	4298      	cmp	r0, r3
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	db11      	blt.n	8009020 <__any_on+0x32>
 8008ffc:	dd0a      	ble.n	8009014 <__any_on+0x26>
 8008ffe:	f011 011f 	ands.w	r1, r1, #31
 8009002:	d007      	beq.n	8009014 <__any_on+0x26>
 8009004:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009008:	fa24 f001 	lsr.w	r0, r4, r1
 800900c:	fa00 f101 	lsl.w	r1, r0, r1
 8009010:	428c      	cmp	r4, r1
 8009012:	d10b      	bne.n	800902c <__any_on+0x3e>
 8009014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009018:	4293      	cmp	r3, r2
 800901a:	d803      	bhi.n	8009024 <__any_on+0x36>
 800901c:	2000      	movs	r0, #0
 800901e:	bd10      	pop	{r4, pc}
 8009020:	4603      	mov	r3, r0
 8009022:	e7f7      	b.n	8009014 <__any_on+0x26>
 8009024:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009028:	2900      	cmp	r1, #0
 800902a:	d0f5      	beq.n	8009018 <__any_on+0x2a>
 800902c:	2001      	movs	r0, #1
 800902e:	e7f6      	b.n	800901e <__any_on+0x30>

08009030 <_realloc_r>:
 8009030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009034:	4680      	mov	r8, r0
 8009036:	4615      	mov	r5, r2
 8009038:	460c      	mov	r4, r1
 800903a:	b921      	cbnz	r1, 8009046 <_realloc_r+0x16>
 800903c:	4611      	mov	r1, r2
 800903e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009042:	f7fd b983 	b.w	800634c <_malloc_r>
 8009046:	b92a      	cbnz	r2, 8009054 <_realloc_r+0x24>
 8009048:	f7fd f916 	bl	8006278 <_free_r>
 800904c:	2400      	movs	r4, #0
 800904e:	4620      	mov	r0, r4
 8009050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009054:	f000 f8d2 	bl	80091fc <_malloc_usable_size_r>
 8009058:	4285      	cmp	r5, r0
 800905a:	4606      	mov	r6, r0
 800905c:	d802      	bhi.n	8009064 <_realloc_r+0x34>
 800905e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009062:	d8f4      	bhi.n	800904e <_realloc_r+0x1e>
 8009064:	4629      	mov	r1, r5
 8009066:	4640      	mov	r0, r8
 8009068:	f7fd f970 	bl	800634c <_malloc_r>
 800906c:	4607      	mov	r7, r0
 800906e:	2800      	cmp	r0, #0
 8009070:	d0ec      	beq.n	800904c <_realloc_r+0x1c>
 8009072:	42b5      	cmp	r5, r6
 8009074:	462a      	mov	r2, r5
 8009076:	4621      	mov	r1, r4
 8009078:	bf28      	it	cs
 800907a:	4632      	movcs	r2, r6
 800907c:	f7fe ffd2 	bl	8008024 <memcpy>
 8009080:	4621      	mov	r1, r4
 8009082:	4640      	mov	r0, r8
 8009084:	f7fd f8f8 	bl	8006278 <_free_r>
 8009088:	463c      	mov	r4, r7
 800908a:	e7e0      	b.n	800904e <_realloc_r+0x1e>

0800908c <_strtoul_l.constprop.0>:
 800908c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009090:	4686      	mov	lr, r0
 8009092:	460d      	mov	r5, r1
 8009094:	4e33      	ldr	r6, [pc, #204]	@ (8009164 <_strtoul_l.constprop.0+0xd8>)
 8009096:	4628      	mov	r0, r5
 8009098:	f815 4b01 	ldrb.w	r4, [r5], #1
 800909c:	5d37      	ldrb	r7, [r6, r4]
 800909e:	f017 0708 	ands.w	r7, r7, #8
 80090a2:	d1f8      	bne.n	8009096 <_strtoul_l.constprop.0+0xa>
 80090a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80090a6:	d12f      	bne.n	8009108 <_strtoul_l.constprop.0+0x7c>
 80090a8:	2701      	movs	r7, #1
 80090aa:	782c      	ldrb	r4, [r5, #0]
 80090ac:	1c85      	adds	r5, r0, #2
 80090ae:	f033 0010 	bics.w	r0, r3, #16
 80090b2:	d109      	bne.n	80090c8 <_strtoul_l.constprop.0+0x3c>
 80090b4:	2c30      	cmp	r4, #48	@ 0x30
 80090b6:	d12c      	bne.n	8009112 <_strtoul_l.constprop.0+0x86>
 80090b8:	7828      	ldrb	r0, [r5, #0]
 80090ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80090be:	2858      	cmp	r0, #88	@ 0x58
 80090c0:	d127      	bne.n	8009112 <_strtoul_l.constprop.0+0x86>
 80090c2:	2310      	movs	r3, #16
 80090c4:	786c      	ldrb	r4, [r5, #1]
 80090c6:	3502      	adds	r5, #2
 80090c8:	f04f 38ff 	mov.w	r8, #4294967295
 80090cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80090d0:	2600      	movs	r6, #0
 80090d2:	fb03 f908 	mul.w	r9, r3, r8
 80090d6:	4630      	mov	r0, r6
 80090d8:	ea6f 0909 	mvn.w	r9, r9
 80090dc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80090e0:	f1bc 0f09 	cmp.w	ip, #9
 80090e4:	d81c      	bhi.n	8009120 <_strtoul_l.constprop.0+0x94>
 80090e6:	4664      	mov	r4, ip
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	dd2a      	ble.n	8009142 <_strtoul_l.constprop.0+0xb6>
 80090ec:	f1b6 3fff 	cmp.w	r6, #4294967295
 80090f0:	d007      	beq.n	8009102 <_strtoul_l.constprop.0+0x76>
 80090f2:	4580      	cmp	r8, r0
 80090f4:	d322      	bcc.n	800913c <_strtoul_l.constprop.0+0xb0>
 80090f6:	d101      	bne.n	80090fc <_strtoul_l.constprop.0+0x70>
 80090f8:	45a1      	cmp	r9, r4
 80090fa:	db1f      	blt.n	800913c <_strtoul_l.constprop.0+0xb0>
 80090fc:	2601      	movs	r6, #1
 80090fe:	fb00 4003 	mla	r0, r0, r3, r4
 8009102:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009106:	e7e9      	b.n	80090dc <_strtoul_l.constprop.0+0x50>
 8009108:	2c2b      	cmp	r4, #43	@ 0x2b
 800910a:	bf04      	itt	eq
 800910c:	782c      	ldrbeq	r4, [r5, #0]
 800910e:	1c85      	addeq	r5, r0, #2
 8009110:	e7cd      	b.n	80090ae <_strtoul_l.constprop.0+0x22>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1d8      	bne.n	80090c8 <_strtoul_l.constprop.0+0x3c>
 8009116:	2c30      	cmp	r4, #48	@ 0x30
 8009118:	bf0c      	ite	eq
 800911a:	2308      	moveq	r3, #8
 800911c:	230a      	movne	r3, #10
 800911e:	e7d3      	b.n	80090c8 <_strtoul_l.constprop.0+0x3c>
 8009120:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009124:	f1bc 0f19 	cmp.w	ip, #25
 8009128:	d801      	bhi.n	800912e <_strtoul_l.constprop.0+0xa2>
 800912a:	3c37      	subs	r4, #55	@ 0x37
 800912c:	e7dc      	b.n	80090e8 <_strtoul_l.constprop.0+0x5c>
 800912e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009132:	f1bc 0f19 	cmp.w	ip, #25
 8009136:	d804      	bhi.n	8009142 <_strtoul_l.constprop.0+0xb6>
 8009138:	3c57      	subs	r4, #87	@ 0x57
 800913a:	e7d5      	b.n	80090e8 <_strtoul_l.constprop.0+0x5c>
 800913c:	f04f 36ff 	mov.w	r6, #4294967295
 8009140:	e7df      	b.n	8009102 <_strtoul_l.constprop.0+0x76>
 8009142:	1c73      	adds	r3, r6, #1
 8009144:	d106      	bne.n	8009154 <_strtoul_l.constprop.0+0xc8>
 8009146:	2322      	movs	r3, #34	@ 0x22
 8009148:	4630      	mov	r0, r6
 800914a:	f8ce 3000 	str.w	r3, [lr]
 800914e:	b932      	cbnz	r2, 800915e <_strtoul_l.constprop.0+0xd2>
 8009150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009154:	b107      	cbz	r7, 8009158 <_strtoul_l.constprop.0+0xcc>
 8009156:	4240      	negs	r0, r0
 8009158:	2a00      	cmp	r2, #0
 800915a:	d0f9      	beq.n	8009150 <_strtoul_l.constprop.0+0xc4>
 800915c:	b106      	cbz	r6, 8009160 <_strtoul_l.constprop.0+0xd4>
 800915e:	1e69      	subs	r1, r5, #1
 8009160:	6011      	str	r1, [r2, #0]
 8009162:	e7f5      	b.n	8009150 <_strtoul_l.constprop.0+0xc4>
 8009164:	08009881 	.word	0x08009881

08009168 <_strtoul_r>:
 8009168:	f7ff bf90 	b.w	800908c <_strtoul_l.constprop.0>

0800916c <__ascii_wctomb>:
 800916c:	4603      	mov	r3, r0
 800916e:	4608      	mov	r0, r1
 8009170:	b141      	cbz	r1, 8009184 <__ascii_wctomb+0x18>
 8009172:	2aff      	cmp	r2, #255	@ 0xff
 8009174:	d904      	bls.n	8009180 <__ascii_wctomb+0x14>
 8009176:	228a      	movs	r2, #138	@ 0x8a
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	4770      	bx	lr
 8009180:	2001      	movs	r0, #1
 8009182:	700a      	strb	r2, [r1, #0]
 8009184:	4770      	bx	lr
	...

08009188 <__assert_func>:
 8009188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800918a:	4614      	mov	r4, r2
 800918c:	461a      	mov	r2, r3
 800918e:	4b09      	ldr	r3, [pc, #36]	@ (80091b4 <__assert_func+0x2c>)
 8009190:	4605      	mov	r5, r0
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68d8      	ldr	r0, [r3, #12]
 8009196:	b954      	cbnz	r4, 80091ae <__assert_func+0x26>
 8009198:	4b07      	ldr	r3, [pc, #28]	@ (80091b8 <__assert_func+0x30>)
 800919a:	461c      	mov	r4, r3
 800919c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091a0:	9100      	str	r1, [sp, #0]
 80091a2:	462b      	mov	r3, r5
 80091a4:	4905      	ldr	r1, [pc, #20]	@ (80091bc <__assert_func+0x34>)
 80091a6:	f000 f831 	bl	800920c <fiprintf>
 80091aa:	f000 f841 	bl	8009230 <abort>
 80091ae:	4b04      	ldr	r3, [pc, #16]	@ (80091c0 <__assert_func+0x38>)
 80091b0:	e7f4      	b.n	800919c <__assert_func+0x14>
 80091b2:	bf00      	nop
 80091b4:	2000002c 	.word	0x2000002c
 80091b8:	08009bf3 	.word	0x08009bf3
 80091bc:	08009bc5 	.word	0x08009bc5
 80091c0:	08009bb8 	.word	0x08009bb8

080091c4 <_calloc_r>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	fba1 5402 	umull	r5, r4, r1, r2
 80091ca:	b93c      	cbnz	r4, 80091dc <_calloc_r+0x18>
 80091cc:	4629      	mov	r1, r5
 80091ce:	f7fd f8bd 	bl	800634c <_malloc_r>
 80091d2:	4606      	mov	r6, r0
 80091d4:	b928      	cbnz	r0, 80091e2 <_calloc_r+0x1e>
 80091d6:	2600      	movs	r6, #0
 80091d8:	4630      	mov	r0, r6
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	220c      	movs	r2, #12
 80091de:	6002      	str	r2, [r0, #0]
 80091e0:	e7f9      	b.n	80091d6 <_calloc_r+0x12>
 80091e2:	462a      	mov	r2, r5
 80091e4:	4621      	mov	r1, r4
 80091e6:	f7fc ffc6 	bl	8006176 <memset>
 80091ea:	e7f5      	b.n	80091d8 <_calloc_r+0x14>

080091ec <malloc>:
 80091ec:	4b02      	ldr	r3, [pc, #8]	@ (80091f8 <malloc+0xc>)
 80091ee:	4601      	mov	r1, r0
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	f7fd b8ab 	b.w	800634c <_malloc_r>
 80091f6:	bf00      	nop
 80091f8:	2000002c 	.word	0x2000002c

080091fc <_malloc_usable_size_r>:
 80091fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009200:	1f18      	subs	r0, r3, #4
 8009202:	2b00      	cmp	r3, #0
 8009204:	bfbc      	itt	lt
 8009206:	580b      	ldrlt	r3, [r1, r0]
 8009208:	18c0      	addlt	r0, r0, r3
 800920a:	4770      	bx	lr

0800920c <fiprintf>:
 800920c:	b40e      	push	{r1, r2, r3}
 800920e:	b503      	push	{r0, r1, lr}
 8009210:	4601      	mov	r1, r0
 8009212:	ab03      	add	r3, sp, #12
 8009214:	4805      	ldr	r0, [pc, #20]	@ (800922c <fiprintf+0x20>)
 8009216:	f853 2b04 	ldr.w	r2, [r3], #4
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	f000 f835 	bl	800928c <_vfiprintf_r>
 8009222:	b002      	add	sp, #8
 8009224:	f85d eb04 	ldr.w	lr, [sp], #4
 8009228:	b003      	add	sp, #12
 800922a:	4770      	bx	lr
 800922c:	2000002c 	.word	0x2000002c

08009230 <abort>:
 8009230:	2006      	movs	r0, #6
 8009232:	b508      	push	{r3, lr}
 8009234:	f000 f9fe 	bl	8009634 <raise>
 8009238:	2001      	movs	r0, #1
 800923a:	f7f9 f86c 	bl	8002316 <_exit>

0800923e <__sfputc_r>:
 800923e:	6893      	ldr	r3, [r2, #8]
 8009240:	b410      	push	{r4}
 8009242:	3b01      	subs	r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	6093      	str	r3, [r2, #8]
 8009248:	da07      	bge.n	800925a <__sfputc_r+0x1c>
 800924a:	6994      	ldr	r4, [r2, #24]
 800924c:	42a3      	cmp	r3, r4
 800924e:	db01      	blt.n	8009254 <__sfputc_r+0x16>
 8009250:	290a      	cmp	r1, #10
 8009252:	d102      	bne.n	800925a <__sfputc_r+0x1c>
 8009254:	bc10      	pop	{r4}
 8009256:	f000 b931 	b.w	80094bc <__swbuf_r>
 800925a:	6813      	ldr	r3, [r2, #0]
 800925c:	1c58      	adds	r0, r3, #1
 800925e:	6010      	str	r0, [r2, #0]
 8009260:	7019      	strb	r1, [r3, #0]
 8009262:	4608      	mov	r0, r1
 8009264:	bc10      	pop	{r4}
 8009266:	4770      	bx	lr

08009268 <__sfputs_r>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	4606      	mov	r6, r0
 800926c:	460f      	mov	r7, r1
 800926e:	4614      	mov	r4, r2
 8009270:	18d5      	adds	r5, r2, r3
 8009272:	42ac      	cmp	r4, r5
 8009274:	d101      	bne.n	800927a <__sfputs_r+0x12>
 8009276:	2000      	movs	r0, #0
 8009278:	e007      	b.n	800928a <__sfputs_r+0x22>
 800927a:	463a      	mov	r2, r7
 800927c:	4630      	mov	r0, r6
 800927e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009282:	f7ff ffdc 	bl	800923e <__sfputc_r>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d1f3      	bne.n	8009272 <__sfputs_r+0xa>
 800928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800928c <_vfiprintf_r>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	460d      	mov	r5, r1
 8009292:	4614      	mov	r4, r2
 8009294:	4698      	mov	r8, r3
 8009296:	4606      	mov	r6, r0
 8009298:	b09d      	sub	sp, #116	@ 0x74
 800929a:	b118      	cbz	r0, 80092a4 <_vfiprintf_r+0x18>
 800929c:	6a03      	ldr	r3, [r0, #32]
 800929e:	b90b      	cbnz	r3, 80092a4 <_vfiprintf_r+0x18>
 80092a0:	f7fc fea4 	bl	8005fec <__sinit>
 80092a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092a6:	07d9      	lsls	r1, r3, #31
 80092a8:	d405      	bmi.n	80092b6 <_vfiprintf_r+0x2a>
 80092aa:	89ab      	ldrh	r3, [r5, #12]
 80092ac:	059a      	lsls	r2, r3, #22
 80092ae:	d402      	bmi.n	80092b6 <_vfiprintf_r+0x2a>
 80092b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092b2:	f7fc ffda 	bl	800626a <__retarget_lock_acquire_recursive>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	071b      	lsls	r3, r3, #28
 80092ba:	d501      	bpl.n	80092c0 <_vfiprintf_r+0x34>
 80092bc:	692b      	ldr	r3, [r5, #16]
 80092be:	b99b      	cbnz	r3, 80092e8 <_vfiprintf_r+0x5c>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f000 f938 	bl	8009538 <__swsetup_r>
 80092c8:	b170      	cbz	r0, 80092e8 <_vfiprintf_r+0x5c>
 80092ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092cc:	07dc      	lsls	r4, r3, #31
 80092ce:	d504      	bpl.n	80092da <_vfiprintf_r+0x4e>
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	b01d      	add	sp, #116	@ 0x74
 80092d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	0598      	lsls	r0, r3, #22
 80092de:	d4f7      	bmi.n	80092d0 <_vfiprintf_r+0x44>
 80092e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092e2:	f7fc ffc3 	bl	800626c <__retarget_lock_release_recursive>
 80092e6:	e7f3      	b.n	80092d0 <_vfiprintf_r+0x44>
 80092e8:	2300      	movs	r3, #0
 80092ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ec:	2320      	movs	r3, #32
 80092ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092f2:	2330      	movs	r3, #48	@ 0x30
 80092f4:	f04f 0901 	mov.w	r9, #1
 80092f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80092fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80094a8 <_vfiprintf_r+0x21c>
 8009300:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009304:	4623      	mov	r3, r4
 8009306:	469a      	mov	sl, r3
 8009308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930c:	b10a      	cbz	r2, 8009312 <_vfiprintf_r+0x86>
 800930e:	2a25      	cmp	r2, #37	@ 0x25
 8009310:	d1f9      	bne.n	8009306 <_vfiprintf_r+0x7a>
 8009312:	ebba 0b04 	subs.w	fp, sl, r4
 8009316:	d00b      	beq.n	8009330 <_vfiprintf_r+0xa4>
 8009318:	465b      	mov	r3, fp
 800931a:	4622      	mov	r2, r4
 800931c:	4629      	mov	r1, r5
 800931e:	4630      	mov	r0, r6
 8009320:	f7ff ffa2 	bl	8009268 <__sfputs_r>
 8009324:	3001      	adds	r0, #1
 8009326:	f000 80a7 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 800932a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800932c:	445a      	add	r2, fp
 800932e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009330:	f89a 3000 	ldrb.w	r3, [sl]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 809f 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 800933a:	2300      	movs	r3, #0
 800933c:	f04f 32ff 	mov.w	r2, #4294967295
 8009340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009344:	f10a 0a01 	add.w	sl, sl, #1
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	9307      	str	r3, [sp, #28]
 800934c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009350:	931a      	str	r3, [sp, #104]	@ 0x68
 8009352:	4654      	mov	r4, sl
 8009354:	2205      	movs	r2, #5
 8009356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935a:	4853      	ldr	r0, [pc, #332]	@ (80094a8 <_vfiprintf_r+0x21c>)
 800935c:	f7fe fe54 	bl	8008008 <memchr>
 8009360:	9a04      	ldr	r2, [sp, #16]
 8009362:	b9d8      	cbnz	r0, 800939c <_vfiprintf_r+0x110>
 8009364:	06d1      	lsls	r1, r2, #27
 8009366:	bf44      	itt	mi
 8009368:	2320      	movmi	r3, #32
 800936a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800936e:	0713      	lsls	r3, r2, #28
 8009370:	bf44      	itt	mi
 8009372:	232b      	movmi	r3, #43	@ 0x2b
 8009374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009378:	f89a 3000 	ldrb.w	r3, [sl]
 800937c:	2b2a      	cmp	r3, #42	@ 0x2a
 800937e:	d015      	beq.n	80093ac <_vfiprintf_r+0x120>
 8009380:	4654      	mov	r4, sl
 8009382:	2000      	movs	r0, #0
 8009384:	f04f 0c0a 	mov.w	ip, #10
 8009388:	9a07      	ldr	r2, [sp, #28]
 800938a:	4621      	mov	r1, r4
 800938c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009390:	3b30      	subs	r3, #48	@ 0x30
 8009392:	2b09      	cmp	r3, #9
 8009394:	d94b      	bls.n	800942e <_vfiprintf_r+0x1a2>
 8009396:	b1b0      	cbz	r0, 80093c6 <_vfiprintf_r+0x13a>
 8009398:	9207      	str	r2, [sp, #28]
 800939a:	e014      	b.n	80093c6 <_vfiprintf_r+0x13a>
 800939c:	eba0 0308 	sub.w	r3, r0, r8
 80093a0:	fa09 f303 	lsl.w	r3, r9, r3
 80093a4:	4313      	orrs	r3, r2
 80093a6:	46a2      	mov	sl, r4
 80093a8:	9304      	str	r3, [sp, #16]
 80093aa:	e7d2      	b.n	8009352 <_vfiprintf_r+0xc6>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	1d19      	adds	r1, r3, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	9103      	str	r1, [sp, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfbb      	ittet	lt
 80093b8:	425b      	neglt	r3, r3
 80093ba:	f042 0202 	orrlt.w	r2, r2, #2
 80093be:	9307      	strge	r3, [sp, #28]
 80093c0:	9307      	strlt	r3, [sp, #28]
 80093c2:	bfb8      	it	lt
 80093c4:	9204      	strlt	r2, [sp, #16]
 80093c6:	7823      	ldrb	r3, [r4, #0]
 80093c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80093ca:	d10a      	bne.n	80093e2 <_vfiprintf_r+0x156>
 80093cc:	7863      	ldrb	r3, [r4, #1]
 80093ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80093d0:	d132      	bne.n	8009438 <_vfiprintf_r+0x1ac>
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	3402      	adds	r4, #2
 80093d6:	1d1a      	adds	r2, r3, #4
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	9203      	str	r2, [sp, #12]
 80093dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80094ac <_vfiprintf_r+0x220>
 80093e6:	2203      	movs	r2, #3
 80093e8:	4650      	mov	r0, sl
 80093ea:	7821      	ldrb	r1, [r4, #0]
 80093ec:	f7fe fe0c 	bl	8008008 <memchr>
 80093f0:	b138      	cbz	r0, 8009402 <_vfiprintf_r+0x176>
 80093f2:	2240      	movs	r2, #64	@ 0x40
 80093f4:	9b04      	ldr	r3, [sp, #16]
 80093f6:	eba0 000a 	sub.w	r0, r0, sl
 80093fa:	4082      	lsls	r2, r0
 80093fc:	4313      	orrs	r3, r2
 80093fe:	3401      	adds	r4, #1
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009406:	2206      	movs	r2, #6
 8009408:	4829      	ldr	r0, [pc, #164]	@ (80094b0 <_vfiprintf_r+0x224>)
 800940a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800940e:	f7fe fdfb 	bl	8008008 <memchr>
 8009412:	2800      	cmp	r0, #0
 8009414:	d03f      	beq.n	8009496 <_vfiprintf_r+0x20a>
 8009416:	4b27      	ldr	r3, [pc, #156]	@ (80094b4 <_vfiprintf_r+0x228>)
 8009418:	bb1b      	cbnz	r3, 8009462 <_vfiprintf_r+0x1d6>
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	3307      	adds	r3, #7
 800941e:	f023 0307 	bic.w	r3, r3, #7
 8009422:	3308      	adds	r3, #8
 8009424:	9303      	str	r3, [sp, #12]
 8009426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009428:	443b      	add	r3, r7
 800942a:	9309      	str	r3, [sp, #36]	@ 0x24
 800942c:	e76a      	b.n	8009304 <_vfiprintf_r+0x78>
 800942e:	460c      	mov	r4, r1
 8009430:	2001      	movs	r0, #1
 8009432:	fb0c 3202 	mla	r2, ip, r2, r3
 8009436:	e7a8      	b.n	800938a <_vfiprintf_r+0xfe>
 8009438:	2300      	movs	r3, #0
 800943a:	f04f 0c0a 	mov.w	ip, #10
 800943e:	4619      	mov	r1, r3
 8009440:	3401      	adds	r4, #1
 8009442:	9305      	str	r3, [sp, #20]
 8009444:	4620      	mov	r0, r4
 8009446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944a:	3a30      	subs	r2, #48	@ 0x30
 800944c:	2a09      	cmp	r2, #9
 800944e:	d903      	bls.n	8009458 <_vfiprintf_r+0x1cc>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0c6      	beq.n	80093e2 <_vfiprintf_r+0x156>
 8009454:	9105      	str	r1, [sp, #20]
 8009456:	e7c4      	b.n	80093e2 <_vfiprintf_r+0x156>
 8009458:	4604      	mov	r4, r0
 800945a:	2301      	movs	r3, #1
 800945c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009460:	e7f0      	b.n	8009444 <_vfiprintf_r+0x1b8>
 8009462:	ab03      	add	r3, sp, #12
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	462a      	mov	r2, r5
 8009468:	4630      	mov	r0, r6
 800946a:	4b13      	ldr	r3, [pc, #76]	@ (80094b8 <_vfiprintf_r+0x22c>)
 800946c:	a904      	add	r1, sp, #16
 800946e:	f3af 8000 	nop.w
 8009472:	4607      	mov	r7, r0
 8009474:	1c78      	adds	r0, r7, #1
 8009476:	d1d6      	bne.n	8009426 <_vfiprintf_r+0x19a>
 8009478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800947a:	07d9      	lsls	r1, r3, #31
 800947c:	d405      	bmi.n	800948a <_vfiprintf_r+0x1fe>
 800947e:	89ab      	ldrh	r3, [r5, #12]
 8009480:	059a      	lsls	r2, r3, #22
 8009482:	d402      	bmi.n	800948a <_vfiprintf_r+0x1fe>
 8009484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009486:	f7fc fef1 	bl	800626c <__retarget_lock_release_recursive>
 800948a:	89ab      	ldrh	r3, [r5, #12]
 800948c:	065b      	lsls	r3, r3, #25
 800948e:	f53f af1f 	bmi.w	80092d0 <_vfiprintf_r+0x44>
 8009492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009494:	e71e      	b.n	80092d4 <_vfiprintf_r+0x48>
 8009496:	ab03      	add	r3, sp, #12
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	462a      	mov	r2, r5
 800949c:	4630      	mov	r0, r6
 800949e:	4b06      	ldr	r3, [pc, #24]	@ (80094b8 <_vfiprintf_r+0x22c>)
 80094a0:	a904      	add	r1, sp, #16
 80094a2:	f7fe f9ef 	bl	8007884 <_printf_i>
 80094a6:	e7e4      	b.n	8009472 <_vfiprintf_r+0x1e6>
 80094a8:	08009981 	.word	0x08009981
 80094ac:	08009987 	.word	0x08009987
 80094b0:	0800998b 	.word	0x0800998b
 80094b4:	00000000 	.word	0x00000000
 80094b8:	08009269 	.word	0x08009269

080094bc <__swbuf_r>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	460e      	mov	r6, r1
 80094c0:	4614      	mov	r4, r2
 80094c2:	4605      	mov	r5, r0
 80094c4:	b118      	cbz	r0, 80094ce <__swbuf_r+0x12>
 80094c6:	6a03      	ldr	r3, [r0, #32]
 80094c8:	b90b      	cbnz	r3, 80094ce <__swbuf_r+0x12>
 80094ca:	f7fc fd8f 	bl	8005fec <__sinit>
 80094ce:	69a3      	ldr	r3, [r4, #24]
 80094d0:	60a3      	str	r3, [r4, #8]
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	071a      	lsls	r2, r3, #28
 80094d6:	d501      	bpl.n	80094dc <__swbuf_r+0x20>
 80094d8:	6923      	ldr	r3, [r4, #16]
 80094da:	b943      	cbnz	r3, 80094ee <__swbuf_r+0x32>
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f82a 	bl	8009538 <__swsetup_r>
 80094e4:	b118      	cbz	r0, 80094ee <__swbuf_r+0x32>
 80094e6:	f04f 37ff 	mov.w	r7, #4294967295
 80094ea:	4638      	mov	r0, r7
 80094ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	b2f6      	uxtb	r6, r6
 80094f4:	1a98      	subs	r0, r3, r2
 80094f6:	6963      	ldr	r3, [r4, #20]
 80094f8:	4637      	mov	r7, r6
 80094fa:	4283      	cmp	r3, r0
 80094fc:	dc05      	bgt.n	800950a <__swbuf_r+0x4e>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f7fe fcab 	bl	8007e5c <_fflush_r>
 8009506:	2800      	cmp	r0, #0
 8009508:	d1ed      	bne.n	80094e6 <__swbuf_r+0x2a>
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	3b01      	subs	r3, #1
 800950e:	60a3      	str	r3, [r4, #8]
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	6022      	str	r2, [r4, #0]
 8009516:	701e      	strb	r6, [r3, #0]
 8009518:	6962      	ldr	r2, [r4, #20]
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	429a      	cmp	r2, r3
 800951e:	d004      	beq.n	800952a <__swbuf_r+0x6e>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	07db      	lsls	r3, r3, #31
 8009524:	d5e1      	bpl.n	80094ea <__swbuf_r+0x2e>
 8009526:	2e0a      	cmp	r6, #10
 8009528:	d1df      	bne.n	80094ea <__swbuf_r+0x2e>
 800952a:	4621      	mov	r1, r4
 800952c:	4628      	mov	r0, r5
 800952e:	f7fe fc95 	bl	8007e5c <_fflush_r>
 8009532:	2800      	cmp	r0, #0
 8009534:	d0d9      	beq.n	80094ea <__swbuf_r+0x2e>
 8009536:	e7d6      	b.n	80094e6 <__swbuf_r+0x2a>

08009538 <__swsetup_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4b29      	ldr	r3, [pc, #164]	@ (80095e0 <__swsetup_r+0xa8>)
 800953c:	4605      	mov	r5, r0
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	460c      	mov	r4, r1
 8009542:	b118      	cbz	r0, 800954c <__swsetup_r+0x14>
 8009544:	6a03      	ldr	r3, [r0, #32]
 8009546:	b90b      	cbnz	r3, 800954c <__swsetup_r+0x14>
 8009548:	f7fc fd50 	bl	8005fec <__sinit>
 800954c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009550:	0719      	lsls	r1, r3, #28
 8009552:	d422      	bmi.n	800959a <__swsetup_r+0x62>
 8009554:	06da      	lsls	r2, r3, #27
 8009556:	d407      	bmi.n	8009568 <__swsetup_r+0x30>
 8009558:	2209      	movs	r2, #9
 800955a:	602a      	str	r2, [r5, #0]
 800955c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009560:	f04f 30ff 	mov.w	r0, #4294967295
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	e033      	b.n	80095d0 <__swsetup_r+0x98>
 8009568:	0758      	lsls	r0, r3, #29
 800956a:	d512      	bpl.n	8009592 <__swsetup_r+0x5a>
 800956c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800956e:	b141      	cbz	r1, 8009582 <__swsetup_r+0x4a>
 8009570:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009574:	4299      	cmp	r1, r3
 8009576:	d002      	beq.n	800957e <__swsetup_r+0x46>
 8009578:	4628      	mov	r0, r5
 800957a:	f7fc fe7d 	bl	8006278 <_free_r>
 800957e:	2300      	movs	r3, #0
 8009580:	6363      	str	r3, [r4, #52]	@ 0x34
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	2300      	movs	r3, #0
 800958c:	6063      	str	r3, [r4, #4]
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f043 0308 	orr.w	r3, r3, #8
 8009598:	81a3      	strh	r3, [r4, #12]
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	b94b      	cbnz	r3, 80095b2 <__swsetup_r+0x7a>
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095a8:	d003      	beq.n	80095b2 <__swsetup_r+0x7a>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 f882 	bl	80096b6 <__smakebuf_r>
 80095b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b6:	f013 0201 	ands.w	r2, r3, #1
 80095ba:	d00a      	beq.n	80095d2 <__swsetup_r+0x9a>
 80095bc:	2200      	movs	r2, #0
 80095be:	60a2      	str	r2, [r4, #8]
 80095c0:	6962      	ldr	r2, [r4, #20]
 80095c2:	4252      	negs	r2, r2
 80095c4:	61a2      	str	r2, [r4, #24]
 80095c6:	6922      	ldr	r2, [r4, #16]
 80095c8:	b942      	cbnz	r2, 80095dc <__swsetup_r+0xa4>
 80095ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095ce:	d1c5      	bne.n	800955c <__swsetup_r+0x24>
 80095d0:	bd38      	pop	{r3, r4, r5, pc}
 80095d2:	0799      	lsls	r1, r3, #30
 80095d4:	bf58      	it	pl
 80095d6:	6962      	ldrpl	r2, [r4, #20]
 80095d8:	60a2      	str	r2, [r4, #8]
 80095da:	e7f4      	b.n	80095c6 <__swsetup_r+0x8e>
 80095dc:	2000      	movs	r0, #0
 80095de:	e7f7      	b.n	80095d0 <__swsetup_r+0x98>
 80095e0:	2000002c 	.word	0x2000002c

080095e4 <_raise_r>:
 80095e4:	291f      	cmp	r1, #31
 80095e6:	b538      	push	{r3, r4, r5, lr}
 80095e8:	4605      	mov	r5, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	d904      	bls.n	80095f8 <_raise_r+0x14>
 80095ee:	2316      	movs	r3, #22
 80095f0:	6003      	str	r3, [r0, #0]
 80095f2:	f04f 30ff 	mov.w	r0, #4294967295
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095fa:	b112      	cbz	r2, 8009602 <_raise_r+0x1e>
 80095fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009600:	b94b      	cbnz	r3, 8009616 <_raise_r+0x32>
 8009602:	4628      	mov	r0, r5
 8009604:	f000 f830 	bl	8009668 <_getpid_r>
 8009608:	4622      	mov	r2, r4
 800960a:	4601      	mov	r1, r0
 800960c:	4628      	mov	r0, r5
 800960e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009612:	f000 b817 	b.w	8009644 <_kill_r>
 8009616:	2b01      	cmp	r3, #1
 8009618:	d00a      	beq.n	8009630 <_raise_r+0x4c>
 800961a:	1c59      	adds	r1, r3, #1
 800961c:	d103      	bne.n	8009626 <_raise_r+0x42>
 800961e:	2316      	movs	r3, #22
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	2001      	movs	r0, #1
 8009624:	e7e7      	b.n	80095f6 <_raise_r+0x12>
 8009626:	2100      	movs	r1, #0
 8009628:	4620      	mov	r0, r4
 800962a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800962e:	4798      	blx	r3
 8009630:	2000      	movs	r0, #0
 8009632:	e7e0      	b.n	80095f6 <_raise_r+0x12>

08009634 <raise>:
 8009634:	4b02      	ldr	r3, [pc, #8]	@ (8009640 <raise+0xc>)
 8009636:	4601      	mov	r1, r0
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f7ff bfd3 	b.w	80095e4 <_raise_r>
 800963e:	bf00      	nop
 8009640:	2000002c 	.word	0x2000002c

08009644 <_kill_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	2300      	movs	r3, #0
 8009648:	4d06      	ldr	r5, [pc, #24]	@ (8009664 <_kill_r+0x20>)
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	4611      	mov	r1, r2
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	f7f8 fe50 	bl	80022f6 <_kill>
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	d102      	bne.n	8009660 <_kill_r+0x1c>
 800965a:	682b      	ldr	r3, [r5, #0]
 800965c:	b103      	cbz	r3, 8009660 <_kill_r+0x1c>
 800965e:	6023      	str	r3, [r4, #0]
 8009660:	bd38      	pop	{r3, r4, r5, pc}
 8009662:	bf00      	nop
 8009664:	20000604 	.word	0x20000604

08009668 <_getpid_r>:
 8009668:	f7f8 be3e 	b.w	80022e8 <_getpid>

0800966c <__swhatbuf_r>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	460c      	mov	r4, r1
 8009670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009674:	4615      	mov	r5, r2
 8009676:	2900      	cmp	r1, #0
 8009678:	461e      	mov	r6, r3
 800967a:	b096      	sub	sp, #88	@ 0x58
 800967c:	da0c      	bge.n	8009698 <__swhatbuf_r+0x2c>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	2100      	movs	r1, #0
 8009682:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009686:	bf14      	ite	ne
 8009688:	2340      	movne	r3, #64	@ 0x40
 800968a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800968e:	2000      	movs	r0, #0
 8009690:	6031      	str	r1, [r6, #0]
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	b016      	add	sp, #88	@ 0x58
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	466a      	mov	r2, sp
 800969a:	f000 f849 	bl	8009730 <_fstat_r>
 800969e:	2800      	cmp	r0, #0
 80096a0:	dbed      	blt.n	800967e <__swhatbuf_r+0x12>
 80096a2:	9901      	ldr	r1, [sp, #4]
 80096a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096ac:	4259      	negs	r1, r3
 80096ae:	4159      	adcs	r1, r3
 80096b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096b4:	e7eb      	b.n	800968e <__swhatbuf_r+0x22>

080096b6 <__smakebuf_r>:
 80096b6:	898b      	ldrh	r3, [r1, #12]
 80096b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ba:	079d      	lsls	r5, r3, #30
 80096bc:	4606      	mov	r6, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	d507      	bpl.n	80096d2 <__smakebuf_r+0x1c>
 80096c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	2301      	movs	r3, #1
 80096cc:	6163      	str	r3, [r4, #20]
 80096ce:	b003      	add	sp, #12
 80096d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d2:	466a      	mov	r2, sp
 80096d4:	ab01      	add	r3, sp, #4
 80096d6:	f7ff ffc9 	bl	800966c <__swhatbuf_r>
 80096da:	9f00      	ldr	r7, [sp, #0]
 80096dc:	4605      	mov	r5, r0
 80096de:	4639      	mov	r1, r7
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7fc fe33 	bl	800634c <_malloc_r>
 80096e6:	b948      	cbnz	r0, 80096fc <__smakebuf_r+0x46>
 80096e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ec:	059a      	lsls	r2, r3, #22
 80096ee:	d4ee      	bmi.n	80096ce <__smakebuf_r+0x18>
 80096f0:	f023 0303 	bic.w	r3, r3, #3
 80096f4:	f043 0302 	orr.w	r3, r3, #2
 80096f8:	81a3      	strh	r3, [r4, #12]
 80096fa:	e7e2      	b.n	80096c2 <__smakebuf_r+0xc>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	6020      	str	r0, [r4, #0]
 800970c:	b15b      	cbz	r3, 8009726 <__smakebuf_r+0x70>
 800970e:	4630      	mov	r0, r6
 8009710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009714:	f000 f81e 	bl	8009754 <_isatty_r>
 8009718:	b128      	cbz	r0, 8009726 <__smakebuf_r+0x70>
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f023 0303 	bic.w	r3, r3, #3
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	431d      	orrs	r5, r3
 800972a:	81a5      	strh	r5, [r4, #12]
 800972c:	e7cf      	b.n	80096ce <__smakebuf_r+0x18>
	...

08009730 <_fstat_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	2300      	movs	r3, #0
 8009734:	4d06      	ldr	r5, [pc, #24]	@ (8009750 <_fstat_r+0x20>)
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	f7f8 fe39 	bl	80023b4 <_fstat>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d102      	bne.n	800974c <_fstat_r+0x1c>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	b103      	cbz	r3, 800974c <_fstat_r+0x1c>
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	bd38      	pop	{r3, r4, r5, pc}
 800974e:	bf00      	nop
 8009750:	20000604 	.word	0x20000604

08009754 <_isatty_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	2300      	movs	r3, #0
 8009758:	4d05      	ldr	r5, [pc, #20]	@ (8009770 <_isatty_r+0x1c>)
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f8 fe37 	bl	80023d2 <_isatty>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_isatty_r+0x1a>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_isatty_r+0x1a>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	20000604 	.word	0x20000604

08009774 <roundf>:
 8009774:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009778:	3b7f      	subs	r3, #127	@ 0x7f
 800977a:	2b16      	cmp	r3, #22
 800977c:	4601      	mov	r1, r0
 800977e:	b510      	push	{r4, lr}
 8009780:	dc14      	bgt.n	80097ac <roundf+0x38>
 8009782:	2b00      	cmp	r3, #0
 8009784:	da07      	bge.n	8009796 <roundf+0x22>
 8009786:	3301      	adds	r3, #1
 8009788:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800978c:	d101      	bne.n	8009792 <roundf+0x1e>
 800978e:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 8009792:	4608      	mov	r0, r1
 8009794:	bd10      	pop	{r4, pc}
 8009796:	4a08      	ldr	r2, [pc, #32]	@ (80097b8 <roundf+0x44>)
 8009798:	411a      	asrs	r2, r3
 800979a:	4202      	tst	r2, r0
 800979c:	d0f9      	beq.n	8009792 <roundf+0x1e>
 800979e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80097a2:	4119      	asrs	r1, r3
 80097a4:	4401      	add	r1, r0
 80097a6:	ea21 0102 	bic.w	r1, r1, r2
 80097aa:	e7f2      	b.n	8009792 <roundf+0x1e>
 80097ac:	2b80      	cmp	r3, #128	@ 0x80
 80097ae:	d1f0      	bne.n	8009792 <roundf+0x1e>
 80097b0:	f7f7 f9b8 	bl	8000b24 <__addsf3>
 80097b4:	4601      	mov	r1, r0
 80097b6:	e7ec      	b.n	8009792 <roundf+0x1e>
 80097b8:	007fffff 	.word	0x007fffff

080097bc <_init>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	bf00      	nop
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr

080097c8 <_fini>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	bf00      	nop
 80097cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ce:	bc08      	pop	{r3}
 80097d0:	469e      	mov	lr, r3
 80097d2:	4770      	bx	lr
