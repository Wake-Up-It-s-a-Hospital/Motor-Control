/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint32_t IC_Val1 = 0;
uint32_t IC_Val2 = 0;
uint32_t IC_Val3 = 0;
uint32_t IC_Val4 = 0;
uint32_t IC_Val5 = 0;
uint32_t IC_Val6 = 0;
uint32_t IC_Val7 = 0;
uint32_t IC_Val8 = 0;
uint32_t IC_Val9 = 0;
uint32_t IC_Val10 = 0;
uint32_t Difference1 = 0;
uint32_t Difference2 = 0;
uint32_t Difference3 = 0;
uint32_t Difference4 = 0;
uint32_t Difference5 = 0;
uint8_t Is_First_Captured1 = 0;
uint8_t Is_First_Captured2 = 0;
uint8_t Is_First_Captured3 = 0;
uint8_t Is_First_Captured4 = 0;
uint8_t Is_First_Captured5 = 0;
uint16_t Distance1  = 0;
uint16_t Distance2 = 0;
uint16_t Distance3 = 0;
uint16_t Distance4 = 0;
uint16_t Distance5 = 0;

uint8_t sensor_part1 = 0;
uint8_t sensor_part2 = 0;
uint8_t sensor_part3 = 0;
uint8_t sensor_part4 = 0;
uint8_t sensor_part5 = 0;
uint32_t delay_count = 0;
uint32_t ultra_count = 0;
uint8_t ultra_delay1 = 0;
uint8_t ultra_delay2 = 0;
uint8_t ultra_delay3 = 0;
uint8_t ultra_delay4 = 0;
uint8_t ultra_delay5 = 0;

char uart_buf[8];
char re_data[8];
char uwb_buf[4];
char fe_data[5];
float uwb_data;
int x_data, y_data;
float w_L, w_R;
uint32_t PWM1_value, PWM2_value;

float r = 0.0575;
float b = 0.257;
float dis, theta, V, W, W_test;
float K_v = 2;
float K_w = 2;
float K_t = 0.125;
float D_w;

#define PI 3.1415926535

#define RX_BUF_SIZE 32

uint8_t rx_byte;
char rx_buf[RX_BUF_SIZE];
uint8_t rx_index = 0;
volatile uint8_t rx_flag = 0;
int rx_theta;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM1) {
		if (ultra_delay1 == 1) {
			if (ultra_count >= 10) {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
				ultra_count = 0;
				ultra_delay1 = 0;
			}
			else {
				ultra_count++;
			}
		}
		else if (ultra_delay2 == 1) {
			if (ultra_count >= 10) {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
				ultra_count = 0;
				ultra_delay2 = 0;
			}
			else {
				ultra_count++;
			}
		}
		else if (ultra_delay3 == 1) {
			if (ultra_count >= 10) {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
				__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
				ultra_count = 0;
				ultra_delay3 = 0;
			}
			else {
				ultra_count++;
			}
		}
		else if (ultra_delay4 == 1) {
			if (ultra_count >= 10) {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
				__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
				ultra_count = 0;
				ultra_delay4 = 0;
			}
			else {
				ultra_count++;
			}
		}
		else if (ultra_delay5 == 1) {
			if (ultra_count >= 10) {
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
				__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
				ultra_count = 0;
				ultra_delay5 = 0;
			}
			else {
				ultra_count++;
			}
		}
		else if (sensor_part2 == 1) {
			delay_count++;
		}
		else if (sensor_part1 == 1) {
			delay_count++;
		}
		else if (sensor_part3 == 1) {
			delay_count++;
		}
		else if (sensor_part4 == 1) {
			delay_count++;
		}
		else if (sensor_part5 == 1) {
			delay_count++;
		}
	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM2) {
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
		{
			if (Is_First_Captured1==0)
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
				Is_First_Captured1 = 1;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
			}

			else if (Is_First_Captured1==1)
			{
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
				__HAL_TIM_SET_COUNTER(htim, 0);

				if (IC_Val2 > IC_Val1)
				{
					Difference1 = IC_Val2-IC_Val1;
				}

				else if (IC_Val1 > IC_Val2)
				{
					Difference1 = (0xffff - IC_Val1) + IC_Val2;
				}

				Distance1 = Difference1 * .034/2;
				Is_First_Captured1 = 0;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			if (Is_First_Captured2==0)
			{
				IC_Val3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
				Is_First_Captured2 = 1;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
			}

			else if (Is_First_Captured2==1)
			{
				IC_Val4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
				__HAL_TIM_SET_COUNTER(htim, 0);

				if (IC_Val4 > IC_Val3)
				{
					Difference2 = IC_Val4 - IC_Val3;
				}

				else if (IC_Val3 > IC_Val4)
				{
					Difference2 = (0xffff - IC_Val3) + IC_Val4;
				}

				Distance2 = Difference2 * .034/2;
				Is_First_Captured2 = 0;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
			}
		}

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
		{
			if (Is_First_Captured3==0)
			{
				IC_Val5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
				Is_First_Captured3 = 1;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
			}

			else if (Is_First_Captured3==1)
			{
				IC_Val6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
				__HAL_TIM_SET_COUNTER(htim, 0);

				if (IC_Val6 > IC_Val5)
				{
					Difference3 = IC_Val6 - IC_Val5;
				}

				else if (IC_Val5 > IC_Val6)
				{
					Difference3 = (0xffff - IC_Val5) + IC_Val6;
				}

				Distance3 = Difference3 * .034/2;
				Is_First_Captured3 = 0;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
			}
		}
	}
	else if (htim->Instance == TIM4) {
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
		{
			if (Is_First_Captured4==0)
			{
				IC_Val7 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
				Is_First_Captured4 = 1;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
			}

			else if (Is_First_Captured4==1)
			{
				IC_Val8 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
				__HAL_TIM_SET_COUNTER(htim, 0);

				if (IC_Val8 > IC_Val7)
				{
					Difference4 = IC_Val8 - IC_Val7;
				}

				else if (IC_Val7 > IC_Val8)
				{
					Difference4 = (0xffff - IC_Val7) + IC_Val8;
				}

				Distance4 = Difference4 * .034/2;
				Is_First_Captured4 = 0;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
			}
		}

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			if (Is_First_Captured5==0)
			{
				IC_Val9 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
				Is_First_Captured5 = 1;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
			}

			else if (Is_First_Captured5==1)
			{
				IC_Val10 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
				__HAL_TIM_SET_COUNTER(htim, 0);

				if (IC_Val10 > IC_Val9)
				{
					Difference5 = IC_Val10 - IC_Val9;
				}

				else if (IC_Val9 > IC_Val10)
				{
					Difference5 = (0xffff - IC_Val9) + IC_Val10;
				}

				Distance5 = Difference5 * .034/2;
				Is_First_Captured5 = 0;

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
			}
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart -> Instance == USART1) {
		for (int i = 0; i < 4; i++) {
			if (uwb_buf[(i + 1) % 4] == '.') {
				for (int j = 0; j < 4; j++) {
					fe_data[j] = uwb_buf[(i + j) % 4];
				}
			}
		}

		fe_data[4] = '\0';

		sscanf(fe_data, "%f", &dis);

		dis = roundf(dis * 100) / 100;

		HAL_UART_Receive_IT(&huart1, &uwb_buf, 4);
	}

    if (huart->Instance == USART3) {
		if (rx_byte == '/') {
			rx_buf[rx_index] = rx_byte;
			rx_buf[rx_index + 1] = '\0';
			rx_flag = 1;
			rx_index = 0;
		} else {
			if (rx_index < RX_BUF_SIZE - 1) {
				rx_buf[rx_index++] = rx_byte;
			} else {
				rx_index = 0;
			}
		}
		HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
    }
}

void HCSR04_Read1 (void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	delay_count = 0;
	ultra_delay1 = 1;
}

void HCSR04_Read2 (void)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
	delay_count = 0;
	ultra_delay2 = 1;
}

void HCSR04_Read3 (void)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
	delay_count = 0;
	ultra_delay3 = 1;
}
void HCSR04_Read4 (void)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	delay_count = 0;
	ultra_delay4 = 1;
}
void HCSR04_Read5 (void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	delay_count = 0;
	ultra_delay5 = 1;
}

float d_w(float dis) {
	if (dis < 0.8) {
		return dis * 1.25;
	}
	else {
		return 1.0;
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  MX_USART1_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM4_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
/*  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
  HAL_TIM_Base_Start_IT(&htim1);

  sensor_part5 = 1;*/

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);

  HAL_UART_Receive_IT(&huart1, &uwb_buf, 4);
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
/*	  if (sensor_part5 == 1 && delay_count >= 300) {
		  sensor_part5 = 0;
		  HCSR04_Read1();
		  sensor_part1 = 1;
	  }

	  if (sensor_part1 == 1 && delay_count >= 300) {
		  sensor_part1 = 0;
		  HCSR04_Read2();
		  sensor_part2 = 1;
	  }

	  if (sensor_part2 == 1 && delay_count >= 300) {
		  sensor_part2 = 0;
		  HCSR04_Read3();
		  sensor_part3 = 1;
	  }
	  if (sensor_part3 == 1 && delay_count >= 300) {
		  sensor_part3 = 0;
		  HCSR04_Read4();
		  sensor_part4 = 1;
	  }
	  if (sensor_part4 == 1 && delay_count >= 300) {
		  sensor_part4 = 0;
		  HCSR04_Read5();
		  sensor_part5 = 1;
	  }

	  if (Distance1 < 10 || Distance2 < 10 || Distance3 < 10 || Distance4 < 10 || Distance5 < 10) {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }*/


	  if (rx_flag) {
	      rx_flag = 0;

	      sscanf(rx_buf, "%d/", &rx_theta);
	  }

	  if (dis > 1.00) {
		  dis = 1.00;
	  }

	  theta = -(rx_theta);

	  if (theta > -20 && theta < 20) {
		  theta = 0;
	  }

	  D_w = d_w(dis);

	  if (dis >= 0.8) {
		  V = K_v * (dis - 0.8);
	  }
	  else {
		  V = K_t * dis;
	  }

	  W = K_w * theta * PI / 180;
	  W_test = W * b / 2;

	  w_L = ((V - W * b / 2) / r) * D_w;
	  w_R = ((V + W * b / 2) / r) * D_w;

/*	  w_L = (V - W * b / 2) / r;
	  w_R = (V + W * b / 2) / r;*/

	  PWM1_value = w_L / 26.28 * 100;
	  PWM2_value = w_R / 26.28 * 100;

	  if (PWM1_value > 100) {
	    	PWM1_value = 100;
	  }
	  if (PWM2_value > 100) {
		  PWM2_value = 100;
	  }

	  PWM1_value = 10;
	  PWM2_value = 10;


	  if (dis >= 0.8) {
		  if (theta > 45 || theta < -45) {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
		  }
	  }
	  else if (dis < 0.8) {
		  if (theta > 45 || theta < -45) {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
		  }
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
