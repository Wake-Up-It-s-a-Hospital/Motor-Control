
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080034c0  080034c0  000044c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ec  080034ec  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080034ec  080034ec  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034ec  080034ec  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ec  080034ec  000044ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034f0  080034f0  000044f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003500  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003500  00005138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba0c  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d78  00000000  00000000  00010a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000127c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000934  00000000  00000000  00013388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001705a  00000000  00000000  00013cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dab9  00000000  00000000  0002ad16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868e2  00000000  00000000  000387cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf0b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003180  00000000  00000000  000bf0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000c2274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080034a8 	.word	0x080034a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080034a8 	.word	0x080034a8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b39      	ldr	r3, [pc, #228]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a38      	ldr	r2, [pc, #224]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a32      	ldr	r2, [pc, #200]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b30      	ldr	r3, [pc, #192]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a2c      	ldr	r2, [pc, #176]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a26      	ldr	r2, [pc, #152]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <MX_GPIO_Init+0xfc>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f641 0130 	movw	r1, #6192	@ 0x1830
 80009a6:	4821      	ldr	r0, [pc, #132]	@ (8000a2c <MX_GPIO_Init+0x100>)
 80009a8:	f001 f8ca 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b2:	481f      	ldr	r0, [pc, #124]	@ (8000a30 <MX_GPIO_Init+0x104>)
 80009b4:	f001 f8c4 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <MX_GPIO_Init+0x108>)
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	481a      	ldr	r0, [pc, #104]	@ (8000a38 <MX_GPIO_Init+0x10c>)
 80009ce:	f000 ff33 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80009d2:	f641 0330 	movw	r3, #6192	@ 0x1830
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <MX_GPIO_Init+0x100>)
 80009ec:	f000 ff24 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <MX_GPIO_Init+0x104>)
 8000a0a:	f000 ff15 	bl	8001838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2028      	movs	r0, #40	@ 0x28
 8000a14:	f000 fed9 	bl	80017ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a18:	2028      	movs	r0, #40	@ 0x28
 8000a1a:	f000 fef2 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	10110000 	.word	0x10110000
 8000a38:	40011000 	.word	0x40011000

08000a3c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//ISR of us단위 Delay
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d11d      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x4e>
		if (ultra_delay == 1) {
 8000a4e:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d106      	bne.n	8000a64 <HAL_TIM_PeriodElapsedCallback+0x28>
			ultra_state = 1;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
			ultra_delay = 0;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
		}
		else if (sensor_part1 == 1) {
			delay_count++;
		}
	}
}
 8000a62:	e012      	b.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x4e>
		else if (sensor_part2 == 1) {
 8000a64:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d105      	bne.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x3c>
			delay_count++;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a74:	6013      	str	r3, [r2, #0]
}
 8000a76:	e008      	b.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x4e>
		else if (sensor_part1 == 1) {
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x4e>
			delay_count++;
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40012c00 	.word	0x40012c00
 8000a98:	20000058 	.word	0x20000058
 8000a9c:	20000059 	.word	0x20000059
 8000aa0:	20000053 	.word	0x20000053
 8000aa4:	20000054 	.word	0x20000054
 8000aa8:	20000052 	.word	0x20000052
 8000aac:	00000000 	.word	0x00000000

08000ab0 <HAL_TIM_IC_CaptureCallback>:

//Ultrasonic Echo ISR
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7f1b      	ldrb	r3, [r3, #28]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	f040 8083 	bne.w	8000bc8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured1==0)
 8000ac2:	4b99      	ldr	r3, [pc, #612]	@ (8000d28 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d11a      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000aca:	2100      	movs	r1, #0
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f002 f8db 	bl	8002c88 <HAL_TIM_ReadCapturedValue>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4a95      	ldr	r2, [pc, #596]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000ad6:	6013      	str	r3, [r2, #0]
			Is_First_Captured1 = 1;
 8000ad8:	4b93      	ldr	r3, [pc, #588]	@ (8000d28 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6a1a      	ldr	r2, [r3, #32]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 020a 	bic.w	r2, r2, #10
 8000aec:	621a      	str	r2, [r3, #32]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6a1a      	ldr	r2, [r3, #32]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f042 0202 	orr.w	r2, r2, #2
 8000afc:	621a      	str	r2, [r3, #32]
 8000afe:	e063      	b.n	8000bc8 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured1==1)
 8000b00:	4b89      	ldr	r3, [pc, #548]	@ (8000d28 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d15f      	bne.n	8000bc8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f002 f8bc 	bl	8002c88 <HAL_TIM_ReadCapturedValue>
 8000b10:	4603      	mov	r3, r0
 8000b12:	4a87      	ldr	r2, [pc, #540]	@ (8000d30 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b14:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24

			if (IC_Val2 > IC_Val1)
 8000b1e:	4b84      	ldr	r3, [pc, #528]	@ (8000d30 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b82      	ldr	r3, [pc, #520]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d907      	bls.n	8000b3a <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference1 = IC_Val2-IC_Val1;
 8000b2a:	4b81      	ldr	r3, [pc, #516]	@ (8000d30 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	4a7f      	ldr	r2, [pc, #508]	@ (8000d34 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	e00f      	b.n	8000b5a <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_Val1 > IC_Val2)
 8000b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8000d30 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d909      	bls.n	8000b5a <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference1 = (0xffff - IC_Val1) + IC_Val2;
 8000b46:	4b7a      	ldr	r3, [pc, #488]	@ (8000d30 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b78      	ldr	r3, [pc, #480]	@ (8000d2c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000b54:	33ff      	adds	r3, #255	@ 0xff
 8000b56:	4a77      	ldr	r2, [pc, #476]	@ (8000d34 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000b58:	6013      	str	r3, [r2, #0]
			}

			Distance1 = Difference1 * .034/2;
 8000b5a:	4b76      	ldr	r3, [pc, #472]	@ (8000d34 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fc38 	bl	80003d4 <__aeabi_ui2d>
 8000b64:	a36e      	add	r3, pc, #440	@ (adr r3, 8000d20 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6a:	f7ff fcad 	bl	80004c8 <__aeabi_dmul>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	4610      	mov	r0, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b7e:	f7ff fdcd 	bl	800071c <__aeabi_ddiv>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	4610      	mov	r0, r2
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f7ff feaf 	bl	80008ec <__aeabi_d2uiz>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b69      	ldr	r3, [pc, #420]	@ (8000d38 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000b94:	701a      	strb	r2, [r3, #0]
			Is_First_Captured1 = 0;
 8000b96:	4b64      	ldr	r3, [pc, #400]	@ (8000d28 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6a1a      	ldr	r2, [r3, #32]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f022 020a 	bic.w	r2, r2, #10
 8000baa:	621a      	str	r2, [r3, #32]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6a12      	ldr	r2, [r2, #32]
 8000bb6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000bb8:	4b60      	ldr	r3, [pc, #384]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f022 0202 	bic.w	r2, r2, #2
 8000bc6:	60da      	str	r2, [r3, #12]
		}
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7f1b      	ldrb	r3, [r3, #28]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	f040 8083 	bne.w	8000cd8 <HAL_TIM_IC_CaptureCallback+0x228>
	{
		if (Is_First_Captured2==0)
 8000bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d11a      	bne.n	8000c10 <HAL_TIM_IC_CaptureCallback+0x160>
		{
			IC_Val3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000bda:	2104      	movs	r1, #4
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f002 f853 	bl	8002c88 <HAL_TIM_ReadCapturedValue>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a57      	ldr	r2, [pc, #348]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000be6:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 1;
 8000be8:	4b55      	ldr	r3, [pc, #340]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6a1a      	ldr	r2, [r3, #32]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000bfc:	621a      	str	r2, [r3, #32]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6a1a      	ldr	r2, [r3, #32]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f042 0220 	orr.w	r2, r2, #32
 8000c0c:	621a      	str	r2, [r3, #32]
 8000c0e:	e063      	b.n	8000cd8 <HAL_TIM_IC_CaptureCallback+0x228>
		}

		else if (Is_First_Captured2==1)
 8000c10:	4b4b      	ldr	r3, [pc, #300]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d15f      	bne.n	8000cd8 <HAL_TIM_IC_CaptureCallback+0x228>
		{
			IC_Val4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000c18:	2104      	movs	r1, #4
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f002 f834 	bl	8002c88 <HAL_TIM_ReadCapturedValue>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a49      	ldr	r2, [pc, #292]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000c24:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	@ 0x24

			if (IC_Val4 > IC_Val3)
 8000c2e:	4b46      	ldr	r3, [pc, #280]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b44      	ldr	r3, [pc, #272]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <HAL_TIM_IC_CaptureCallback+0x19a>
			{
				Difference2 = IC_Val4 - IC_Val3;
 8000c3a:	4b43      	ldr	r3, [pc, #268]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b41      	ldr	r3, [pc, #260]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	4a41      	ldr	r2, [pc, #260]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e00f      	b.n	8000c6a <HAL_TIM_IC_CaptureCallback+0x1ba>
			}

			else if (IC_Val3 > IC_Val4)
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d909      	bls.n	8000c6a <HAL_TIM_IC_CaptureCallback+0x1ba>
			{
				Difference2 = (0xffff - IC_Val3) + IC_Val4;
 8000c56:	4b3c      	ldr	r3, [pc, #240]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c64:	33ff      	adds	r3, #255	@ 0xff
 8000c66:	4a39      	ldr	r2, [pc, #228]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8000c68:	6013      	str	r3, [r2, #0]
			}

			Distance2 = Difference2 * .034/2;
 8000c6a:	4b38      	ldr	r3, [pc, #224]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fbb0 	bl	80003d4 <__aeabi_ui2d>
 8000c74:	a32a      	add	r3, pc, #168	@ (adr r3, 8000d20 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7a:	f7ff fc25 	bl	80004c8 <__aeabi_dmul>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4610      	mov	r0, r2
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c8e:	f7ff fd45 	bl	800071c <__aeabi_ddiv>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f7ff fe27 	bl	80008ec <__aeabi_d2uiz>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8000ca4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured2 = 0;
 8000ca6:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6a1a      	ldr	r2, [r3, #32]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000cba:	621a      	str	r2, [r3, #32]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6a12      	ldr	r2, [r2, #32]
 8000cc6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0204 	bic.w	r2, r2, #4
 8000cd6:	60da      	str	r2, [r3, #12]
		}
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7f1b      	ldrb	r3, [r3, #28]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	f040 80a1 	bne.w	8000e24 <HAL_TIM_IC_CaptureCallback+0x374>
	{
		if (Is_First_Captured3==0)
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d138      	bne.n	8000d5c <HAL_TIM_IC_CaptureCallback+0x2ac>
		{
			IC_Val5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000cea:	2108      	movs	r1, #8
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f001 ffcb 	bl	8002c88 <HAL_TIM_ReadCapturedValue>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000cf6:	6013      	str	r3, [r2, #0]
			Is_First_Captured3 = 1;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6a1a      	ldr	r2, [r3, #32]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000d0c:	621a      	str	r2, [r3, #32]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6a1a      	ldr	r2, [r3, #32]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d1c:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
		}
	}
}
 8000d1e:	e081      	b.n	8000e24 <HAL_TIM_IC_CaptureCallback+0x374>
 8000d20:	b020c49c 	.word	0xb020c49c
 8000d24:	3fa16872 	.word	0x3fa16872
 8000d28:	2000004c 	.word	0x2000004c
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	2000002c 	.word	0x2000002c
 8000d34:	20000040 	.word	0x20000040
 8000d38:	2000004f 	.word	0x2000004f
 8000d3c:	200000a4 	.word	0x200000a4
 8000d40:	2000004d 	.word	0x2000004d
 8000d44:	20000030 	.word	0x20000030
 8000d48:	20000034 	.word	0x20000034
 8000d4c:	20000044 	.word	0x20000044
 8000d50:	20000050 	.word	0x20000050
 8000d54:	2000004e 	.word	0x2000004e
 8000d58:	20000038 	.word	0x20000038
		else if (Is_First_Captured3==1)
 8000d5c:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <HAL_TIM_IC_CaptureCallback+0x388>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d15f      	bne.n	8000e24 <HAL_TIM_IC_CaptureCallback+0x374>
			IC_Val6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000d64:	2108      	movs	r1, #8
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f001 ff8e 	bl	8002c88 <HAL_TIM_ReadCapturedValue>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4a33      	ldr	r2, [pc, #204]	@ (8000e3c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000d70:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val6 > IC_Val5)
 8000d7a:	4b30      	ldr	r3, [pc, #192]	@ (8000e3c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <HAL_TIM_IC_CaptureCallback+0x390>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <HAL_TIM_IC_CaptureCallback+0x2e6>
				Difference3 = IC_Val6 - IC_Val5;
 8000d86:	4b2d      	ldr	r3, [pc, #180]	@ (8000e3c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <HAL_TIM_IC_CaptureCallback+0x390>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	4a2c      	ldr	r2, [pc, #176]	@ (8000e44 <HAL_TIM_IC_CaptureCallback+0x394>)
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e00f      	b.n	8000db6 <HAL_TIM_IC_CaptureCallback+0x306>
			else if (IC_Val5 > IC_Val6)
 8000d96:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <HAL_TIM_IC_CaptureCallback+0x390>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b28      	ldr	r3, [pc, #160]	@ (8000e3c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <HAL_TIM_IC_CaptureCallback+0x306>
				Difference3 = (0xffff - IC_Val5) + IC_Val6;
 8000da2:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <HAL_TIM_IC_CaptureCallback+0x390>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000db0:	33ff      	adds	r3, #255	@ 0xff
 8000db2:	4a24      	ldr	r2, [pc, #144]	@ (8000e44 <HAL_TIM_IC_CaptureCallback+0x394>)
 8000db4:	6013      	str	r3, [r2, #0]
			Distance3 = Difference3 * .034/2;
 8000db6:	4b23      	ldr	r3, [pc, #140]	@ (8000e44 <HAL_TIM_IC_CaptureCallback+0x394>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fb0a 	bl	80003d4 <__aeabi_ui2d>
 8000dc0:	a31b      	add	r3, pc, #108	@ (adr r3, 8000e30 <HAL_TIM_IC_CaptureCallback+0x380>)
 8000dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc6:	f7ff fb7f 	bl	80004c8 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dda:	f7ff fc9f 	bl	800071c <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fd81 	bl	80008ec <__aeabi_d2uiz>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_TIM_IC_CaptureCallback+0x398>)
 8000df0:	701a      	strb	r2, [r3, #0]
			Is_First_Captured3 = 0;
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <HAL_TIM_IC_CaptureCallback+0x388>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6a1a      	ldr	r2, [r3, #32]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000e06:	621a      	str	r2, [r3, #32]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a12      	ldr	r2, [r2, #32]
 8000e12:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
 8000e14:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0208 	bic.w	r2, r2, #8
 8000e22:	60da      	str	r2, [r3, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	f3af 8000 	nop.w
 8000e30:	b020c49c 	.word	0xb020c49c
 8000e34:	3fa16872 	.word	0x3fa16872
 8000e38:	2000004e 	.word	0x2000004e
 8000e3c:	2000003c 	.word	0x2000003c
 8000e40:	20000038 	.word	0x20000038
 8000e44:	20000048 	.word	0x20000048
 8000e48:	20000051 	.word	0x20000051
 8000e4c:	200000a4 	.word	0x200000a4

08000e50 <HCSR04_Read1>:

//Ultrasonic trig_1
void HCSR04_Read1 (void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e5a:	4817      	ldr	r0, [pc, #92]	@ (8000eb8 <HCSR04_Read1+0x68>)
 8000e5c:	f000 fe70 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	4814      	ldr	r0, [pc, #80]	@ (8000eb8 <HCSR04_Read1+0x68>)
 8000e66:	f000 fe6b 	bl	8001b40 <HAL_GPIO_WritePin>

	ultra_delay = 1;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HCSR04_Read1+0x6c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
	if (ultra_state == 1) {
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <HCSR04_Read1+0x70>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d11d      	bne.n	8000eb4 <HCSR04_Read1+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e7e:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <HCSR04_Read1+0x68>)
 8000e80:	f000 fe5e 	bl	8001b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	480b      	ldr	r0, [pc, #44]	@ (8000eb8 <HCSR04_Read1+0x68>)
 8000e8a:	f000 fe59 	bl	8001b40 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HCSR04_Read1+0x74>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HCSR04_Read1+0x74>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0202 	orr.w	r2, r2, #2
 8000e9c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC3);
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HCSR04_Read1+0x74>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <HCSR04_Read1+0x74>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 0208 	orr.w	r2, r2, #8
 8000eac:	60da      	str	r2, [r3, #12]
		ultra_state = 0;
 8000eae:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <HCSR04_Read1+0x70>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40010800 	.word	0x40010800
 8000ebc:	20000058 	.word	0x20000058
 8000ec0:	20000059 	.word	0x20000059
 8000ec4:	200000a4 	.word	0x200000a4

08000ec8 <HCSR04_Read2>:

//Ultrasonic trig_2
void HCSR04_Read2 (void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed2:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <HCSR04_Read2+0x44>)
 8000ed4:	f000 fe34 	bl	8001b40 <HAL_GPIO_WritePin>

	ultra_delay = 1;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HCSR04_Read2+0x48>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
	if (ultra_state == 1) {
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <HCSR04_Read2+0x4c>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d110      	bne.n	8000f08 <HCSR04_Read2+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eec:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <HCSR04_Read2+0x44>)
 8000eee:	f000 fe27 	bl	8001b40 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HCSR04_Read2+0x50>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <HCSR04_Read2+0x50>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f042 0204 	orr.w	r2, r2, #4
 8000f00:	60da      	str	r2, [r3, #12]
		ultra_state = 0;
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <HCSR04_Read2+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
	}
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	20000058 	.word	0x20000058
 8000f14:	20000059 	.word	0x20000059
 8000f18:	200000a4 	.word	0x200000a4

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 fb1a 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f86c 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f7ff fd00 	bl	800092c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f2c:	f000 fa86 	bl	800143c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f30:	f000 f932 	bl	8001198 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f34:	f000 f980 	bl	8001238 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4828      	ldr	r0, [pc, #160]	@ (8000fdc <main+0xc0>)
 8000f3c:	f001 fb44 	bl	80025c8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f40:	2104      	movs	r1, #4
 8000f42:	4826      	ldr	r0, [pc, #152]	@ (8000fdc <main+0xc0>)
 8000f44:	f001 fb40 	bl	80025c8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000f48:	2108      	movs	r1, #8
 8000f4a:	4824      	ldr	r0, [pc, #144]	@ (8000fdc <main+0xc0>)
 8000f4c:	f001 fb3c 	bl	80025c8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000f50:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <main+0xc4>)
 8000f52:	f001 fa8f 	bl	8002474 <HAL_TIM_Base_Start_IT>

  sensor_part2 = 1;
 8000f56:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <main+0xc8>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (sensor_part2 == 1 && delay_count == 60) {
 8000f5c:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <main+0xc8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d10e      	bne.n	8000f82 <main+0x66>
 8000f64:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <main+0xcc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b3c      	cmp	r3, #60	@ 0x3c
 8000f6a:	d10a      	bne.n	8000f82 <main+0x66>
		  sensor_part2 = 0;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <main+0xc8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
		  delay_count = 0;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <main+0xcc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
		  HCSR04_Read1();
 8000f78:	f7ff ff6a 	bl	8000e50 <HCSR04_Read1>
		  sensor_part1 = 1;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <main+0xd0>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
	  }

	  if (sensor_part1 == 1 && delay_count == 60) {
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <main+0xd0>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10e      	bne.n	8000fa8 <main+0x8c>
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <main+0xcc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b3c      	cmp	r3, #60	@ 0x3c
 8000f90:	d10a      	bne.n	8000fa8 <main+0x8c>
		  sensor_part1 = 0;
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <main+0xd0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
		  delay_count = 0;
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <main+0xcc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
		  HCSR04_Read2();
 8000f9e:	f7ff ff93 	bl	8000ec8 <HCSR04_Read2>
		  sensor_part2 = 1;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <main+0xc8>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
	  }

	  if (Distance1 < 10 || Distance2 < 10 || Distance3 < 10) {
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <main+0xd4>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d907      	bls.n	8000fc0 <main+0xa4>
 8000fb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <main+0xd8>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	d903      	bls.n	8000fc0 <main+0xa4>
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <main+0xdc>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d806      	bhi.n	8000fce <main+0xb2>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <main+0xe0>)
 8000fc8:	f000 fdba 	bl	8001b40 <HAL_GPIO_WritePin>
 8000fcc:	e005      	b.n	8000fda <main+0xbe>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <main+0xe0>)
 8000fd6:	f000 fdb3 	bl	8001b40 <HAL_GPIO_WritePin>
	  if (sensor_part2 == 1 && delay_count == 60) {
 8000fda:	e7bf      	b.n	8000f5c <main+0x40>
 8000fdc:	200000a4 	.word	0x200000a4
 8000fe0:	2000005c 	.word	0x2000005c
 8000fe4:	20000053 	.word	0x20000053
 8000fe8:	20000054 	.word	0x20000054
 8000fec:	20000052 	.word	0x20000052
 8000ff0:	2000004f 	.word	0x2000004f
 8000ff4:	20000050 	.word	0x20000050
 8000ff8:	20000051 	.word	0x20000051
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b090      	sub	sp, #64	@ 0x40
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0318 	add.w	r3, r7, #24
 800100a:	2228      	movs	r2, #40	@ 0x28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f002 fa1e 	bl	8003450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001026:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800102a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001038:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800103e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fdb3 	bl	8001bb4 <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001054:	f000 f819 	bl	800108a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001064:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2102      	movs	r1, #2
 8001072:	4618      	mov	r0, r3
 8001074:	f001 f820 	bl	80020b8 <HAL_RCC_ClockConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800107e:	f000 f804 	bl	800108a <Error_Handler>
  }
}
 8001082:	bf00      	nop
 8001084:	3740      	adds	r7, #64	@ 0x40
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108e:	b672      	cpsid	i
}
 8001090:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001092:	bf00      	nop
 8001094:	e7fd      	b.n	8001092 <Error_Handler+0x8>
	...

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_MspInit+0x5c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <HAL_MspInit+0x5c>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_MspInit+0x5c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <HAL_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <HAL_MspInit+0x5c>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_MspInit+0x5c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_MspInit+0x60>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_MspInit+0x60>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <NMI_Handler+0x4>

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <MemManage_Handler+0x4>

08001114 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <UsageFault_Handler+0x4>

08001124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 fa4a 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <TIM1_UP_IRQHandler+0x10>)
 800115a:	f001 fb41 	bl	80027e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000005c 	.word	0x2000005c

08001168 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <TIM3_IRQHandler+0x10>)
 800116e:	f001 fb37 	bl	80027e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000a4 	.word	0x200000a4

0800117c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001180:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001184:	f000 fcf4 	bl	8001b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001234 <MX_TIM1_Init+0x9c>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011bc:	2247      	movs	r2, #71	@ 0x47
 80011be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e0:	4813      	ldr	r0, [pc, #76]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011e2:	f001 f8f7 	bl	80023d4 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011ec:	f7ff ff4d 	bl	800108a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <MX_TIM1_Init+0x98>)
 80011fe:	f001 fc7b 	bl	8002af8 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001208:	f7ff ff3f 	bl	800108a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_TIM1_Init+0x98>)
 800121a:	f001 ffcb 	bl	80031b4 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001224:	f7ff ff31 	bl	800108a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000005c 	.word	0x2000005c
 8001234:	40012c00 	.word	0x40012c00

08001238 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001262:	4b36      	ldr	r3, [pc, #216]	@ (800133c <MX_TIM3_Init+0x104>)
 8001264:	4a36      	ldr	r2, [pc, #216]	@ (8001340 <MX_TIM3_Init+0x108>)
 8001266:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001268:	4b34      	ldr	r3, [pc, #208]	@ (800133c <MX_TIM3_Init+0x104>)
 800126a:	2247      	movs	r2, #71	@ 0x47
 800126c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b33      	ldr	r3, [pc, #204]	@ (800133c <MX_TIM3_Init+0x104>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001274:	4b31      	ldr	r3, [pc, #196]	@ (800133c <MX_TIM3_Init+0x104>)
 8001276:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800127a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <MX_TIM3_Init+0x104>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b2e      	ldr	r3, [pc, #184]	@ (800133c <MX_TIM3_Init+0x104>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001288:	482c      	ldr	r0, [pc, #176]	@ (800133c <MX_TIM3_Init+0x104>)
 800128a:	f001 f8a3 	bl	80023d4 <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001294:	f7ff fef9 	bl	800108a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4825      	ldr	r0, [pc, #148]	@ (800133c <MX_TIM3_Init+0x104>)
 80012a6:	f001 fc27 	bl	8002af8 <HAL_TIM_ConfigClockSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012b0:	f7ff feeb 	bl	800108a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012b4:	4821      	ldr	r0, [pc, #132]	@ (800133c <MX_TIM3_Init+0x104>)
 80012b6:	f001 f92f 	bl	8002518 <HAL_TIM_IC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012c0:	f7ff fee3 	bl	800108a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	481a      	ldr	r0, [pc, #104]	@ (800133c <MX_TIM3_Init+0x104>)
 80012d4:	f001 ff6e 	bl	80031b4 <HAL_TIMEx_MasterConfigSynchronization>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80012de:	f7ff fed4 	bl	800108a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e6:	2301      	movs	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	@ (800133c <MX_TIM3_Init+0x104>)
 80012fa:	f001 fb61 	bl	80029c0 <HAL_TIM_IC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001304:	f7ff fec1 	bl	800108a <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <MX_TIM3_Init+0x104>)
 8001310:	f001 fb56 	bl	80029c0 <HAL_TIM_IC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800131a:	f7ff feb6 	bl	800108a <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	2208      	movs	r2, #8
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_TIM3_Init+0x104>)
 8001326:	f001 fb4b 	bl	80029c0 <HAL_TIM_IC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001330:	f7ff feab 	bl	800108a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000a4 	.word	0x200000a4
 8001340:	40000400 	.word	0x40000400

08001344 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a32      	ldr	r2, [pc, #200]	@ (8001428 <HAL_TIM_Base_MspInit+0xe4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d114      	bne.n	800138e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001364:	4b31      	ldr	r3, [pc, #196]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a30      	ldr	r2, [pc, #192]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 800136a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b2e      	ldr	r3, [pc, #184]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2019      	movs	r0, #25
 8001382:	f000 fa22 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001386:	2019      	movs	r0, #25
 8001388:	f000 fa3b 	bl	8001802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800138c:	e048      	b.n	8001420 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM3)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a27      	ldr	r2, [pc, #156]	@ (8001430 <HAL_TIM_Base_MspInit+0xec>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d143      	bne.n	8001420 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a23      	ldr	r2, [pc, #140]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	61d3      	str	r3, [r2, #28]
 80013a4:	4b21      	ldr	r3, [pc, #132]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a17      	ldr	r2, [pc, #92]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_TIM_Base_MspInit+0xe8>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e0:	23c0      	movs	r3, #192	@ 0xc0
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4619      	mov	r1, r3
 80013f2:	4810      	ldr	r0, [pc, #64]	@ (8001434 <HAL_TIM_Base_MspInit+0xf0>)
 80013f4:	f000 fa20 	bl	8001838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	4619      	mov	r1, r3
 800140a:	480b      	ldr	r0, [pc, #44]	@ (8001438 <HAL_TIM_Base_MspInit+0xf4>)
 800140c:	f000 fa14 	bl	8001838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	201d      	movs	r0, #29
 8001416:	f000 f9d8 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800141a:	201d      	movs	r0, #29
 800141c:	f000 f9f1 	bl	8001802 <HAL_NVIC_EnableIRQ>
}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	@ 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40012c00 	.word	0x40012c00
 800142c:	40021000 	.word	0x40021000
 8001430:	40000400 	.word	0x40000400
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00

0800143c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_USART2_UART_Init+0x4c>)
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <MX_USART2_UART_Init+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <MX_USART2_UART_Init+0x4c>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_USART2_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_USART2_UART_Init+0x4c>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <MX_USART2_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_USART2_UART_Init+0x4c>)
 8001474:	f001 ff0e 	bl	8003294 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800147e:	f7ff fe04 	bl	800108a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000ec 	.word	0x200000ec
 800148c:	40004400 	.word	0x40004400

08001490 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a15      	ldr	r2, [pc, #84]	@ (8001500 <HAL_UART_MspInit+0x70>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d123      	bne.n	80014f8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <HAL_UART_MspInit+0x74>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4a13      	ldr	r2, [pc, #76]	@ (8001504 <HAL_UART_MspInit+0x74>)
 80014b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ba:	61d3      	str	r3, [r2, #28]
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <HAL_UART_MspInit+0x74>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <HAL_UART_MspInit+0x74>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001504 <HAL_UART_MspInit+0x74>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <HAL_UART_MspInit+0x74>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014e0:	230c      	movs	r3, #12
 80014e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4619      	mov	r1, r3
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <HAL_UART_MspInit+0x78>)
 80014f4:	f000 f9a0 	bl	8001838 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014f8:	bf00      	nop
 80014fa:	3720      	adds	r7, #32
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40004400 	.word	0x40004400
 8001504:	40021000 	.word	0x40021000
 8001508:	40010800 	.word	0x40010800

0800150c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800150c:	f7ff fe3e 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480b      	ldr	r0, [pc, #44]	@ (8001540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001512:	490c      	ldr	r1, [pc, #48]	@ (8001544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001514:	4a0c      	ldr	r2, [pc, #48]	@ (8001548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a09      	ldr	r2, [pc, #36]	@ (800154c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001528:	4c09      	ldr	r4, [pc, #36]	@ (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f001 ff93 	bl	8003460 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153a:	f7ff fcef 	bl	8000f1c <main>
  bx lr
 800153e:	4770      	bx	lr
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001548:	080034f4 	.word	0x080034f4
  ldr r2, =_sbss
 800154c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001550:	20000138 	.word	0x20000138

08001554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC1_2_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_Init+0x28>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_Init+0x28>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 f923 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fd90 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f93b 	bl	800181e <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 f903 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	@ (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a03      	ldr	r2, [pc, #12]	@ (8001604 <HAL_IncTick+0x20>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000008 	.word	0x20000008
 8001604:	20000134 	.word	0x20000134

08001608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	@ (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000134 	.word	0x20000134

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4906      	ldr	r1, [pc, #24]	@ (80016b4 <__NVIC_EnableIRQ+0x34>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	@ (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	@ (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	@ 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff90 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff2d 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff42 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff35 	bl	8001680 <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa2 	bl	8001770 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b08b      	sub	sp, #44	@ 0x2c
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	e169      	b.n	8001b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800184c:	2201      	movs	r2, #1
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8158 	bne.w	8001b1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a9a      	ldr	r2, [pc, #616]	@ (8001ad8 <HAL_GPIO_Init+0x2a0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d05e      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001874:	4a98      	ldr	r2, [pc, #608]	@ (8001ad8 <HAL_GPIO_Init+0x2a0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d875      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800187a:	4a98      	ldr	r2, [pc, #608]	@ (8001adc <HAL_GPIO_Init+0x2a4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d058      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001880:	4a96      	ldr	r2, [pc, #600]	@ (8001adc <HAL_GPIO_Init+0x2a4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d86f      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001886:	4a96      	ldr	r2, [pc, #600]	@ (8001ae0 <HAL_GPIO_Init+0x2a8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d052      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 800188c:	4a94      	ldr	r2, [pc, #592]	@ (8001ae0 <HAL_GPIO_Init+0x2a8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d869      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001892:	4a94      	ldr	r2, [pc, #592]	@ (8001ae4 <HAL_GPIO_Init+0x2ac>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d04c      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001898:	4a92      	ldr	r2, [pc, #584]	@ (8001ae4 <HAL_GPIO_Init+0x2ac>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d863      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800189e:	4a92      	ldr	r2, [pc, #584]	@ (8001ae8 <HAL_GPIO_Init+0x2b0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d046      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 80018a4:	4a90      	ldr	r2, [pc, #576]	@ (8001ae8 <HAL_GPIO_Init+0x2b0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d85d      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d82a      	bhi.n	8001904 <HAL_GPIO_Init+0xcc>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d859      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018b2:	a201      	add	r2, pc, #4	@ (adr r2, 80018b8 <HAL_GPIO_Init+0x80>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	08001933 	.word	0x08001933
 80018bc:	0800190d 	.word	0x0800190d
 80018c0:	0800191f 	.word	0x0800191f
 80018c4:	08001961 	.word	0x08001961
 80018c8:	08001967 	.word	0x08001967
 80018cc:	08001967 	.word	0x08001967
 80018d0:	08001967 	.word	0x08001967
 80018d4:	08001967 	.word	0x08001967
 80018d8:	08001967 	.word	0x08001967
 80018dc:	08001967 	.word	0x08001967
 80018e0:	08001967 	.word	0x08001967
 80018e4:	08001967 	.word	0x08001967
 80018e8:	08001967 	.word	0x08001967
 80018ec:	08001967 	.word	0x08001967
 80018f0:	08001967 	.word	0x08001967
 80018f4:	08001967 	.word	0x08001967
 80018f8:	08001967 	.word	0x08001967
 80018fc:	08001915 	.word	0x08001915
 8001900:	08001929 	.word	0x08001929
 8001904:	4a79      	ldr	r2, [pc, #484]	@ (8001aec <HAL_GPIO_Init+0x2b4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190a:	e02c      	b.n	8001966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e029      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	3304      	adds	r3, #4
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e024      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	3308      	adds	r3, #8
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e01f      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	330c      	adds	r3, #12
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e01a      	b.n	8001968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193a:	2304      	movs	r3, #4
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e013      	b.n	8001968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001948:	2308      	movs	r3, #8
 800194a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	611a      	str	r2, [r3, #16]
          break;
 8001952:	e009      	b.n	8001968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	615a      	str	r2, [r3, #20]
          break;
 800195e:	e003      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x130>
          break;
 8001966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	@ 0xff
 800196c:	d801      	bhi.n	8001972 <HAL_GPIO_Init+0x13a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	e001      	b.n	8001976 <HAL_GPIO_Init+0x13e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2bff      	cmp	r3, #255	@ 0xff
 800197c:	d802      	bhi.n	8001984 <HAL_GPIO_Init+0x14c>
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x152>
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	3b08      	subs	r3, #8
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	210f      	movs	r1, #15
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	401a      	ands	r2, r3
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	431a      	orrs	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80b1 	beq.w	8001b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b8:	4b4d      	ldr	r3, [pc, #308]	@ (8001af0 <HAL_GPIO_Init+0x2b8>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a4c      	ldr	r2, [pc, #304]	@ (8001af0 <HAL_GPIO_Init+0x2b8>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b4a      	ldr	r3, [pc, #296]	@ (8001af0 <HAL_GPIO_Init+0x2b8>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d0:	4a48      	ldr	r2, [pc, #288]	@ (8001af4 <HAL_GPIO_Init+0x2bc>)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a40      	ldr	r2, [pc, #256]	@ (8001af8 <HAL_GPIO_Init+0x2c0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d013      	beq.n	8001a24 <HAL_GPIO_Init+0x1ec>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3f      	ldr	r2, [pc, #252]	@ (8001afc <HAL_GPIO_Init+0x2c4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_GPIO_Init+0x1e8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a3e      	ldr	r2, [pc, #248]	@ (8001b00 <HAL_GPIO_Init+0x2c8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x1e4>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b04 <HAL_GPIO_Init+0x2cc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_GPIO_Init+0x1e0>
 8001a14:	2303      	movs	r3, #3
 8001a16:	e006      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a18:	2304      	movs	r3, #4
 8001a1a:	e004      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a24:	2300      	movs	r3, #0
 8001a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a28:	f002 0203 	and.w	r2, r2, #3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a36:	492f      	ldr	r1, [pc, #188]	@ (8001af4 <HAL_GPIO_Init+0x2bc>)
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a50:	4b2d      	ldr	r3, [pc, #180]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	492c      	ldr	r1, [pc, #176]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4928      	ldr	r1, [pc, #160]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	4922      	ldr	r1, [pc, #136]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	491e      	ldr	r1, [pc, #120]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4918      	ldr	r1, [pc, #96]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aae:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4914      	ldr	r1, [pc, #80]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d021      	beq.n	8001b0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	490e      	ldr	r1, [pc, #56]	@ (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e021      	b.n	8001b1a <HAL_GPIO_Init+0x2e2>
 8001ad6:	bf00      	nop
 8001ad8:	10320000 	.word	0x10320000
 8001adc:	10310000 	.word	0x10310000
 8001ae0:	10220000 	.word	0x10220000
 8001ae4:	10210000 	.word	0x10210000
 8001ae8:	10120000 	.word	0x10120000
 8001aec:	10110000 	.word	0x10110000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40010800 	.word	0x40010800
 8001afc:	40010c00 	.word	0x40010c00
 8001b00:	40011000 	.word	0x40011000
 8001b04:	40011400 	.word	0x40011400
 8001b08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_GPIO_Init+0x304>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	4909      	ldr	r1, [pc, #36]	@ (8001b3c <HAL_GPIO_Init+0x304>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f47f ae8e 	bne.w	800184c <HAL_GPIO_Init+0x14>
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	372c      	adds	r7, #44	@ 0x2c
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b5c:	e003      	b.n	8001b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	041a      	lsls	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f806 	bl	8001ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e272      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8087 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b92      	ldr	r3, [pc, #584]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be0:	4b8f      	ldr	r3, [pc, #572]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d112      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
 8001bec:	4b8c      	ldr	r3, [pc, #560]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	4b89      	ldr	r3, [pc, #548]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d06c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d168      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e24c      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x76>
 8001c1c:	4b80      	ldr	r3, [pc, #512]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a7f      	ldr	r2, [pc, #508]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e02e      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x98>
 8001c32:	4b7b      	ldr	r3, [pc, #492]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7a      	ldr	r2, [pc, #488]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b78      	ldr	r3, [pc, #480]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a77      	ldr	r2, [pc, #476]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0xbc>
 8001c56:	4b72      	ldr	r3, [pc, #456]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a71      	ldr	r2, [pc, #452]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b6f      	ldr	r3, [pc, #444]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6e      	ldr	r2, [pc, #440]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c70:	4b6b      	ldr	r3, [pc, #428]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6a      	ldr	r2, [pc, #424]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b68      	ldr	r3, [pc, #416]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a67      	ldr	r2, [pc, #412]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fcba 	bl	8001608 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fcb6 	bl	8001608 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	@ 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e200      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe4>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fca6 	bl	8001608 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fca2 	bl	8001608 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1ec      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x10c>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cee:	4b4c      	ldr	r3, [pc, #304]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfa:	4b49      	ldr	r3, [pc, #292]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d11c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
 8001d06:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	4b43      	ldr	r3, [pc, #268]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1c0      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4939      	ldr	r1, [pc, #228]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	e03a      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fc5b 	bl	8001608 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff fc57 	bl	8001608 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1a1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4927      	ldr	r1, [pc, #156]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e015      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8a:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc3a 	bl	8001608 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fc36 	bl	8001608 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e180      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03a      	beq.n	8001e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fc1a 	bl	8001608 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fc16 	bl	8001608 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e160      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 face 	bl	8002398 <RCC_Delay>
 8001dfc:	e01c      	b.n	8001e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fc00 	bl	8001608 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fbfc 	bl	8001608 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d908      	bls.n	8001e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e146      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	42420000 	.word	0x42420000
 8001e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b92      	ldr	r3, [pc, #584]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e9      	bne.n	8001e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a6 	beq.w	8001f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b88      	ldr	r3, [pc, #544]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a87      	ldr	r2, [pc, #540]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b85      	ldr	r3, [pc, #532]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b82      	ldr	r3, [pc, #520]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7e      	ldr	r2, [pc, #504]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fbbd 	bl	8001608 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7ff fbb9 	bl	8001608 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	@ 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e103      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b75      	ldr	r3, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x312>
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e02d      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x334>
 8001ece:	4b6a      	ldr	r3, [pc, #424]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a69      	ldr	r2, [pc, #420]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	4b67      	ldr	r3, [pc, #412]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a66      	ldr	r2, [pc, #408]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	e01c      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x356>
 8001ef0:	4b61      	ldr	r3, [pc, #388]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a60      	ldr	r2, [pc, #384]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	4b5e      	ldr	r3, [pc, #376]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a5d      	ldr	r2, [pc, #372]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b58      	ldr	r3, [pc, #352]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a57      	ldr	r2, [pc, #348]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d015      	beq.n	8001f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fb6d 	bl	8001608 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff fb69 	bl	8001608 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0b1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	4b4b      	ldr	r3, [pc, #300]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ee      	beq.n	8001f32 <HAL_RCC_OscConfig+0x37e>
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7ff fb57 	bl	8001608 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff fb53 	bl	8001608 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e09b      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b3c      	ldr	r3, [pc, #240]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8087 	beq.w	80020aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d061      	beq.n	800206c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d146      	bne.n	800203e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fb27 	bl	8001608 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7ff fb23 	bl	8001608 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e06d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe4:	d108      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4921      	ldr	r1, [pc, #132]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a19      	ldr	r1, [r3, #32]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	430b      	orrs	r3, r1
 800200a:	491b      	ldr	r1, [pc, #108]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff faf7 	bl	8001608 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff faf3 	bl	8001608 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e03d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x46a>
 800203c:	e035      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fae0 	bl	8001608 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fadc 	bl	8001608 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e026      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x498>
 800206a:	e01e      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e019      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_RCC_OscConfig+0x500>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	429a      	cmp	r2, r3
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d0      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b67      	ldr	r3, [pc, #412]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4965      	ldr	r1, [pc, #404]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a58      	ldr	r2, [pc, #352]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800211e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d040      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e073      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3d      	ldr	r3, [pc, #244]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06b      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4936      	ldr	r1, [pc, #216]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7ff fa2e 	bl	8001608 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7ff fa2a 	bl	8001608 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e053      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d210      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	4922      	ldr	r1, [pc, #136]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	@ (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <HAL_RCC_ClockConfig+0x1cc>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_RCC_ClockConfig+0x1d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f98c 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
 8002280:	080034c0 	.word	0x080034c0
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x94>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x30>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ba:	e027      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 80022be:	613b      	str	r3, [r7, #16]
      break;
 80022c0:	e027      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0c9b      	lsrs	r3, r3, #18
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d010      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x94>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0c5b      	lsrs	r3, r3, #17
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	4a11      	ldr	r2, [pc, #68]	@ (800232c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	fb03 f202 	mul.w	r2, r3, r2
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e004      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	613b      	str	r3, [r7, #16]
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x98>)
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002312:	693b      	ldr	r3, [r7, #16]
}
 8002314:	4618      	mov	r0, r3
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	007a1200 	.word	0x007a1200
 8002328:	080034d8 	.word	0x080034d8
 800232c:	080034e8 	.word	0x080034e8
 8002330:	003d0900 	.word	0x003d0900

08002334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002338:	4b02      	ldr	r3, [pc, #8]	@ (8002344 <HAL_RCC_GetHCLKFreq+0x10>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	20000000 	.word	0x20000000

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800234c:	f7ff fff2 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	@ (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	080034d0 	.word	0x080034d0

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002374:	f7ff ffde 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	0adb      	lsrs	r3, r3, #11
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4903      	ldr	r1, [pc, #12]	@ (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	080034d0 	.word	0x080034d0

08002398 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a0:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <RCC_Delay+0x34>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <RCC_Delay+0x38>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0a5b      	lsrs	r3, r3, #9
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b4:	bf00      	nop
  }
  while (Delay --);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	60fa      	str	r2, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f9      	bne.n	80023b4 <RCC_Delay+0x1c>
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	20000000 	.word	0x20000000
 80023d0:	10624dd3 	.word	0x10624dd3

080023d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e041      	b.n	800246a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe ffa2 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f000 fc98 	bl	8002d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d001      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e03a      	b.n	8002502 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a18      	ldr	r2, [pc, #96]	@ (800250c <HAL_TIM_Base_Start_IT+0x98>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00e      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x58>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b6:	d009      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x58>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a14      	ldr	r2, [pc, #80]	@ (8002510 <HAL_TIM_Base_Start_IT+0x9c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x58>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a13      	ldr	r2, [pc, #76]	@ (8002514 <HAL_TIM_Base_Start_IT+0xa0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d111      	bne.n	80024f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d010      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ee:	e007      	b.n	8002500 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800

08002518 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e041      	b.n	80025ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f839 	bl	80025b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 fbf6 	bl	8002d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d104      	bne.n	80025e6 <HAL_TIM_IC_Start_IT+0x1e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	e013      	b.n	800260e <HAL_TIM_IC_Start_IT+0x46>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d104      	bne.n	80025f6 <HAL_TIM_IC_Start_IT+0x2e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	e00b      	b.n	800260e <HAL_TIM_IC_Start_IT+0x46>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d104      	bne.n	8002606 <HAL_TIM_IC_Start_IT+0x3e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e003      	b.n	800260e <HAL_TIM_IC_Start_IT+0x46>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <HAL_TIM_IC_Start_IT+0x58>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e013      	b.n	8002648 <HAL_TIM_IC_Start_IT+0x80>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d104      	bne.n	8002630 <HAL_TIM_IC_Start_IT+0x68>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e00b      	b.n	8002648 <HAL_TIM_IC_Start_IT+0x80>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b08      	cmp	r3, #8
 8002634:	d104      	bne.n	8002640 <HAL_TIM_IC_Start_IT+0x78>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e003      	b.n	8002648 <HAL_TIM_IC_Start_IT+0x80>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002646:	b2db      	uxtb	r3, r3
 8002648:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800264a:	7bbb      	ldrb	r3, [r7, #14]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d102      	bne.n	8002656 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002650:	7b7b      	ldrb	r3, [r7, #13]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d001      	beq.n	800265a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0b8      	b.n	80027cc <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <HAL_TIM_IC_Start_IT+0xa2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002668:	e013      	b.n	8002692 <HAL_TIM_IC_Start_IT+0xca>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d104      	bne.n	800267a <HAL_TIM_IC_Start_IT+0xb2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002678:	e00b      	b.n	8002692 <HAL_TIM_IC_Start_IT+0xca>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d104      	bne.n	800268a <HAL_TIM_IC_Start_IT+0xc2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002688:	e003      	b.n	8002692 <HAL_TIM_IC_Start_IT+0xca>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d104      	bne.n	80026a2 <HAL_TIM_IC_Start_IT+0xda>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026a0:	e013      	b.n	80026ca <HAL_TIM_IC_Start_IT+0x102>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d104      	bne.n	80026b2 <HAL_TIM_IC_Start_IT+0xea>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026b0:	e00b      	b.n	80026ca <HAL_TIM_IC_Start_IT+0x102>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d104      	bne.n	80026c2 <HAL_TIM_IC_Start_IT+0xfa>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026c0:	e003      	b.n	80026ca <HAL_TIM_IC_Start_IT+0x102>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d841      	bhi.n	8002754 <HAL_TIM_IC_Start_IT+0x18c>
 80026d0:	a201      	add	r2, pc, #4	@ (adr r2, 80026d8 <HAL_TIM_IC_Start_IT+0x110>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	08002755 	.word	0x08002755
 80026e0:	08002755 	.word	0x08002755
 80026e4:	08002755 	.word	0x08002755
 80026e8:	0800271f 	.word	0x0800271f
 80026ec:	08002755 	.word	0x08002755
 80026f0:	08002755 	.word	0x08002755
 80026f4:	08002755 	.word	0x08002755
 80026f8:	08002731 	.word	0x08002731
 80026fc:	08002755 	.word	0x08002755
 8002700:	08002755 	.word	0x08002755
 8002704:	08002755 	.word	0x08002755
 8002708:	08002743 	.word	0x08002743
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0202 	orr.w	r2, r2, #2
 800271a:	60da      	str	r2, [r3, #12]
      break;
 800271c:	e01d      	b.n	800275a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0204 	orr.w	r2, r2, #4
 800272c:	60da      	str	r2, [r3, #12]
      break;
 800272e:	e014      	b.n	800275a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	60da      	str	r2, [r3, #12]
      break;
 8002740:	e00b      	b.n	800275a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0210 	orr.w	r2, r2, #16
 8002750:	60da      	str	r2, [r3, #12]
      break;
 8002752:	e002      	b.n	800275a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	bf00      	nop
  }

  if (status == HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d134      	bne.n	80027ca <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fcfe 	bl	800316a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <HAL_TIM_IC_Start_IT+0x20c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00e      	beq.n	8002796 <HAL_TIM_IC_Start_IT+0x1ce>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002780:	d009      	beq.n	8002796 <HAL_TIM_IC_Start_IT+0x1ce>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <HAL_TIM_IC_Start_IT+0x210>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_IC_Start_IT+0x1ce>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a12      	ldr	r2, [pc, #72]	@ (80027dc <HAL_TIM_IC_Start_IT+0x214>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d010      	beq.n	80027ca <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b8:	e007      	b.n	80027ca <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800

080027e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d020      	beq.n	8002844 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0202 	mvn.w	r2, #2
 8002814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe f940 	bl	8000ab0 <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fa6c 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa72 	bl	8002d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d020      	beq.n	8002890 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01b      	beq.n	8002890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0204 	mvn.w	r2, #4
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe f91a 	bl	8000ab0 <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fa46 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fa4c 	bl	8002d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d020      	beq.n	80028dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01b      	beq.n	80028dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0208 	mvn.w	r2, #8
 80028ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2204      	movs	r2, #4
 80028b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe f8f4 	bl	8000ab0 <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fa20 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fa26 	bl	8002d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d020      	beq.n	8002928 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0210 	mvn.w	r2, #16
 80028f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2208      	movs	r2, #8
 80028fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe f8ce 	bl	8000ab0 <HAL_TIM_IC_CaptureCallback>
 8002914:	e005      	b.n	8002922 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f9fa 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fa00 	bl	8002d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00c      	beq.n	800294c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0201 	mvn.w	r2, #1
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe f878 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00c      	beq.n	8002970 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fc89 	bl	8003282 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00c      	beq.n	8002994 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800298c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f9d0 	bl	8002d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00c      	beq.n	80029b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0220 	mvn.w	r2, #32
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fc5c 	bl	8003270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_TIM_IC_ConfigChannel+0x1e>
 80029da:	2302      	movs	r3, #2
 80029dc:	e088      	b.n	8002af0 <HAL_TIM_IC_ConfigChannel+0x130>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80029fc:	f000 fa12 	bl	8002e24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 020c 	bic.w	r2, r2, #12
 8002a0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6999      	ldr	r1, [r3, #24]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	619a      	str	r2, [r3, #24]
 8002a22:	e060      	b.n	8002ae6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d11c      	bne.n	8002a64 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002a3a:	f000 fa7b 	bl	8002f34 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002a4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6999      	ldr	r1, [r3, #24]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	619a      	str	r2, [r3, #24]
 8002a62:	e040      	b.n	8002ae6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d11b      	bne.n	8002aa2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002a7a:	f000 fac6 	bl	800300a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 020c 	bic.w	r2, r2, #12
 8002a8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69d9      	ldr	r1, [r3, #28]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]
 8002aa0:	e021      	b.n	8002ae6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d11c      	bne.n	8002ae2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002ab8:	f000 fae2 	bl	8003080 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002aca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69d9      	ldr	r1, [r3, #28]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	61da      	str	r2, [r3, #28]
 8002ae0:	e001      	b.n	8002ae6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_TIM_ConfigClockSource+0x1c>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e0b4      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x186>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b4c:	d03e      	beq.n	8002bcc <HAL_TIM_ConfigClockSource+0xd4>
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b52:	f200 8087 	bhi.w	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b5a:	f000 8086 	beq.w	8002c6a <HAL_TIM_ConfigClockSource+0x172>
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b62:	d87f      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b64:	2b70      	cmp	r3, #112	@ 0x70
 8002b66:	d01a      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xa6>
 8002b68:	2b70      	cmp	r3, #112	@ 0x70
 8002b6a:	d87b      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b60      	cmp	r3, #96	@ 0x60
 8002b6e:	d050      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x11a>
 8002b70:	2b60      	cmp	r3, #96	@ 0x60
 8002b72:	d877      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b50      	cmp	r3, #80	@ 0x50
 8002b76:	d03c      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b78:	2b50      	cmp	r3, #80	@ 0x50
 8002b7a:	d873      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b40      	cmp	r3, #64	@ 0x40
 8002b7e:	d058      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x13a>
 8002b80:	2b40      	cmp	r3, #64	@ 0x40
 8002b82:	d86f      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b30      	cmp	r3, #48	@ 0x30
 8002b86:	d064      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x15a>
 8002b88:	2b30      	cmp	r3, #48	@ 0x30
 8002b8a:	d86b      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d060      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x15a>
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d867      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d05c      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x15a>
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d05a      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x15a>
 8002b9c:	e062      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bae:	f000 fabd 	bl	800312c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	609a      	str	r2, [r3, #8]
      break;
 8002bca:	e04f      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bdc:	f000 faa6 	bl	800312c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bee:	609a      	str	r2, [r3, #8]
      break;
 8002bf0:	e03c      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f000 f96a 	bl	8002ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2150      	movs	r1, #80	@ 0x50
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fa74 	bl	80030f8 <TIM_ITRx_SetConfig>
      break;
 8002c10:	e02c      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f000 f9c4 	bl	8002fac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2160      	movs	r1, #96	@ 0x60
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fa64 	bl	80030f8 <TIM_ITRx_SetConfig>
      break;
 8002c30:	e01c      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f000 f94a 	bl	8002ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2140      	movs	r1, #64	@ 0x40
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fa54 	bl	80030f8 <TIM_ITRx_SetConfig>
      break;
 8002c50:	e00c      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	f000 fa4b 	bl	80030f8 <TIM_ITRx_SetConfig>
      break;
 8002c62:	e003      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      break;
 8002c68:	e000      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	d831      	bhi.n	8002d00 <HAL_TIM_ReadCapturedValue+0x78>
 8002c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cd9 	.word	0x08002cd9
 8002ca8:	08002d01 	.word	0x08002d01
 8002cac:	08002d01 	.word	0x08002d01
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002ce3 	.word	0x08002ce3
 8002cb8:	08002d01 	.word	0x08002d01
 8002cbc:	08002d01 	.word	0x08002d01
 8002cc0:	08002d01 	.word	0x08002d01
 8002cc4:	08002ced 	.word	0x08002ced
 8002cc8:	08002d01 	.word	0x08002d01
 8002ccc:	08002d01 	.word	0x08002d01
 8002cd0:	08002d01 	.word	0x08002d01
 8002cd4:	08002cf7 	.word	0x08002cf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	60fb      	str	r3, [r7, #12]

      break;
 8002ce0:	e00f      	b.n	8002d02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce8:	60fb      	str	r3, [r7, #12]

      break;
 8002cea:	e00a      	b.n	8002d02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	60fb      	str	r3, [r7, #12]

      break;
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	60fb      	str	r3, [r7, #12]

      break;
 8002cfe:	e000      	b.n	8002d02 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002d00:	bf00      	nop
  }

  return tmpreg;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
	...

08002d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e18 <TIM_Base_SetConfig+0xd0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_Base_SetConfig+0x30>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d66:	d007      	beq.n	8002d78 <TIM_Base_SetConfig+0x30>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002e1c <TIM_Base_SetConfig+0xd4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0x30>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a2b      	ldr	r2, [pc, #172]	@ (8002e20 <TIM_Base_SetConfig+0xd8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d108      	bne.n	8002d8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a22      	ldr	r2, [pc, #136]	@ (8002e18 <TIM_Base_SetConfig+0xd0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00b      	beq.n	8002daa <TIM_Base_SetConfig+0x62>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d98:	d007      	beq.n	8002daa <TIM_Base_SetConfig+0x62>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e1c <TIM_Base_SetConfig+0xd4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d003      	beq.n	8002daa <TIM_Base_SetConfig+0x62>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e20 <TIM_Base_SetConfig+0xd8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d108      	bne.n	8002dbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a0d      	ldr	r2, [pc, #52]	@ (8002e18 <TIM_Base_SetConfig+0xd0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d103      	bne.n	8002df0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f023 0201 	bic.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	611a      	str	r2, [r3, #16]
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	40012c00 	.word	0x40012c00
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40000800 	.word	0x40000800

08002e24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f023 0201 	bic.w	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ecc <TIM_TI1_SetConfig+0xa8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00b      	beq.n	8002e6a <TIM_TI1_SetConfig+0x46>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e58:	d007      	beq.n	8002e6a <TIM_TI1_SetConfig+0x46>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <TIM_TI1_SetConfig+0xac>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d003      	beq.n	8002e6a <TIM_TI1_SetConfig+0x46>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed4 <TIM_TI1_SetConfig+0xb0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <TIM_TI1_SetConfig+0x4a>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <TIM_TI1_SetConfig+0x4c>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e003      	b.n	8002e8e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f023 030a 	bic.w	r3, r3, #10
 8002ea8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f003 030a 	and.w	r3, r3, #10
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800

08002ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0201 	bic.w	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f023 030a 	bic.w	r3, r3, #10
 8002f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f023 0210 	bic.w	r2, r3, #16
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	031b      	lsls	r3, r3, #12
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f023 0210 	bic.w	r2, r3, #16
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	031b      	lsls	r3, r3, #12
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	621a      	str	r2, [r3, #32]
}
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800300a:	b480      	push	{r7}
 800300c:	b087      	sub	sp, #28
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003046:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	b2db      	uxtb	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800305a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	621a      	str	r2, [r3, #32]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	031b      	lsls	r3, r3, #12
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	031b      	lsls	r3, r3, #12
 80030d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800310e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	f043 0307 	orr.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	609a      	str	r2, [r3, #8]
}
 8003122:	bf00      	nop
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	021a      	lsls	r2, r3, #8
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	431a      	orrs	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	609a      	str	r2, [r3, #8]
}
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800316a:	b480      	push	{r7}
 800316c:	b087      	sub	sp, #28
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2201      	movs	r2, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	43db      	mvns	r3, r3
 800318c:	401a      	ands	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e046      	b.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a16      	ldr	r2, [pc, #88]	@ (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003218:	d009      	beq.n	800322e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a12      	ldr	r2, [pc, #72]	@ (8003268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a10      	ldr	r2, [pc, #64]	@ (800326c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10c      	bne.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	4313      	orrs	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800

08003270 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e042      	b.n	800332c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe f8e8 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	@ 0x24
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f82b 	bl	8003334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800330c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800336e:	f023 030c 	bic.w	r3, r3, #12
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	430b      	orrs	r3, r1
 800337a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2c      	ldr	r2, [pc, #176]	@ (8003448 <UART_SetConfig+0x114>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d103      	bne.n	80033a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7fe ffe8 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	e002      	b.n	80033aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033a4:	f7fe ffd0 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 80033a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009a      	lsls	r2, r3, #2
 80033b4:	441a      	add	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c0:	4a22      	ldr	r2, [pc, #136]	@ (800344c <UART_SetConfig+0x118>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	0119      	lsls	r1, r3, #4
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009a      	lsls	r2, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e0:	4b1a      	ldr	r3, [pc, #104]	@ (800344c <UART_SetConfig+0x118>)
 80033e2:	fba3 0302 	umull	r0, r3, r3, r2
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	2064      	movs	r0, #100	@ 0x64
 80033ea:	fb00 f303 	mul.w	r3, r0, r3
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	3332      	adds	r3, #50	@ 0x32
 80033f4:	4a15      	ldr	r2, [pc, #84]	@ (800344c <UART_SetConfig+0x118>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003400:	4419      	add	r1, r3
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009a      	lsls	r2, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	fbb2 f2f3 	udiv	r2, r2, r3
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <UART_SetConfig+0x118>)
 800341a:	fba3 0302 	umull	r0, r3, r3, r2
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2064      	movs	r0, #100	@ 0x64
 8003422:	fb00 f303 	mul.w	r3, r0, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	3332      	adds	r3, #50	@ 0x32
 800342c:	4a07      	ldr	r2, [pc, #28]	@ (800344c <UART_SetConfig+0x118>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	440a      	add	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40013800 	.word	0x40013800
 800344c:	51eb851f 	.word	0x51eb851f

08003450 <memset>:
 8003450:	4603      	mov	r3, r0
 8003452:	4402      	add	r2, r0
 8003454:	4293      	cmp	r3, r2
 8003456:	d100      	bne.n	800345a <memset+0xa>
 8003458:	4770      	bx	lr
 800345a:	f803 1b01 	strb.w	r1, [r3], #1
 800345e:	e7f9      	b.n	8003454 <memset+0x4>

08003460 <__libc_init_array>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	2600      	movs	r6, #0
 8003464:	4d0c      	ldr	r5, [pc, #48]	@ (8003498 <__libc_init_array+0x38>)
 8003466:	4c0d      	ldr	r4, [pc, #52]	@ (800349c <__libc_init_array+0x3c>)
 8003468:	1b64      	subs	r4, r4, r5
 800346a:	10a4      	asrs	r4, r4, #2
 800346c:	42a6      	cmp	r6, r4
 800346e:	d109      	bne.n	8003484 <__libc_init_array+0x24>
 8003470:	f000 f81a 	bl	80034a8 <_init>
 8003474:	2600      	movs	r6, #0
 8003476:	4d0a      	ldr	r5, [pc, #40]	@ (80034a0 <__libc_init_array+0x40>)
 8003478:	4c0a      	ldr	r4, [pc, #40]	@ (80034a4 <__libc_init_array+0x44>)
 800347a:	1b64      	subs	r4, r4, r5
 800347c:	10a4      	asrs	r4, r4, #2
 800347e:	42a6      	cmp	r6, r4
 8003480:	d105      	bne.n	800348e <__libc_init_array+0x2e>
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	f855 3b04 	ldr.w	r3, [r5], #4
 8003488:	4798      	blx	r3
 800348a:	3601      	adds	r6, #1
 800348c:	e7ee      	b.n	800346c <__libc_init_array+0xc>
 800348e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003492:	4798      	blx	r3
 8003494:	3601      	adds	r6, #1
 8003496:	e7f2      	b.n	800347e <__libc_init_array+0x1e>
 8003498:	080034ec 	.word	0x080034ec
 800349c:	080034ec 	.word	0x080034ec
 80034a0:	080034ec 	.word	0x080034ec
 80034a4:	080034f0 	.word	0x080034f0

080034a8 <_init>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr

080034b4 <_fini>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr
