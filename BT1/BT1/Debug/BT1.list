
BT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ccc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08003dd8  08003dd8  00004dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f38  08003f38  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f38  08003f38  00004f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f40  08003f40  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f40  08003f40  00004f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f44  08003f44  00004f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08003fa4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08003fa4  000052b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2ba  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002018  00000000  00000000  0001133f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00013358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000997  00000000  00000000  00013fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017538  00000000  00000000  0001493f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecfa  00000000  00000000  0002be77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a24  00000000  00000000  0003ab71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003950  00000000  00000000  000c35d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000c6f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dc0 	.word	0x08003dc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003dc0 	.word	0x08003dc0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b2e      	ldr	r3, [pc, #184]	@ (800022c <MX_GPIO_Init+0xd0>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a2d      	ldr	r2, [pc, #180]	@ (800022c <MX_GPIO_Init+0xd0>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2b      	ldr	r3, [pc, #172]	@ (800022c <MX_GPIO_Init+0xd0>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b28      	ldr	r3, [pc, #160]	@ (800022c <MX_GPIO_Init+0xd0>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a27      	ldr	r2, [pc, #156]	@ (800022c <MX_GPIO_Init+0xd0>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b25      	ldr	r3, [pc, #148]	@ (800022c <MX_GPIO_Init+0xd0>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b22      	ldr	r3, [pc, #136]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a21      	ldr	r2, [pc, #132]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1f      	ldr	r3, [pc, #124]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b1c      	ldr	r3, [pc, #112]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a1b      	ldr	r2, [pc, #108]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b19      	ldr	r3, [pc, #100]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80001d6:	4816      	ldr	r0, [pc, #88]	@ (8000230 <MX_GPIO_Init+0xd4>)
 80001d8:	f001 f812 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001e2:	4b14      	ldr	r3, [pc, #80]	@ (8000234 <MX_GPIO_Init+0xd8>)
 80001e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	4811      	ldr	r0, [pc, #68]	@ (8000238 <MX_GPIO_Init+0xdc>)
 80001f2:	f000 fe81 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80001f6:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80001fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fc:	2301      	movs	r3, #1
 80001fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000200:	2300      	movs	r3, #0
 8000202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000204:	2302      	movs	r3, #2
 8000206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000208:	f107 0310 	add.w	r3, r7, #16
 800020c:	4619      	mov	r1, r3
 800020e:	4808      	ldr	r0, [pc, #32]	@ (8000230 <MX_GPIO_Init+0xd4>)
 8000210:	f000 fe72 	bl	8000ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000214:	2200      	movs	r2, #0
 8000216:	2100      	movs	r1, #0
 8000218:	2028      	movs	r0, #40	@ 0x28
 800021a:	f000 fd84 	bl	8000d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800021e:	2028      	movs	r0, #40	@ 0x28
 8000220:	f000 fd9d 	bl	8000d5e <HAL_NVIC_EnableIRQ>

}
 8000224:	bf00      	nop
 8000226:	3720      	adds	r7, #32
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40021000 	.word	0x40021000
 8000230:	40010800 	.word	0x40010800
 8000234:	10110000 	.word	0x10110000
 8000238:	40011000 	.word	0x40011000

0800023c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// 블루투스 수신 인터럽트
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1) {
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a9b      	ldr	r2, [pc, #620]	@ (80004b8 <HAL_UART_RxCpltCallback+0x27c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	f040 8130 	bne.w	80004b0 <HAL_UART_RxCpltCallback+0x274>
		// 수신 배열 정렬 코드
		for (int i = 0; i < 8; i++) {
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	e029      	b.n	80002aa <HAL_UART_RxCpltCallback+0x6e>
			if (uart_buf[(i + 7) % 8] == '.') {
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	3307      	adds	r3, #7
 800025a:	425a      	negs	r2, r3
 800025c:	f003 0307 	and.w	r3, r3, #7
 8000260:	f002 0207 	and.w	r2, r2, #7
 8000264:	bf58      	it	pl
 8000266:	4253      	negpl	r3, r2
 8000268:	4a94      	ldr	r2, [pc, #592]	@ (80004bc <HAL_UART_RxCpltCallback+0x280>)
 800026a:	5cd3      	ldrb	r3, [r2, r3]
 800026c:	2b2e      	cmp	r3, #46	@ 0x2e
 800026e:	d119      	bne.n	80002a4 <HAL_UART_RxCpltCallback+0x68>
				for (int j = 0; j < 8; j++) {
 8000270:	2300      	movs	r3, #0
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	e013      	b.n	800029e <HAL_UART_RxCpltCallback+0x62>
					re_data[j] = uart_buf[(i + j) % 8];
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4413      	add	r3, r2
 800027c:	425a      	negs	r2, r3
 800027e:	f003 0307 	and.w	r3, r3, #7
 8000282:	f002 0207 	and.w	r2, r2, #7
 8000286:	bf58      	it	pl
 8000288:	4253      	negpl	r3, r2
 800028a:	4a8c      	ldr	r2, [pc, #560]	@ (80004bc <HAL_UART_RxCpltCallback+0x280>)
 800028c:	5cd1      	ldrb	r1, [r2, r3]
 800028e:	4a8c      	ldr	r2, [pc, #560]	@ (80004c0 <HAL_UART_RxCpltCallback+0x284>)
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	4413      	add	r3, r2
 8000294:	460a      	mov	r2, r1
 8000296:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++) {
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	3301      	adds	r3, #1
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	dde8      	ble.n	8000276 <HAL_UART_RxCpltCallback+0x3a>
		for (int i = 0; i < 8; i++) {
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	3301      	adds	r3, #1
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	2b07      	cmp	r3, #7
 80002ae:	ddd2      	ble.n	8000256 <HAL_UART_RxCpltCallback+0x1a>
				}
			}
		}

		// 정수 변환
		sscanf(re_data, "%d,%d.", &x_data, &y_data);
 80002b0:	4b84      	ldr	r3, [pc, #528]	@ (80004c4 <HAL_UART_RxCpltCallback+0x288>)
 80002b2:	4a85      	ldr	r2, [pc, #532]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 80002b4:	4985      	ldr	r1, [pc, #532]	@ (80004cc <HAL_UART_RxCpltCallback+0x290>)
 80002b6:	4882      	ldr	r0, [pc, #520]	@ (80004c0 <HAL_UART_RxCpltCallback+0x284>)
 80002b8:	f002 ff56 	bl	8003168 <siscanf>

		// 임의 차동 구동 코드
		if (x_data >= 49 && y_data >= 49) {
 80002bc:	4b82      	ldr	r3, [pc, #520]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b30      	cmp	r3, #48	@ 0x30
 80002c2:	dd3c      	ble.n	800033e <HAL_UART_RxCpltCallback+0x102>
 80002c4:	4b7f      	ldr	r3, [pc, #508]	@ (80004c4 <HAL_UART_RxCpltCallback+0x288>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b30      	cmp	r3, #48	@ 0x30
 80002ca:	dd38      	ble.n	800033e <HAL_UART_RxCpltCallback+0x102>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002d2:	487f      	ldr	r0, [pc, #508]	@ (80004d0 <HAL_UART_RxCpltCallback+0x294>)
 80002d4:	f000 ff94 	bl	8001200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002de:	487c      	ldr	r0, [pc, #496]	@ (80004d0 <HAL_UART_RxCpltCallback+0x294>)
 80002e0:	f000 ff8e 	bl	8001200 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, ((x_data - 49) / 51) * 100);
 80002e4:	4b78      	ldr	r3, [pc, #480]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3b31      	subs	r3, #49	@ 0x31
 80002ea:	4a7a      	ldr	r2, [pc, #488]	@ (80004d4 <HAL_UART_RxCpltCallback+0x298>)
 80002ec:	fb82 1203 	smull	r1, r2, r2, r3
 80002f0:	441a      	add	r2, r3
 80002f2:	1152      	asrs	r2, r2, #5
 80002f4:	17db      	asrs	r3, r3, #31
 80002f6:	1ad3      	subs	r3, r2, r3
 80002f8:	2264      	movs	r2, #100	@ 0x64
 80002fa:	fb03 f202 	mul.w	r2, r3, r2
 80002fe:	4b76      	ldr	r3, [pc, #472]	@ (80004d8 <HAL_UART_RxCpltCallback+0x29c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, (((x_data - 49) / 51)) * 100 * ((100 - y_data) / 100));
 8000304:	4b70      	ldr	r3, [pc, #448]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b31      	subs	r3, #49	@ 0x31
 800030a:	4a72      	ldr	r2, [pc, #456]	@ (80004d4 <HAL_UART_RxCpltCallback+0x298>)
 800030c:	fb82 1203 	smull	r1, r2, r2, r3
 8000310:	441a      	add	r2, r3
 8000312:	1152      	asrs	r2, r2, #5
 8000314:	17db      	asrs	r3, r3, #31
 8000316:	1ad2      	subs	r2, r2, r3
 8000318:	4b6a      	ldr	r3, [pc, #424]	@ (80004c4 <HAL_UART_RxCpltCallback+0x288>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000320:	496e      	ldr	r1, [pc, #440]	@ (80004dc <HAL_UART_RxCpltCallback+0x2a0>)
 8000322:	fb81 0103 	smull	r0, r1, r1, r3
 8000326:	1149      	asrs	r1, r1, #5
 8000328:	17db      	asrs	r3, r3, #31
 800032a:	1acb      	subs	r3, r1, r3
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	2264      	movs	r2, #100	@ 0x64
 8000332:	fb03 f202 	mul.w	r2, r3, r2
 8000336:	4b68      	ldr	r3, [pc, #416]	@ (80004d8 <HAL_UART_RxCpltCallback+0x29c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	639a      	str	r2, [r3, #56]	@ 0x38
 800033c:	e0b3      	b.n	80004a6 <HAL_UART_RxCpltCallback+0x26a>
		}
		else if (x_data >= 49 && y_data < 49) {
 800033e:	4b62      	ldr	r3, [pc, #392]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b30      	cmp	r3, #48	@ 0x30
 8000344:	dd3a      	ble.n	80003bc <HAL_UART_RxCpltCallback+0x180>
 8000346:	4b5f      	ldr	r3, [pc, #380]	@ (80004c4 <HAL_UART_RxCpltCallback+0x288>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b30      	cmp	r3, #48	@ 0x30
 800034c:	dc36      	bgt.n	80003bc <HAL_UART_RxCpltCallback+0x180>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000354:	485e      	ldr	r0, [pc, #376]	@ (80004d0 <HAL_UART_RxCpltCallback+0x294>)
 8000356:	f000 ff53 	bl	8001200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000360:	485b      	ldr	r0, [pc, #364]	@ (80004d0 <HAL_UART_RxCpltCallback+0x294>)
 8000362:	f000 ff4d 	bl	8001200 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (((x_data - 49) / 51)) * 100 * (y_data / 100));
 8000366:	4b58      	ldr	r3, [pc, #352]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b31      	subs	r3, #49	@ 0x31
 800036c:	4a59      	ldr	r2, [pc, #356]	@ (80004d4 <HAL_UART_RxCpltCallback+0x298>)
 800036e:	fb82 1203 	smull	r1, r2, r2, r3
 8000372:	441a      	add	r2, r3
 8000374:	1152      	asrs	r2, r2, #5
 8000376:	17db      	asrs	r3, r3, #31
 8000378:	1ad2      	subs	r2, r2, r3
 800037a:	4b52      	ldr	r3, [pc, #328]	@ (80004c4 <HAL_UART_RxCpltCallback+0x288>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4957      	ldr	r1, [pc, #348]	@ (80004dc <HAL_UART_RxCpltCallback+0x2a0>)
 8000380:	fb81 0103 	smull	r0, r1, r1, r3
 8000384:	1149      	asrs	r1, r1, #5
 8000386:	17db      	asrs	r3, r3, #31
 8000388:	1acb      	subs	r3, r1, r3
 800038a:	fb02 f303 	mul.w	r3, r2, r3
 800038e:	2264      	movs	r2, #100	@ 0x64
 8000390:	fb03 f202 	mul.w	r2, r3, r2
 8000394:	4b50      	ldr	r3, [pc, #320]	@ (80004d8 <HAL_UART_RxCpltCallback+0x29c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, ((x_data - 49) / 51) * 100);
 800039a:	4b4b      	ldr	r3, [pc, #300]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3b31      	subs	r3, #49	@ 0x31
 80003a0:	4a4c      	ldr	r2, [pc, #304]	@ (80004d4 <HAL_UART_RxCpltCallback+0x298>)
 80003a2:	fb82 1203 	smull	r1, r2, r2, r3
 80003a6:	441a      	add	r2, r3
 80003a8:	1152      	asrs	r2, r2, #5
 80003aa:	17db      	asrs	r3, r3, #31
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	2264      	movs	r2, #100	@ 0x64
 80003b0:	fb03 f202 	mul.w	r2, r3, r2
 80003b4:	4b48      	ldr	r3, [pc, #288]	@ (80004d8 <HAL_UART_RxCpltCallback+0x29c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80003ba:	e074      	b.n	80004a6 <HAL_UART_RxCpltCallback+0x26a>
		}
		else if (x_data < 49 && y_data >= 49) {
 80003bc:	4b42      	ldr	r3, [pc, #264]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b30      	cmp	r3, #48	@ 0x30
 80003c2:	dc36      	bgt.n	8000432 <HAL_UART_RxCpltCallback+0x1f6>
 80003c4:	4b3f      	ldr	r3, [pc, #252]	@ (80004c4 <HAL_UART_RxCpltCallback+0x288>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b30      	cmp	r3, #48	@ 0x30
 80003ca:	dd32      	ble.n	8000432 <HAL_UART_RxCpltCallback+0x1f6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003d2:	483f      	ldr	r0, [pc, #252]	@ (80004d0 <HAL_UART_RxCpltCallback+0x294>)
 80003d4:	f000 ff14 	bl	8001200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003de:	483c      	ldr	r0, [pc, #240]	@ (80004d0 <HAL_UART_RxCpltCallback+0x294>)
 80003e0:	f000 ff0e 	bl	8001200 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (x_data / 48) * 100);
 80003e4:	4b38      	ldr	r3, [pc, #224]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a3d      	ldr	r2, [pc, #244]	@ (80004e0 <HAL_UART_RxCpltCallback+0x2a4>)
 80003ea:	fb82 1203 	smull	r1, r2, r2, r3
 80003ee:	10d2      	asrs	r2, r2, #3
 80003f0:	17db      	asrs	r3, r3, #31
 80003f2:	1ad3      	subs	r3, r2, r3
 80003f4:	2264      	movs	r2, #100	@ 0x64
 80003f6:	fb03 f202 	mul.w	r2, r3, r2
 80003fa:	4b37      	ldr	r3, [pc, #220]	@ (80004d8 <HAL_UART_RxCpltCallback+0x29c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, ((x_data / 48)) * 100 * (y_data / 100));
 8000400:	4b31      	ldr	r3, [pc, #196]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a36      	ldr	r2, [pc, #216]	@ (80004e0 <HAL_UART_RxCpltCallback+0x2a4>)
 8000406:	fb82 1203 	smull	r1, r2, r2, r3
 800040a:	10d2      	asrs	r2, r2, #3
 800040c:	17db      	asrs	r3, r3, #31
 800040e:	1ad2      	subs	r2, r2, r3
 8000410:	4b2c      	ldr	r3, [pc, #176]	@ (80004c4 <HAL_UART_RxCpltCallback+0x288>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4931      	ldr	r1, [pc, #196]	@ (80004dc <HAL_UART_RxCpltCallback+0x2a0>)
 8000416:	fb81 0103 	smull	r0, r1, r1, r3
 800041a:	1149      	asrs	r1, r1, #5
 800041c:	17db      	asrs	r3, r3, #31
 800041e:	1acb      	subs	r3, r1, r3
 8000420:	fb02 f303 	mul.w	r3, r2, r3
 8000424:	2264      	movs	r2, #100	@ 0x64
 8000426:	fb03 f202 	mul.w	r2, r3, r2
 800042a:	4b2b      	ldr	r3, [pc, #172]	@ (80004d8 <HAL_UART_RxCpltCallback+0x29c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000430:	e039      	b.n	80004a6 <HAL_UART_RxCpltCallback+0x26a>
		}
		else if (x_data < 49 && y_data < 49) {
 8000432:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b30      	cmp	r3, #48	@ 0x30
 8000438:	dc35      	bgt.n	80004a6 <HAL_UART_RxCpltCallback+0x26a>
 800043a:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <HAL_UART_RxCpltCallback+0x288>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b30      	cmp	r3, #48	@ 0x30
 8000440:	dc31      	bgt.n	80004a6 <HAL_UART_RxCpltCallback+0x26a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000448:	4821      	ldr	r0, [pc, #132]	@ (80004d0 <HAL_UART_RxCpltCallback+0x294>)
 800044a:	f000 fed9 	bl	8001200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000454:	481e      	ldr	r0, [pc, #120]	@ (80004d0 <HAL_UART_RxCpltCallback+0x294>)
 8000456:	f000 fed3 	bl	8001200 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, ((x_data / 48)) * 100 * (y_data / 100));
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a20      	ldr	r2, [pc, #128]	@ (80004e0 <HAL_UART_RxCpltCallback+0x2a4>)
 8000460:	fb82 1203 	smull	r1, r2, r2, r3
 8000464:	10d2      	asrs	r2, r2, #3
 8000466:	17db      	asrs	r3, r3, #31
 8000468:	1ad2      	subs	r2, r2, r3
 800046a:	4b16      	ldr	r3, [pc, #88]	@ (80004c4 <HAL_UART_RxCpltCallback+0x288>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	491b      	ldr	r1, [pc, #108]	@ (80004dc <HAL_UART_RxCpltCallback+0x2a0>)
 8000470:	fb81 0103 	smull	r0, r1, r1, r3
 8000474:	1149      	asrs	r1, r1, #5
 8000476:	17db      	asrs	r3, r3, #31
 8000478:	1acb      	subs	r3, r1, r3
 800047a:	fb02 f303 	mul.w	r3, r2, r3
 800047e:	2264      	movs	r2, #100	@ 0x64
 8000480:	fb03 f202 	mul.w	r2, r3, r2
 8000484:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <HAL_UART_RxCpltCallback+0x29c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, (x_data / 48) * 100);
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <HAL_UART_RxCpltCallback+0x28c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a14      	ldr	r2, [pc, #80]	@ (80004e0 <HAL_UART_RxCpltCallback+0x2a4>)
 8000490:	fb82 1203 	smull	r1, r2, r2, r3
 8000494:	10d2      	asrs	r2, r2, #3
 8000496:	17db      	asrs	r3, r3, #31
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	2264      	movs	r2, #100	@ 0x64
 800049c:	fb03 f202 	mul.w	r2, r3, r2
 80004a0:	4b0d      	ldr	r3, [pc, #52]	@ (80004d8 <HAL_UART_RxCpltCallback+0x29c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		HAL_UART_Receive_IT(&huart1, &uart_buf, 8);
 80004a6:	2208      	movs	r2, #8
 80004a8:	4904      	ldr	r1, [pc, #16]	@ (80004bc <HAL_UART_RxCpltCallback+0x280>)
 80004aa:	480e      	ldr	r0, [pc, #56]	@ (80004e4 <HAL_UART_RxCpltCallback+0x2a8>)
 80004ac:	f002 f924 	bl	80026f8 <HAL_UART_Receive_IT>
	}
}
 80004b0:	bf00      	nop
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40013800 	.word	0x40013800
 80004bc:	20000078 	.word	0x20000078
 80004c0:	20000080 	.word	0x20000080
 80004c4:	2000008c 	.word	0x2000008c
 80004c8:	20000088 	.word	0x20000088
 80004cc:	08003dd8 	.word	0x08003dd8
 80004d0:	40010800 	.word	0x40010800
 80004d4:	a0a0a0a1 	.word	0xa0a0a0a1
 80004d8:	20000094 	.word	0x20000094
 80004dc:	51eb851f 	.word	0x51eb851f
 80004e0:	2aaaaaab 	.word	0x2aaaaaab
 80004e4:	200000dc 	.word	0x200000dc

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fae2 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f81e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f7ff fe32 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 fa0c 	bl	8000914 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004fc:	f000 f9e0 	bl	80008c0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000500:	f000 f90e 	bl	8000720 <MX_TIM3_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000504:	2100      	movs	r1, #0
 8000506:	4807      	ldr	r0, [pc, #28]	@ (8000524 <main+0x3c>)
 8000508:	f001 fb6c 	bl	8001be4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800050c:	2104      	movs	r1, #4
 800050e:	4805      	ldr	r0, [pc, #20]	@ (8000524 <main+0x3c>)
 8000510:	f001 fb68 	bl	8001be4 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, &uart_buf, 8);
 8000514:	2208      	movs	r2, #8
 8000516:	4904      	ldr	r1, [pc, #16]	@ (8000528 <main+0x40>)
 8000518:	4804      	ldr	r0, [pc, #16]	@ (800052c <main+0x44>)
 800051a:	f002 f8ed 	bl	80026f8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051e:	bf00      	nop
 8000520:	e7fd      	b.n	800051e <main+0x36>
 8000522:	bf00      	nop
 8000524:	20000094 	.word	0x20000094
 8000528:	20000078 	.word	0x20000078
 800052c:	200000dc 	.word	0x200000dc

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b090      	sub	sp, #64	@ 0x40
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0318 	add.w	r3, r7, #24
 800053a:	2228      	movs	r2, #40	@ 0x28
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fe3e 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000552:	2301      	movs	r3, #1
 8000554:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000556:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800055a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800056e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0318 	add.w	r3, r7, #24
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fe7b 	bl	8001274 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000584:	f000 f819 	bl	80005ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2102      	movs	r1, #2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 f8e8 	bl	8001778 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ae:	f000 f804 	bl	80005ba <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3740      	adds	r7, #64	@ 0x40
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005be:	b672      	cpsid	i
}
 80005c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <Error_Handler+0x8>
	...

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <HAL_MspInit+0x5c>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <HAL_MspInit+0x5c>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6193      	str	r3, [r2, #24]
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <HAL_MspInit+0x5c>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_MspInit+0x5c>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <HAL_MspInit+0x5c>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_MspInit+0x5c>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <HAL_MspInit+0x60>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <HAL_MspInit+0x60>)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000
 8000628:	40010000 	.word	0x40010000

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <NMI_Handler+0x4>

08000634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <MemManage_Handler+0x4>

08000644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <UsageFault_Handler+0x4>

08000654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067c:	f000 fa60 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000688:	4802      	ldr	r0, [pc, #8]	@ (8000694 <USART1_IRQHandler+0x10>)
 800068a:	f002 f85b 	bl	8002744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000dc 	.word	0x200000dc

08000698 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800069c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006a0:	f000 fdc6 	bl	8001230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b0:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <_sbrk+0x5c>)
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <_sbrk+0x60>)
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d102      	bne.n	80006ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <_sbrk+0x64>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <_sbrk+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d207      	bcs.n	80006e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d8:	f002 fd7a 	bl	80031d0 <__errno>
 80006dc:	4603      	mov	r3, r0
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	e009      	b.n	80006fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a05      	ldr	r2, [pc, #20]	@ (800070c <_sbrk+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20005000 	.word	0x20005000
 8000708:	00000400 	.word	0x00000400
 800070c:	20000090 	.word	0x20000090
 8000710:	200002b8 	.word	0x200002b8

08000714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	@ 0x38
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]
 800074e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000750:	4b31      	ldr	r3, [pc, #196]	@ (8000818 <MX_TIM3_Init+0xf8>)
 8000752:	4a32      	ldr	r2, [pc, #200]	@ (800081c <MX_TIM3_Init+0xfc>)
 8000754:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000756:	4b30      	ldr	r3, [pc, #192]	@ (8000818 <MX_TIM3_Init+0xf8>)
 8000758:	2247      	movs	r2, #71	@ 0x47
 800075a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075c:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <MX_TIM3_Init+0xf8>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <MX_TIM3_Init+0xf8>)
 8000764:	2263      	movs	r2, #99	@ 0x63
 8000766:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <MX_TIM3_Init+0xf8>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <MX_TIM3_Init+0xf8>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000774:	4828      	ldr	r0, [pc, #160]	@ (8000818 <MX_TIM3_Init+0xf8>)
 8000776:	f001 f98d 	bl	8001a94 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000780:	f7ff ff1b 	bl	80005ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000788:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800078e:	4619      	mov	r1, r3
 8000790:	4821      	ldr	r0, [pc, #132]	@ (8000818 <MX_TIM3_Init+0xf8>)
 8000792:	f001 fb8b 	bl	8001eac <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800079c:	f7ff ff0d 	bl	80005ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007a0:	481d      	ldr	r0, [pc, #116]	@ (8000818 <MX_TIM3_Init+0xf8>)
 80007a2:	f001 f9c6 	bl	8001b32 <HAL_TIM_PWM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80007ac:	f7ff ff05 	bl	80005ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4619      	mov	r1, r3
 80007be:	4816      	ldr	r0, [pc, #88]	@ (8000818 <MX_TIM3_Init+0xf8>)
 80007c0:	f001 feec 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80007ca:	f7ff fef6 	bl	80005ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ce:	2360      	movs	r3, #96	@ 0x60
 80007d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	@ (8000818 <MX_TIM3_Init+0xf8>)
 80007e6:	f001 fa9f 	bl	8001d28 <HAL_TIM_PWM_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80007f0:	f7ff fee3 	bl	80005ba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2204      	movs	r2, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4807      	ldr	r0, [pc, #28]	@ (8000818 <MX_TIM3_Init+0xf8>)
 80007fc:	f001 fa94 	bl	8001d28 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000806:	f7ff fed8 	bl	80005ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800080a:	4803      	ldr	r0, [pc, #12]	@ (8000818 <MX_TIM3_Init+0xf8>)
 800080c:	f000 f826 	bl	800085c <HAL_TIM_MspPostInit>

}
 8000810:	bf00      	nop
 8000812:	3738      	adds	r7, #56	@ 0x38
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000094 	.word	0x20000094
 800081c:	40000400 	.word	0x40000400

08000820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a09      	ldr	r2, [pc, #36]	@ (8000854 <HAL_TIM_Base_MspInit+0x34>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d10b      	bne.n	800084a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_TIM_Base_MspInit+0x38>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_TIM_Base_MspInit+0x38>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_TIM_Base_MspInit+0x38>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40000400 	.word	0x40000400
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <HAL_TIM_MspPostInit+0x58>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d117      	bne.n	80008ac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_TIM_MspPostInit+0x5c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <HAL_TIM_MspPostInit+0x5c>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_TIM_MspPostInit+0x5c>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000894:	23c0      	movs	r3, #192	@ 0xc0
 8000896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <HAL_TIM_MspPostInit+0x60>)
 80008a8:	f000 fb26 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40000400 	.word	0x40000400
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010800 	.word	0x40010800

080008c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_USART1_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <MX_USART1_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <MX_USART1_UART_Init+0x4c>)
 80008cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_USART1_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_USART1_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_USART1_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_USART1_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_USART1_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_USART1_UART_Init+0x4c>)
 80008f8:	f001 feae 	bl	8002658 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f7ff fe5a 	bl	80005ba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000dc 	.word	0x200000dc
 8000910:	40013800 	.word	0x40013800

08000914 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_USART2_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <MX_USART2_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MX_USART2_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_USART2_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_USART2_UART_Init+0x4c>)
 800094c:	f001 fe84 	bl	8002658 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f7ff fe30 	bl	80005ba <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000124 	.word	0x20000124
 8000964:	40004400 	.word	0x40004400

08000968 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a35      	ldr	r2, [pc, #212]	@ (8000a58 <HAL_UART_MspInit+0xf0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d13a      	bne.n	80009fe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000988:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a33      	ldr	r2, [pc, #204]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 800098e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a2d      	ldr	r2, [pc, #180]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	4619      	mov	r1, r3
 80009cc:	4824      	ldr	r0, [pc, #144]	@ (8000a60 <HAL_UART_MspInit+0xf8>)
 80009ce:	f000 fa93 	bl	8000ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	4619      	mov	r1, r3
 80009e6:	481e      	ldr	r0, [pc, #120]	@ (8000a60 <HAL_UART_MspInit+0xf8>)
 80009e8:	f000 fa86 	bl	8000ef8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2025      	movs	r0, #37	@ 0x25
 80009f2:	f000 f998 	bl	8000d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009f6:	2025      	movs	r0, #37	@ 0x25
 80009f8:	f000 f9b1 	bl	8000d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009fc:	e028      	b.n	8000a50 <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a18      	ldr	r2, [pc, #96]	@ (8000a64 <HAL_UART_MspInit+0xfc>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d123      	bne.n	8000a50 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a12:	61d3      	str	r3, [r2, #28]
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2302      	movs	r3, #2
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <HAL_UART_MspInit+0xf8>)
 8000a4c:	f000 fa54 	bl	8000ef8 <HAL_GPIO_Init>
}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	@ 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010800 	.word	0x40010800
 8000a64:	40004400 	.word	0x40004400

08000a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a68:	f7ff fe54 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a6e:	490c      	ldr	r1, [pc, #48]	@ (8000aa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a84:	4c09      	ldr	r4, [pc, #36]	@ (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f002 fba3 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fd27 	bl	80004e8 <main>
  bx lr
 8000a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000aa4:	08003f48 	.word	0x08003f48
  ldr r2, =_sbss
 8000aa8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000aac:	200002b8 	.word	0x200002b8

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	@ (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f923 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fd7a 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f93b 	bl	8000d7a <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f903 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	2000016c 	.word	0x2000016c

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	2000016c 	.word	0x2000016c

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4906      	ldr	r1, [pc, #24]	@ (8000c10 <__NVIC_EnableIRQ+0x34>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	@ (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff90 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff2d 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff42 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff90 	bl	8000c68 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5f 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff35 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ffa2 	bl	8000ccc <SysTick_Config>
 8000d88:	4603      	mov	r3, r0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d008      	beq.n	8000dbc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2204      	movs	r2, #4
 8000dae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e020      	b.n	8000dfe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 020e 	bic.w	r2, r2, #14
 8000dca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0201 	bic.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000de4:	2101      	movs	r1, #1
 8000de6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d005      	beq.n	8000e2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2204      	movs	r2, #4
 8000e24:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	e051      	b.n	8000ed0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 020e 	bic.w	r2, r2, #14
 8000e3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a22      	ldr	r2, [pc, #136]	@ (8000edc <HAL_DMA_Abort_IT+0xd4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d029      	beq.n	8000eaa <HAL_DMA_Abort_IT+0xa2>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ee0 <HAL_DMA_Abort_IT+0xd8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d022      	beq.n	8000ea6 <HAL_DMA_Abort_IT+0x9e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <HAL_DMA_Abort_IT+0xdc>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d01a      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x98>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee8 <HAL_DMA_Abort_IT+0xe0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d012      	beq.n	8000e9a <HAL_DMA_Abort_IT+0x92>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1c      	ldr	r2, [pc, #112]	@ (8000eec <HAL_DMA_Abort_IT+0xe4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00a      	beq.n	8000e94 <HAL_DMA_Abort_IT+0x8c>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <HAL_DMA_Abort_IT+0xe8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d102      	bne.n	8000e8e <HAL_DMA_Abort_IT+0x86>
 8000e88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e8c:	e00e      	b.n	8000eac <HAL_DMA_Abort_IT+0xa4>
 8000e8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e92:	e00b      	b.n	8000eac <HAL_DMA_Abort_IT+0xa4>
 8000e94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e98:	e008      	b.n	8000eac <HAL_DMA_Abort_IT+0xa4>
 8000e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9e:	e005      	b.n	8000eac <HAL_DMA_Abort_IT+0xa4>
 8000ea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea4:	e002      	b.n	8000eac <HAL_DMA_Abort_IT+0xa4>
 8000ea6:	2310      	movs	r3, #16
 8000ea8:	e000      	b.n	8000eac <HAL_DMA_Abort_IT+0xa4>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <HAL_DMA_Abort_IT+0xec>)
 8000eae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	4798      	blx	r3
    } 
  }
  return status;
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40020008 	.word	0x40020008
 8000ee0:	4002001c 	.word	0x4002001c
 8000ee4:	40020030 	.word	0x40020030
 8000ee8:	40020044 	.word	0x40020044
 8000eec:	40020058 	.word	0x40020058
 8000ef0:	4002006c 	.word	0x4002006c
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b08b      	sub	sp, #44	@ 0x2c
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e169      	b.n	80011e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 8158 	bne.w	80011da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	4a9a      	ldr	r2, [pc, #616]	@ (8001198 <HAL_GPIO_Init+0x2a0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d05e      	beq.n	8000ff2 <HAL_GPIO_Init+0xfa>
 8000f34:	4a98      	ldr	r2, [pc, #608]	@ (8001198 <HAL_GPIO_Init+0x2a0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d875      	bhi.n	8001026 <HAL_GPIO_Init+0x12e>
 8000f3a:	4a98      	ldr	r2, [pc, #608]	@ (800119c <HAL_GPIO_Init+0x2a4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d058      	beq.n	8000ff2 <HAL_GPIO_Init+0xfa>
 8000f40:	4a96      	ldr	r2, [pc, #600]	@ (800119c <HAL_GPIO_Init+0x2a4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d86f      	bhi.n	8001026 <HAL_GPIO_Init+0x12e>
 8000f46:	4a96      	ldr	r2, [pc, #600]	@ (80011a0 <HAL_GPIO_Init+0x2a8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d052      	beq.n	8000ff2 <HAL_GPIO_Init+0xfa>
 8000f4c:	4a94      	ldr	r2, [pc, #592]	@ (80011a0 <HAL_GPIO_Init+0x2a8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d869      	bhi.n	8001026 <HAL_GPIO_Init+0x12e>
 8000f52:	4a94      	ldr	r2, [pc, #592]	@ (80011a4 <HAL_GPIO_Init+0x2ac>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d04c      	beq.n	8000ff2 <HAL_GPIO_Init+0xfa>
 8000f58:	4a92      	ldr	r2, [pc, #584]	@ (80011a4 <HAL_GPIO_Init+0x2ac>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d863      	bhi.n	8001026 <HAL_GPIO_Init+0x12e>
 8000f5e:	4a92      	ldr	r2, [pc, #584]	@ (80011a8 <HAL_GPIO_Init+0x2b0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d046      	beq.n	8000ff2 <HAL_GPIO_Init+0xfa>
 8000f64:	4a90      	ldr	r2, [pc, #576]	@ (80011a8 <HAL_GPIO_Init+0x2b0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d85d      	bhi.n	8001026 <HAL_GPIO_Init+0x12e>
 8000f6a:	2b12      	cmp	r3, #18
 8000f6c:	d82a      	bhi.n	8000fc4 <HAL_GPIO_Init+0xcc>
 8000f6e:	2b12      	cmp	r3, #18
 8000f70:	d859      	bhi.n	8001026 <HAL_GPIO_Init+0x12e>
 8000f72:	a201      	add	r2, pc, #4	@ (adr r2, 8000f78 <HAL_GPIO_Init+0x80>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000ff3 	.word	0x08000ff3
 8000f7c:	08000fcd 	.word	0x08000fcd
 8000f80:	08000fdf 	.word	0x08000fdf
 8000f84:	08001021 	.word	0x08001021
 8000f88:	08001027 	.word	0x08001027
 8000f8c:	08001027 	.word	0x08001027
 8000f90:	08001027 	.word	0x08001027
 8000f94:	08001027 	.word	0x08001027
 8000f98:	08001027 	.word	0x08001027
 8000f9c:	08001027 	.word	0x08001027
 8000fa0:	08001027 	.word	0x08001027
 8000fa4:	08001027 	.word	0x08001027
 8000fa8:	08001027 	.word	0x08001027
 8000fac:	08001027 	.word	0x08001027
 8000fb0:	08001027 	.word	0x08001027
 8000fb4:	08001027 	.word	0x08001027
 8000fb8:	08001027 	.word	0x08001027
 8000fbc:	08000fd5 	.word	0x08000fd5
 8000fc0:	08000fe9 	.word	0x08000fe9
 8000fc4:	4a79      	ldr	r2, [pc, #484]	@ (80011ac <HAL_GPIO_Init+0x2b4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fca:	e02c      	b.n	8001026 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	623b      	str	r3, [r7, #32]
          break;
 8000fd2:	e029      	b.n	8001028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	623b      	str	r3, [r7, #32]
          break;
 8000fdc:	e024      	b.n	8001028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e01f      	b.n	8001028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	330c      	adds	r3, #12
 8000fee:	623b      	str	r3, [r7, #32]
          break;
 8000ff0:	e01a      	b.n	8001028 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	623b      	str	r3, [r7, #32]
          break;
 8000ffe:	e013      	b.n	8001028 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d105      	bne.n	8001014 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001008:	2308      	movs	r3, #8
 800100a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	611a      	str	r2, [r3, #16]
          break;
 8001012:	e009      	b.n	8001028 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001014:	2308      	movs	r3, #8
 8001016:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	615a      	str	r2, [r3, #20]
          break;
 800101e:	e003      	b.n	8001028 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
          break;
 8001024:	e000      	b.n	8001028 <HAL_GPIO_Init+0x130>
          break;
 8001026:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	2bff      	cmp	r3, #255	@ 0xff
 800102c:	d801      	bhi.n	8001032 <HAL_GPIO_Init+0x13a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	e001      	b.n	8001036 <HAL_GPIO_Init+0x13e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3304      	adds	r3, #4
 8001036:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2bff      	cmp	r3, #255	@ 0xff
 800103c:	d802      	bhi.n	8001044 <HAL_GPIO_Init+0x14c>
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	e002      	b.n	800104a <HAL_GPIO_Init+0x152>
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	3b08      	subs	r3, #8
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	210f      	movs	r1, #15
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	401a      	ands	r2, r3
 800105c:	6a39      	ldr	r1, [r7, #32]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	431a      	orrs	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80b1 	beq.w	80011da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001078:	4b4d      	ldr	r3, [pc, #308]	@ (80011b0 <HAL_GPIO_Init+0x2b8>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a4c      	ldr	r2, [pc, #304]	@ (80011b0 <HAL_GPIO_Init+0x2b8>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b4a      	ldr	r3, [pc, #296]	@ (80011b0 <HAL_GPIO_Init+0x2b8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001090:	4a48      	ldr	r2, [pc, #288]	@ (80011b4 <HAL_GPIO_Init+0x2bc>)
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a40      	ldr	r2, [pc, #256]	@ (80011b8 <HAL_GPIO_Init+0x2c0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d013      	beq.n	80010e4 <HAL_GPIO_Init+0x1ec>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a3f      	ldr	r2, [pc, #252]	@ (80011bc <HAL_GPIO_Init+0x2c4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d00d      	beq.n	80010e0 <HAL_GPIO_Init+0x1e8>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a3e      	ldr	r2, [pc, #248]	@ (80011c0 <HAL_GPIO_Init+0x2c8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d007      	beq.n	80010dc <HAL_GPIO_Init+0x1e4>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a3d      	ldr	r2, [pc, #244]	@ (80011c4 <HAL_GPIO_Init+0x2cc>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d101      	bne.n	80010d8 <HAL_GPIO_Init+0x1e0>
 80010d4:	2303      	movs	r3, #3
 80010d6:	e006      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010d8:	2304      	movs	r3, #4
 80010da:	e004      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010dc:	2302      	movs	r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010e4:	2300      	movs	r3, #0
 80010e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e8:	f002 0203 	and.w	r2, r2, #3
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010f6:	492f      	ldr	r1, [pc, #188]	@ (80011b4 <HAL_GPIO_Init+0x2bc>)
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	492c      	ldr	r1, [pc, #176]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800111e:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	43db      	mvns	r3, r3
 8001126:	4928      	ldr	r1, [pc, #160]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001128:	4013      	ands	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001138:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	4922      	ldr	r1, [pc, #136]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	60cb      	str	r3, [r1, #12]
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	43db      	mvns	r3, r3
 800114e:	491e      	ldr	r1, [pc, #120]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001150:	4013      	ands	r3, r2
 8001152:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001160:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4918      	ldr	r1, [pc, #96]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	4914      	ldr	r1, [pc, #80]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001178:	4013      	ands	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d021      	beq.n	80011cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	490e      	ldr	r1, [pc, #56]	@ (80011c8 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
 8001194:	e021      	b.n	80011da <HAL_GPIO_Init+0x2e2>
 8001196:	bf00      	nop
 8001198:	10320000 	.word	0x10320000
 800119c:	10310000 	.word	0x10310000
 80011a0:	10220000 	.word	0x10220000
 80011a4:	10210000 	.word	0x10210000
 80011a8:	10120000 	.word	0x10120000
 80011ac:	10110000 	.word	0x10110000
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000
 80011b8:	40010800 	.word	0x40010800
 80011bc:	40010c00 	.word	0x40010c00
 80011c0:	40011000 	.word	0x40011000
 80011c4:	40011400 	.word	0x40011400
 80011c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_GPIO_Init+0x304>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4909      	ldr	r1, [pc, #36]	@ (80011fc <HAL_GPIO_Init+0x304>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011dc:	3301      	adds	r3, #1
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f47f ae8e 	bne.w	8000f0c <HAL_GPIO_Init+0x14>
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	372c      	adds	r7, #44	@ 0x2c
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	40010400 	.word	0x40010400

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800121c:	e003      	b.n	8001226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	041a      	lsls	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	611a      	str	r2, [r3, #16]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f806 	bl	8001260 <HAL_GPIO_EXTI_Callback>
  }
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e272      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8087 	beq.w	80013a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001294:	4b92      	ldr	r3, [pc, #584]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b04      	cmp	r3, #4
 800129e:	d00c      	beq.n	80012ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a0:	4b8f      	ldr	r3, [pc, #572]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d112      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
 80012ac:	4b8c      	ldr	r3, [pc, #560]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b8:	d10b      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	4b89      	ldr	r3, [pc, #548]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d06c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x12c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d168      	bne.n	80013a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e24c      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x76>
 80012dc:	4b80      	ldr	r3, [pc, #512]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a7f      	ldr	r2, [pc, #508]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e02e      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b7b      	ldr	r3, [pc, #492]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7a      	ldr	r2, [pc, #488]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b78      	ldr	r3, [pc, #480]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a77      	ldr	r2, [pc, #476]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0xbc>
 8001316:	4b72      	ldr	r3, [pc, #456]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a71      	ldr	r2, [pc, #452]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6f      	ldr	r3, [pc, #444]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6e      	ldr	r2, [pc, #440]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 8001330:	4b6b      	ldr	r3, [pc, #428]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6a      	ldr	r2, [pc, #424]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b68      	ldr	r3, [pc, #416]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a67      	ldr	r2, [pc, #412]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fc08 	bl	8000b64 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fc04 	bl	8000b64 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	@ 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e200      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b5d      	ldr	r3, [pc, #372]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xe4>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fbf4 	bl	8000b64 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fbf0 	bl	8000b64 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1ec      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b53      	ldr	r3, [pc, #332]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x10c>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ae:	4b4c      	ldr	r3, [pc, #304]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ba:	4b49      	ldr	r3, [pc, #292]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
 80013c6:	4b46      	ldr	r3, [pc, #280]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b43      	ldr	r3, [pc, #268]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1c0      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b3d      	ldr	r3, [pc, #244]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4939      	ldr	r1, [pc, #228]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b36      	ldr	r3, [pc, #216]	@ (80014e4 <HAL_RCC_OscConfig+0x270>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fba9 	bl	8000b64 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fba5 	bl	8000b64 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1a1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b2d      	ldr	r3, [pc, #180]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4927      	ldr	r1, [pc, #156]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b26      	ldr	r3, [pc, #152]	@ (80014e4 <HAL_RCC_OscConfig+0x270>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fb88 	bl	8000b64 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fb84 	bl	8000b64 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e180      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d03a      	beq.n	80014f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d019      	beq.n	80014be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <HAL_RCC_OscConfig+0x274>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff fb68 	bl	8000b64 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fb64 	bl	8000b64 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e160      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 face 	bl	8001a58 <RCC_Delay>
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_RCC_OscConfig+0x274>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff fb4e 	bl	8000b64 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ca:	e00f      	b.n	80014ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fb4a 	bl	8000b64 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d908      	bls.n	80014ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e146      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	42420000 	.word	0x42420000
 80014e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b92      	ldr	r3, [pc, #584]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e9      	bne.n	80014cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a6 	beq.w	8001652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b8b      	ldr	r3, [pc, #556]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10d      	bne.n	8001532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b88      	ldr	r3, [pc, #544]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a87      	ldr	r2, [pc, #540]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b85      	ldr	r3, [pc, #532]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b82      	ldr	r3, [pc, #520]	@ (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153e:	4b7f      	ldr	r3, [pc, #508]	@ (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7e      	ldr	r2, [pc, #504]	@ (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154a:	f7ff fb0b 	bl	8000b64 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff fb07 	bl	8000b64 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	@ 0x64
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e103      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	4b75      	ldr	r3, [pc, #468]	@ (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x312>
 8001578:	4b6f      	ldr	r3, [pc, #444]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a6e      	ldr	r2, [pc, #440]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	e02d      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x334>
 800158e:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a69      	ldr	r2, [pc, #420]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	4b67      	ldr	r3, [pc, #412]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a66      	ldr	r2, [pc, #408]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x356>
 80015b0:	4b61      	ldr	r3, [pc, #388]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a60      	ldr	r2, [pc, #384]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b58      	ldr	r3, [pc, #352]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a57      	ldr	r2, [pc, #348]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fabb 	bl	8000b64 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fab7 	bl	8000b64 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0b1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b4b      	ldr	r3, [pc, #300]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x37e>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff faa5 	bl	8000b64 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff faa1 	bl	8000b64 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e09b      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b40      	ldr	r3, [pc, #256]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b3c      	ldr	r3, [pc, #240]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a3b      	ldr	r2, [pc, #236]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8087 	beq.w	800176a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800165c:	4b36      	ldr	r3, [pc, #216]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d061      	beq.n	800172c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d146      	bne.n	80016fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fa75 	bl	8000b64 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fa71 	bl	8000b64 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e06d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001690:	4b29      	ldr	r3, [pc, #164]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016a4:	d108      	bne.n	80016b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a6:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4921      	ldr	r1, [pc, #132]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a19      	ldr	r1, [r3, #32]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c8:	430b      	orrs	r3, r1
 80016ca:	491b      	ldr	r1, [pc, #108]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x4cc>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fa45 	bl	8000b64 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fa41 	bl	8000b64 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e03d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x46a>
 80016fc:	e035      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fa2e 	bl	8000b64 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fa2a 	bl	8000b64 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e026      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x498>
 800172a:	e01e      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e019      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000
 8001740:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_RCC_OscConfig+0x500>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	429a      	cmp	r2, r3
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0d0      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b6a      	ldr	r3, [pc, #424]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d910      	bls.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b67      	ldr	r3, [pc, #412]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 0207 	bic.w	r2, r3, #7
 80017a2:	4965      	ldr	r1, [pc, #404]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a58      	ldr	r2, [pc, #352]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a52      	ldr	r2, [pc, #328]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d040      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d115      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b41      	ldr	r3, [pc, #260]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e073      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06b      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b39      	ldr	r3, [pc, #228]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4936      	ldr	r1, [pc, #216]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff f97c 	bl	8000b64 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff f978 	bl	8000b64 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e053      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d210      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0207 	bic.w	r2, r3, #7
 80018ae:	4922      	ldr	r1, [pc, #136]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	@ (8001944 <HAL_RCC_ClockConfig+0x1cc>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_RCC_ClockConfig+0x1d0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f8da 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000
 800193c:	40021000 	.word	0x40021000
 8001940:	08003dec 	.word	0x08003dec
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x30>
 8001976:	2b08      	cmp	r3, #8
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x36>
 800197a:	e027      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800197e:	613b      	str	r3, [r7, #16]
      break;
 8001980:	e027      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	0c9b      	lsrs	r3, r3, #18
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	4a17      	ldr	r2, [pc, #92]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d010      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0c5b      	lsrs	r3, r3, #17
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ae:	fb03 f202 	mul.w	r2, r3, r2
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e004      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	613b      	str	r3, [r7, #16]
      break;
 80019ca:	e002      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ce:	613b      	str	r3, [r7, #16]
      break;
 80019d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d2:	693b      	ldr	r3, [r7, #16]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	007a1200 	.word	0x007a1200
 80019e8:	08003e04 	.word	0x08003e04
 80019ec:	08003e14 	.word	0x08003e14
 80019f0:	003d0900 	.word	0x003d0900

080019f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f8:	4b02      	ldr	r3, [pc, #8]	@ (8001a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000000 	.word	0x20000000

08001a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a0c:	f7ff fff2 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	4903      	ldr	r1, [pc, #12]	@ (8001a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08003dfc 	.word	0x08003dfc

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	0adb      	lsrs	r3, r3, #11
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	@ (8001a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08003dfc 	.word	0x08003dfc

08001a58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a60:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <RCC_Delay+0x34>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <RCC_Delay+0x38>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0a5b      	lsrs	r3, r3, #9
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a74:	bf00      	nop
  }
  while (Delay --);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1e5a      	subs	r2, r3, #1
 8001a7a:	60fa      	str	r2, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f9      	bne.n	8001a74 <RCC_Delay+0x1c>
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	10624dd3 	.word	0x10624dd3

08001a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e041      	b.n	8001b2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe feb0 	bl	8000820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f000 fab2 	bl	800203c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e041      	b.n	8001bc8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d106      	bne.n	8001b5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f839 	bl	8001bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f000 fa63 	bl	800203c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <HAL_TIM_PWM_Start+0x24>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e022      	b.n	8001c4e <HAL_TIM_PWM_Start+0x6a>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d109      	bne.n	8001c22 <HAL_TIM_PWM_Start+0x3e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	bf14      	ite	ne
 8001c1a:	2301      	movne	r3, #1
 8001c1c:	2300      	moveq	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	e015      	b.n	8001c4e <HAL_TIM_PWM_Start+0x6a>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d109      	bne.n	8001c3c <HAL_TIM_PWM_Start+0x58>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e008      	b.n	8001c4e <HAL_TIM_PWM_Start+0x6a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e05e      	b.n	8001d14 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_PWM_Start+0x82>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c64:	e013      	b.n	8001c8e <HAL_TIM_PWM_Start+0xaa>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d104      	bne.n	8001c76 <HAL_TIM_PWM_Start+0x92>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c74:	e00b      	b.n	8001c8e <HAL_TIM_PWM_Start+0xaa>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_PWM_Start+0xa2>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c84:	e003      	b.n	8001c8e <HAL_TIM_PWM_Start+0xaa>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2201      	movs	r2, #1
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fc5c 	bl	8002554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d1c <HAL_TIM_PWM_Start+0x138>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d107      	bne.n	8001cb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <HAL_TIM_PWM_Start+0x138>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00e      	beq.n	8001cde <HAL_TIM_PWM_Start+0xfa>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc8:	d009      	beq.n	8001cde <HAL_TIM_PWM_Start+0xfa>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a14      	ldr	r2, [pc, #80]	@ (8001d20 <HAL_TIM_PWM_Start+0x13c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d004      	beq.n	8001cde <HAL_TIM_PWM_Start+0xfa>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <HAL_TIM_PWM_Start+0x140>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d111      	bne.n	8001d02 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b06      	cmp	r3, #6
 8001cee:	d010      	beq.n	8001d12 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d00:	e007      	b.n	8001d12 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40012c00 	.word	0x40012c00
 8001d20:	40000400 	.word	0x40000400
 8001d24:	40000800 	.word	0x40000800

08001d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e0ae      	b.n	8001ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	f200 809f 	bhi.w	8001e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d56:	a201      	add	r2, pc, #4	@ (adr r2, 8001d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d91 	.word	0x08001d91
 8001d60:	08001e95 	.word	0x08001e95
 8001d64:	08001e95 	.word	0x08001e95
 8001d68:	08001e95 	.word	0x08001e95
 8001d6c:	08001dd1 	.word	0x08001dd1
 8001d70:	08001e95 	.word	0x08001e95
 8001d74:	08001e95 	.word	0x08001e95
 8001d78:	08001e95 	.word	0x08001e95
 8001d7c:	08001e13 	.word	0x08001e13
 8001d80:	08001e95 	.word	0x08001e95
 8001d84:	08001e95 	.word	0x08001e95
 8001d88:	08001e95 	.word	0x08001e95
 8001d8c:	08001e53 	.word	0x08001e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f9be 	bl	8002118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0208 	orr.w	r2, r2, #8
 8001daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0204 	bic.w	r2, r2, #4
 8001dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6999      	ldr	r1, [r3, #24]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	619a      	str	r2, [r3, #24]
      break;
 8001dce:	e064      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fa04 	bl	80021e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6999      	ldr	r1, [r3, #24]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	021a      	lsls	r2, r3, #8
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	619a      	str	r2, [r3, #24]
      break;
 8001e10:	e043      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fa4d 	bl	80022b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0208 	orr.w	r2, r2, #8
 8001e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0204 	bic.w	r2, r2, #4
 8001e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69d9      	ldr	r1, [r3, #28]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	61da      	str	r2, [r3, #28]
      break;
 8001e50:	e023      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fa97 	bl	800238c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69d9      	ldr	r1, [r3, #28]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	021a      	lsls	r2, r3, #8
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	61da      	str	r2, [r3, #28]
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	75fb      	strb	r3, [r7, #23]
      break;
 8001e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e0b4      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x186>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f00:	d03e      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0xd4>
 8001f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f06:	f200 8087 	bhi.w	8002018 <HAL_TIM_ConfigClockSource+0x16c>
 8001f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f0e:	f000 8086 	beq.w	800201e <HAL_TIM_ConfigClockSource+0x172>
 8001f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f16:	d87f      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x16c>
 8001f18:	2b70      	cmp	r3, #112	@ 0x70
 8001f1a:	d01a      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0xa6>
 8001f1c:	2b70      	cmp	r3, #112	@ 0x70
 8001f1e:	d87b      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x16c>
 8001f20:	2b60      	cmp	r3, #96	@ 0x60
 8001f22:	d050      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8001f24:	2b60      	cmp	r3, #96	@ 0x60
 8001f26:	d877      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x16c>
 8001f28:	2b50      	cmp	r3, #80	@ 0x50
 8001f2a:	d03c      	beq.n	8001fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8001f2c:	2b50      	cmp	r3, #80	@ 0x50
 8001f2e:	d873      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x16c>
 8001f30:	2b40      	cmp	r3, #64	@ 0x40
 8001f32:	d058      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8001f34:	2b40      	cmp	r3, #64	@ 0x40
 8001f36:	d86f      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x16c>
 8001f38:	2b30      	cmp	r3, #48	@ 0x30
 8001f3a:	d064      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x15a>
 8001f3c:	2b30      	cmp	r3, #48	@ 0x30
 8001f3e:	d86b      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x16c>
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d060      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x15a>
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d867      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x16c>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05c      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x15a>
 8001f4c:	2b10      	cmp	r3, #16
 8001f4e:	d05a      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x15a>
 8001f50:	e062      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f62:	f000 fad8 	bl	8002516 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	609a      	str	r2, [r3, #8]
      break;
 8001f7e:	e04f      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f90:	f000 fac1 	bl	8002516 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fa2:	609a      	str	r2, [r3, #8]
      break;
 8001fa4:	e03c      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f000 fa38 	bl	8002428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2150      	movs	r1, #80	@ 0x50
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fa8f 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 8001fc4:	e02c      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f000 fa56 	bl	8002484 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2160      	movs	r1, #96	@ 0x60
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fa7f 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 8001fe4:	e01c      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f000 fa18 	bl	8002428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2140      	movs	r1, #64	@ 0x40
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fa6f 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 8002004:	e00c      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f000 fa66 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 8002016:	e003      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      break;
 800201c:	e000      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800201e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a2f      	ldr	r2, [pc, #188]	@ (800210c <TIM_Base_SetConfig+0xd0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00b      	beq.n	800206c <TIM_Base_SetConfig+0x30>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800205a:	d007      	beq.n	800206c <TIM_Base_SetConfig+0x30>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a2c      	ldr	r2, [pc, #176]	@ (8002110 <TIM_Base_SetConfig+0xd4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_Base_SetConfig+0x30>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a2b      	ldr	r2, [pc, #172]	@ (8002114 <TIM_Base_SetConfig+0xd8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d108      	bne.n	800207e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a22      	ldr	r2, [pc, #136]	@ (800210c <TIM_Base_SetConfig+0xd0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0x62>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0x62>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1f      	ldr	r2, [pc, #124]	@ (8002110 <TIM_Base_SetConfig+0xd4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0x62>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <TIM_Base_SetConfig+0xd8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <TIM_Base_SetConfig+0xd0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d103      	bne.n	80020e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f023 0201 	bic.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
  }
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800

08002118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f023 0201 	bic.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0303 	bic.w	r3, r3, #3
 800214e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f023 0302 	bic.w	r3, r3, #2
 8002160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <TIM_OC1_SetConfig+0xc8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d10c      	bne.n	800218e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f023 0308 	bic.w	r3, r3, #8
 800217a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <TIM_OC1_SetConfig+0xc8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d111      	bne.n	80021ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800219c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	621a      	str	r2, [r3, #32]
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40012c00 	.word	0x40012c00

080021e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f023 0210 	bic.w	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800221a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f023 0320 	bic.w	r3, r3, #32
 800222e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a1d      	ldr	r2, [pc, #116]	@ (80022b4 <TIM_OC2_SetConfig+0xd0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d10d      	bne.n	8002260 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800224a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800225e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <TIM_OC2_SetConfig+0xd0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d113      	bne.n	8002290 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800226e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	621a      	str	r2, [r3, #32]
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40012c00 	.word	0x40012c00

080022b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1d      	ldr	r2, [pc, #116]	@ (8002388 <TIM_OC3_SetConfig+0xd0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10d      	bne.n	8002332 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800231c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a14      	ldr	r2, [pc, #80]	@ (8002388 <TIM_OC3_SetConfig+0xd0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d113      	bne.n	8002362 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	621a      	str	r2, [r3, #32]
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40012c00 	.word	0x40012c00

0800238c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	031b      	lsls	r3, r3, #12
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002424 <TIM_OC4_SetConfig+0x98>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d109      	bne.n	8002400 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	621a      	str	r2, [r3, #32]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40012c00 	.word	0x40012c00

08002428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f023 0201 	bic.w	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f023 030a 	bic.w	r3, r3, #10
 8002464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	621a      	str	r2, [r3, #32]
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f023 0210 	bic.w	r2, r3, #16
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	031b      	lsls	r3, r3, #12
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	621a      	str	r2, [r3, #32]
}
 80024d8:	bf00      	nop
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	f043 0307 	orr.w	r3, r3, #7
 8002504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002516:	b480      	push	{r7}
 8002518:	b087      	sub	sp, #28
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002530:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	021a      	lsls	r2, r3, #8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	431a      	orrs	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4313      	orrs	r3, r2
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	609a      	str	r2, [r3, #8]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2201      	movs	r2, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	43db      	mvns	r3, r3
 8002576:	401a      	ands	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	431a      	orrs	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	621a      	str	r2, [r3, #32]
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e046      	b.n	8002642 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a16      	ldr	r2, [pc, #88]	@ (800264c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002600:	d009      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a10      	ldr	r2, [pc, #64]	@ (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10c      	bne.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800261c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	4313      	orrs	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800

08002658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e042      	b.n	80026f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe f972 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2224      	movs	r2, #36	@ 0x24
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800269a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fcd5 	bl	800304c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	4613      	mov	r3, r2
 8002704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b20      	cmp	r3, #32
 8002710:	d112      	bne.n	8002738 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_UART_Receive_IT+0x26>
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e00b      	b.n	800273a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	461a      	mov	r2, r3
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fab7 	bl	8002ca2 <UART_Start_Receive_IT>
 8002734:	4603      	mov	r3, r0
 8002736:	e000      	b.n	800273a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002738:	2302      	movs	r3, #2
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b0ba      	sub	sp, #232	@ 0xe8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10f      	bne.n	80027aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_UART_IRQHandler+0x66>
 8002796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fb93 	bl	8002ece <UART_Receive_IT>
      return;
 80027a8:	e25b      	b.n	8002c62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80de 	beq.w	8002970 <HAL_UART_IRQHandler+0x22c>
 80027b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d106      	bne.n	80027ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80d1 	beq.w	8002970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_UART_IRQHandler+0xae>
 80027da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_UART_IRQHandler+0xd2>
 80027fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f043 0202 	orr.w	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_UART_IRQHandler+0xf6>
 8002822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	f043 0204 	orr.w	r2, r3, #4
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800283a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d011      	beq.n	800286a <HAL_UART_IRQHandler+0x126>
 8002846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f043 0208 	orr.w	r2, r3, #8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 81f2 	beq.w	8002c58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_UART_IRQHandler+0x14e>
 8002880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fb1e 	bl	8002ece <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <HAL_UART_IRQHandler+0x17a>
 80028b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d04f      	beq.n	800295e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa28 	bl	8002d14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d041      	beq.n	8002956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3314      	adds	r3, #20
 80028d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3314      	adds	r3, #20
 80028fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800290a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800290e:	e841 2300 	strex	r3, r2, [r1]
 8002912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1d9      	bne.n	80028d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b24 <HAL_UART_IRQHandler+0x3e0>)
 800292c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fa68 	bl	8000e08 <HAL_DMA_Abort_IT>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d016      	beq.n	800296c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002948:	4610      	mov	r0, r2
 800294a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800294c:	e00e      	b.n	800296c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f993 	bl	8002c7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002954:	e00a      	b.n	800296c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f98f 	bl	8002c7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295c:	e006      	b.n	800296c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f98b 	bl	8002c7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800296a:	e175      	b.n	8002c58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	bf00      	nop
    return;
 800296e:	e173      	b.n	8002c58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002974:	2b01      	cmp	r3, #1
 8002976:	f040 814f 	bne.w	8002c18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800297a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8148 	beq.w	8002c18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8141 	beq.w	8002c18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80b6 	beq.w	8002b28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8145 	beq.w	8002c5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029da:	429a      	cmp	r2, r3
 80029dc:	f080 813e 	bcs.w	8002c5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	f000 8088 	beq.w	8002b04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a02:	e853 3f00 	ldrex	r3, [r3]
 8002a06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a20:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1d9      	bne.n	80029f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3314      	adds	r3, #20
 8002a46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3314      	adds	r3, #20
 8002a60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a64:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a70:	e841 2300 	strex	r3, r2, [r1]
 8002a74:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e1      	bne.n	8002a40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3314      	adds	r3, #20
 8002a82:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a86:	e853 3f00 	ldrex	r3, [r3]
 8002a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3314      	adds	r3, #20
 8002a9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002aa0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002aa6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002aa8:	e841 2300 	strex	r3, r2, [r1]
 8002aac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e3      	bne.n	8002a7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002acc:	e853 3f00 	ldrex	r3, [r3]
 8002ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ad4:	f023 0310 	bic.w	r3, r3, #16
 8002ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ae6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ae8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e3      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe f947 	bl	8000d92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8b6 	bl	8002c8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b20:	e09c      	b.n	8002c5c <HAL_UART_IRQHandler+0x518>
 8002b22:	bf00      	nop
 8002b24:	08002dd9 	.word	0x08002dd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 808e 	beq.w	8002c60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8089 	beq.w	8002c60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b72:	647a      	str	r2, [r7, #68]	@ 0x44
 8002b74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e3      	bne.n	8002b4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	623b      	str	r3, [r7, #32]
   return(result);
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3314      	adds	r3, #20
 8002ba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002baa:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e3      	bne.n	8002b86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0310 	bic.w	r3, r3, #16
 8002be2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	330c      	adds	r3, #12
 8002bec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002bf0:	61fa      	str	r2, [r7, #28]
 8002bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	69b9      	ldr	r1, [r7, #24]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e3      	bne.n	8002bcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f83b 	bl	8002c8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c16:	e023      	b.n	8002c60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_UART_IRQHandler+0x4f4>
 8002c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f8e5 	bl	8002e00 <UART_Transmit_IT>
    return;
 8002c36:	e014      	b.n	8002c62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <HAL_UART_IRQHandler+0x51e>
 8002c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f924 	bl	8002e9e <UART_EndTransmit_IT>
    return;
 8002c56:	e004      	b.n	8002c62 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c58:	bf00      	nop
 8002c5a:	e002      	b.n	8002c62 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c5c:	bf00      	nop
 8002c5e:	e000      	b.n	8002c62 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c60:	bf00      	nop
  }
}
 8002c62:	37e8      	adds	r7, #232	@ 0xe8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	88fa      	ldrh	r2, [r7, #6]
 8002cba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2222      	movs	r2, #34	@ 0x22
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0220 	orr.w	r2, r2, #32
 8002d06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b095      	sub	sp, #84	@ 0x54
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	330c      	adds	r3, #12
 8002d22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d26:	e853 3f00 	ldrex	r3, [r3]
 8002d2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d44:	e841 2300 	strex	r3, r2, [r1]
 8002d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e5      	bne.n	8002d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3314      	adds	r3, #20
 8002d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d78:	e841 2300 	strex	r3, r2, [r1]
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e5      	bne.n	8002d50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d119      	bne.n	8002dc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f023 0310 	bic.w	r3, r3, #16
 8002da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	330c      	adds	r3, #12
 8002daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dac:	61ba      	str	r2, [r7, #24]
 8002dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db0:	6979      	ldr	r1, [r7, #20]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	e841 2300 	strex	r3, r2, [r1]
 8002db8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e5      	bne.n	8002d8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002dce:	bf00      	nop
 8002dd0:	3754      	adds	r7, #84	@ 0x54
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff ff41 	bl	8002c7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b21      	cmp	r3, #33	@ 0x21
 8002e12:	d13e      	bne.n	8002e92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e1c:	d114      	bne.n	8002e48 <UART_Transmit_IT+0x48>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d110      	bne.n	8002e48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	1c9a      	adds	r2, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	621a      	str	r2, [r3, #32]
 8002e46:	e008      	b.n	8002e5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	1c59      	adds	r1, r3, #1
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6211      	str	r1, [r2, #32]
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4619      	mov	r1, r3
 8002e68:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10f      	bne.n	8002e8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
  }
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fed2 	bl	8002c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b08c      	sub	sp, #48	@ 0x30
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b22      	cmp	r3, #34	@ 0x22
 8002ee0:	f040 80ae 	bne.w	8003040 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eec:	d117      	bne.n	8002f1e <UART_Receive_IT+0x50>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d113      	bne.n	8002f1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	1c9a      	adds	r2, r3, #2
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f1c:	e026      	b.n	8002f6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f30:	d007      	beq.n	8002f42 <UART_Receive_IT+0x74>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <UART_Receive_IT+0x82>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e008      	b.n	8002f62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d15d      	bne.n	800303c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0220 	bic.w	r2, r2, #32
 8002f8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d135      	bne.n	8003032 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	613b      	str	r3, [r7, #16]
   return(result);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f023 0310 	bic.w	r3, r3, #16
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fec:	623a      	str	r2, [r7, #32]
 8002fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	69f9      	ldr	r1, [r7, #28]
 8002ff2:	6a3a      	ldr	r2, [r7, #32]
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e5      	bne.n	8002fcc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b10      	cmp	r3, #16
 800300c:	d10a      	bne.n	8003024 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fe2e 	bl	8002c8c <HAL_UARTEx_RxEventCallback>
 8003030:	e002      	b.n	8003038 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd f902 	bl	800023c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e002      	b.n	8003042 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3730      	adds	r7, #48	@ 0x30
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003086:	f023 030c 	bic.w	r3, r3, #12
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	430b      	orrs	r3, r1
 8003092:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003160 <UART_SetConfig+0x114>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7fe fcbc 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	e002      	b.n	80030c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030bc:	f7fe fca4 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 80030c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	4a22      	ldr	r2, [pc, #136]	@ (8003164 <UART_SetConfig+0x118>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	0119      	lsls	r1, r3, #4
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009a      	lsls	r2, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <UART_SetConfig+0x118>)
 80030fa:	fba3 0302 	umull	r0, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2064      	movs	r0, #100	@ 0x64
 8003102:	fb00 f303 	mul.w	r3, r0, r3
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	3332      	adds	r3, #50	@ 0x32
 800310c:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <UART_SetConfig+0x118>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003118:	4419      	add	r1, r3
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <UART_SetConfig+0x118>)
 8003132:	fba3 0302 	umull	r0, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2064      	movs	r0, #100	@ 0x64
 800313a:	fb00 f303 	mul.w	r3, r0, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	3332      	adds	r3, #50	@ 0x32
 8003144:	4a07      	ldr	r2, [pc, #28]	@ (8003164 <UART_SetConfig+0x118>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	440a      	add	r2, r1
 8003156:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40013800 	.word	0x40013800
 8003164:	51eb851f 	.word	0x51eb851f

08003168 <siscanf>:
 8003168:	b40e      	push	{r1, r2, r3}
 800316a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800316e:	b530      	push	{r4, r5, lr}
 8003170:	b09c      	sub	sp, #112	@ 0x70
 8003172:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003174:	f854 5b04 	ldr.w	r5, [r4], #4
 8003178:	f8ad 2014 	strh.w	r2, [sp, #20]
 800317c:	9002      	str	r0, [sp, #8]
 800317e:	9006      	str	r0, [sp, #24]
 8003180:	f7fc ffe4 	bl	800014c <strlen>
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <siscanf+0x4c>)
 8003186:	9003      	str	r0, [sp, #12]
 8003188:	930b      	str	r3, [sp, #44]	@ 0x2c
 800318a:	2300      	movs	r3, #0
 800318c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800318e:	9314      	str	r3, [sp, #80]	@ 0x50
 8003190:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003194:	9007      	str	r0, [sp, #28]
 8003196:	4808      	ldr	r0, [pc, #32]	@ (80031b8 <siscanf+0x50>)
 8003198:	f8ad 3016 	strh.w	r3, [sp, #22]
 800319c:	462a      	mov	r2, r5
 800319e:	4623      	mov	r3, r4
 80031a0:	a902      	add	r1, sp, #8
 80031a2:	6800      	ldr	r0, [r0, #0]
 80031a4:	9401      	str	r4, [sp, #4]
 80031a6:	f000 f98d 	bl	80034c4 <__ssvfiscanf_r>
 80031aa:	b01c      	add	sp, #112	@ 0x70
 80031ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031b0:	b003      	add	sp, #12
 80031b2:	4770      	bx	lr
 80031b4:	080031bd 	.word	0x080031bd
 80031b8:	2000000c 	.word	0x2000000c

080031bc <__seofread>:
 80031bc:	2000      	movs	r0, #0
 80031be:	4770      	bx	lr

080031c0 <memset>:
 80031c0:	4603      	mov	r3, r0
 80031c2:	4402      	add	r2, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <__errno>:
 80031d0:	4b01      	ldr	r3, [pc, #4]	@ (80031d8 <__errno+0x8>)
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	2000000c 	.word	0x2000000c

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	2600      	movs	r6, #0
 80031e0:	4d0c      	ldr	r5, [pc, #48]	@ (8003214 <__libc_init_array+0x38>)
 80031e2:	4c0d      	ldr	r4, [pc, #52]	@ (8003218 <__libc_init_array+0x3c>)
 80031e4:	1b64      	subs	r4, r4, r5
 80031e6:	10a4      	asrs	r4, r4, #2
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	f000 fde8 	bl	8003dc0 <_init>
 80031f0:	2600      	movs	r6, #0
 80031f2:	4d0a      	ldr	r5, [pc, #40]	@ (800321c <__libc_init_array+0x40>)
 80031f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003220 <__libc_init_array+0x44>)
 80031f6:	1b64      	subs	r4, r4, r5
 80031f8:	10a4      	asrs	r4, r4, #2
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f855 3b04 	ldr.w	r3, [r5], #4
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f855 3b04 	ldr.w	r3, [r5], #4
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	08003f40 	.word	0x08003f40
 8003218:	08003f40 	.word	0x08003f40
 800321c:	08003f40 	.word	0x08003f40
 8003220:	08003f44 	.word	0x08003f44

08003224 <__retarget_lock_acquire_recursive>:
 8003224:	4770      	bx	lr

08003226 <__retarget_lock_release_recursive>:
 8003226:	4770      	bx	lr

08003228 <_free_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	4605      	mov	r5, r0
 800322c:	2900      	cmp	r1, #0
 800322e:	d040      	beq.n	80032b2 <_free_r+0x8a>
 8003230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003234:	1f0c      	subs	r4, r1, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bfb8      	it	lt
 800323a:	18e4      	addlt	r4, r4, r3
 800323c:	f000 f8de 	bl	80033fc <__malloc_lock>
 8003240:	4a1c      	ldr	r2, [pc, #112]	@ (80032b4 <_free_r+0x8c>)
 8003242:	6813      	ldr	r3, [r2, #0]
 8003244:	b933      	cbnz	r3, 8003254 <_free_r+0x2c>
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	6014      	str	r4, [r2, #0]
 800324a:	4628      	mov	r0, r5
 800324c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003250:	f000 b8da 	b.w	8003408 <__malloc_unlock>
 8003254:	42a3      	cmp	r3, r4
 8003256:	d908      	bls.n	800326a <_free_r+0x42>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	1821      	adds	r1, r4, r0
 800325c:	428b      	cmp	r3, r1
 800325e:	bf01      	itttt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	1809      	addeq	r1, r1, r0
 8003266:	6021      	streq	r1, [r4, #0]
 8003268:	e7ed      	b.n	8003246 <_free_r+0x1e>
 800326a:	461a      	mov	r2, r3
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b10b      	cbz	r3, 8003274 <_free_r+0x4c>
 8003270:	42a3      	cmp	r3, r4
 8003272:	d9fa      	bls.n	800326a <_free_r+0x42>
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	1850      	adds	r0, r2, r1
 8003278:	42a0      	cmp	r0, r4
 800327a:	d10b      	bne.n	8003294 <_free_r+0x6c>
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	4401      	add	r1, r0
 8003280:	1850      	adds	r0, r2, r1
 8003282:	4283      	cmp	r3, r0
 8003284:	6011      	str	r1, [r2, #0]
 8003286:	d1e0      	bne.n	800324a <_free_r+0x22>
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4408      	add	r0, r1
 800328e:	6010      	str	r0, [r2, #0]
 8003290:	6053      	str	r3, [r2, #4]
 8003292:	e7da      	b.n	800324a <_free_r+0x22>
 8003294:	d902      	bls.n	800329c <_free_r+0x74>
 8003296:	230c      	movs	r3, #12
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	e7d6      	b.n	800324a <_free_r+0x22>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	1821      	adds	r1, r4, r0
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf01      	itttt	eq
 80032a4:	6819      	ldreq	r1, [r3, #0]
 80032a6:	685b      	ldreq	r3, [r3, #4]
 80032a8:	1809      	addeq	r1, r1, r0
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	6063      	str	r3, [r4, #4]
 80032ae:	6054      	str	r4, [r2, #4]
 80032b0:	e7cb      	b.n	800324a <_free_r+0x22>
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	200002b4 	.word	0x200002b4

080032b8 <sbrk_aligned>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4e0f      	ldr	r6, [pc, #60]	@ (80032f8 <sbrk_aligned+0x40>)
 80032bc:	460c      	mov	r4, r1
 80032be:	6831      	ldr	r1, [r6, #0]
 80032c0:	4605      	mov	r5, r0
 80032c2:	b911      	cbnz	r1, 80032ca <sbrk_aligned+0x12>
 80032c4:	f000 fc2e 	bl	8003b24 <_sbrk_r>
 80032c8:	6030      	str	r0, [r6, #0]
 80032ca:	4621      	mov	r1, r4
 80032cc:	4628      	mov	r0, r5
 80032ce:	f000 fc29 	bl	8003b24 <_sbrk_r>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	d103      	bne.n	80032de <sbrk_aligned+0x26>
 80032d6:	f04f 34ff 	mov.w	r4, #4294967295
 80032da:	4620      	mov	r0, r4
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
 80032de:	1cc4      	adds	r4, r0, #3
 80032e0:	f024 0403 	bic.w	r4, r4, #3
 80032e4:	42a0      	cmp	r0, r4
 80032e6:	d0f8      	beq.n	80032da <sbrk_aligned+0x22>
 80032e8:	1a21      	subs	r1, r4, r0
 80032ea:	4628      	mov	r0, r5
 80032ec:	f000 fc1a 	bl	8003b24 <_sbrk_r>
 80032f0:	3001      	adds	r0, #1
 80032f2:	d1f2      	bne.n	80032da <sbrk_aligned+0x22>
 80032f4:	e7ef      	b.n	80032d6 <sbrk_aligned+0x1e>
 80032f6:	bf00      	nop
 80032f8:	200002b0 	.word	0x200002b0

080032fc <_malloc_r>:
 80032fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003300:	1ccd      	adds	r5, r1, #3
 8003302:	f025 0503 	bic.w	r5, r5, #3
 8003306:	3508      	adds	r5, #8
 8003308:	2d0c      	cmp	r5, #12
 800330a:	bf38      	it	cc
 800330c:	250c      	movcc	r5, #12
 800330e:	2d00      	cmp	r5, #0
 8003310:	4606      	mov	r6, r0
 8003312:	db01      	blt.n	8003318 <_malloc_r+0x1c>
 8003314:	42a9      	cmp	r1, r5
 8003316:	d904      	bls.n	8003322 <_malloc_r+0x26>
 8003318:	230c      	movs	r3, #12
 800331a:	6033      	str	r3, [r6, #0]
 800331c:	2000      	movs	r0, #0
 800331e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033f8 <_malloc_r+0xfc>
 8003326:	f000 f869 	bl	80033fc <__malloc_lock>
 800332a:	f8d8 3000 	ldr.w	r3, [r8]
 800332e:	461c      	mov	r4, r3
 8003330:	bb44      	cbnz	r4, 8003384 <_malloc_r+0x88>
 8003332:	4629      	mov	r1, r5
 8003334:	4630      	mov	r0, r6
 8003336:	f7ff ffbf 	bl	80032b8 <sbrk_aligned>
 800333a:	1c43      	adds	r3, r0, #1
 800333c:	4604      	mov	r4, r0
 800333e:	d158      	bne.n	80033f2 <_malloc_r+0xf6>
 8003340:	f8d8 4000 	ldr.w	r4, [r8]
 8003344:	4627      	mov	r7, r4
 8003346:	2f00      	cmp	r7, #0
 8003348:	d143      	bne.n	80033d2 <_malloc_r+0xd6>
 800334a:	2c00      	cmp	r4, #0
 800334c:	d04b      	beq.n	80033e6 <_malloc_r+0xea>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	4639      	mov	r1, r7
 8003352:	4630      	mov	r0, r6
 8003354:	eb04 0903 	add.w	r9, r4, r3
 8003358:	f000 fbe4 	bl	8003b24 <_sbrk_r>
 800335c:	4581      	cmp	r9, r0
 800335e:	d142      	bne.n	80033e6 <_malloc_r+0xea>
 8003360:	6821      	ldr	r1, [r4, #0]
 8003362:	4630      	mov	r0, r6
 8003364:	1a6d      	subs	r5, r5, r1
 8003366:	4629      	mov	r1, r5
 8003368:	f7ff ffa6 	bl	80032b8 <sbrk_aligned>
 800336c:	3001      	adds	r0, #1
 800336e:	d03a      	beq.n	80033e6 <_malloc_r+0xea>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	442b      	add	r3, r5
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	f8d8 3000 	ldr.w	r3, [r8]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	bb62      	cbnz	r2, 80033d8 <_malloc_r+0xdc>
 800337e:	f8c8 7000 	str.w	r7, [r8]
 8003382:	e00f      	b.n	80033a4 <_malloc_r+0xa8>
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	1b52      	subs	r2, r2, r5
 8003388:	d420      	bmi.n	80033cc <_malloc_r+0xd0>
 800338a:	2a0b      	cmp	r2, #11
 800338c:	d917      	bls.n	80033be <_malloc_r+0xc2>
 800338e:	1961      	adds	r1, r4, r5
 8003390:	42a3      	cmp	r3, r4
 8003392:	6025      	str	r5, [r4, #0]
 8003394:	bf18      	it	ne
 8003396:	6059      	strne	r1, [r3, #4]
 8003398:	6863      	ldr	r3, [r4, #4]
 800339a:	bf08      	it	eq
 800339c:	f8c8 1000 	streq.w	r1, [r8]
 80033a0:	5162      	str	r2, [r4, r5]
 80033a2:	604b      	str	r3, [r1, #4]
 80033a4:	4630      	mov	r0, r6
 80033a6:	f000 f82f 	bl	8003408 <__malloc_unlock>
 80033aa:	f104 000b 	add.w	r0, r4, #11
 80033ae:	1d23      	adds	r3, r4, #4
 80033b0:	f020 0007 	bic.w	r0, r0, #7
 80033b4:	1ac2      	subs	r2, r0, r3
 80033b6:	bf1c      	itt	ne
 80033b8:	1a1b      	subne	r3, r3, r0
 80033ba:	50a3      	strne	r3, [r4, r2]
 80033bc:	e7af      	b.n	800331e <_malloc_r+0x22>
 80033be:	6862      	ldr	r2, [r4, #4]
 80033c0:	42a3      	cmp	r3, r4
 80033c2:	bf0c      	ite	eq
 80033c4:	f8c8 2000 	streq.w	r2, [r8]
 80033c8:	605a      	strne	r2, [r3, #4]
 80033ca:	e7eb      	b.n	80033a4 <_malloc_r+0xa8>
 80033cc:	4623      	mov	r3, r4
 80033ce:	6864      	ldr	r4, [r4, #4]
 80033d0:	e7ae      	b.n	8003330 <_malloc_r+0x34>
 80033d2:	463c      	mov	r4, r7
 80033d4:	687f      	ldr	r7, [r7, #4]
 80033d6:	e7b6      	b.n	8003346 <_malloc_r+0x4a>
 80033d8:	461a      	mov	r2, r3
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	42a3      	cmp	r3, r4
 80033de:	d1fb      	bne.n	80033d8 <_malloc_r+0xdc>
 80033e0:	2300      	movs	r3, #0
 80033e2:	6053      	str	r3, [r2, #4]
 80033e4:	e7de      	b.n	80033a4 <_malloc_r+0xa8>
 80033e6:	230c      	movs	r3, #12
 80033e8:	4630      	mov	r0, r6
 80033ea:	6033      	str	r3, [r6, #0]
 80033ec:	f000 f80c 	bl	8003408 <__malloc_unlock>
 80033f0:	e794      	b.n	800331c <_malloc_r+0x20>
 80033f2:	6005      	str	r5, [r0, #0]
 80033f4:	e7d6      	b.n	80033a4 <_malloc_r+0xa8>
 80033f6:	bf00      	nop
 80033f8:	200002b4 	.word	0x200002b4

080033fc <__malloc_lock>:
 80033fc:	4801      	ldr	r0, [pc, #4]	@ (8003404 <__malloc_lock+0x8>)
 80033fe:	f7ff bf11 	b.w	8003224 <__retarget_lock_acquire_recursive>
 8003402:	bf00      	nop
 8003404:	200002ac 	.word	0x200002ac

08003408 <__malloc_unlock>:
 8003408:	4801      	ldr	r0, [pc, #4]	@ (8003410 <__malloc_unlock+0x8>)
 800340a:	f7ff bf0c 	b.w	8003226 <__retarget_lock_release_recursive>
 800340e:	bf00      	nop
 8003410:	200002ac 	.word	0x200002ac

08003414 <_sungetc_r>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	1c4b      	adds	r3, r1, #1
 8003418:	4614      	mov	r4, r2
 800341a:	d103      	bne.n	8003424 <_sungetc_r+0x10>
 800341c:	f04f 35ff 	mov.w	r5, #4294967295
 8003420:	4628      	mov	r0, r5
 8003422:	bd38      	pop	{r3, r4, r5, pc}
 8003424:	8993      	ldrh	r3, [r2, #12]
 8003426:	b2cd      	uxtb	r5, r1
 8003428:	f023 0320 	bic.w	r3, r3, #32
 800342c:	8193      	strh	r3, [r2, #12]
 800342e:	6853      	ldr	r3, [r2, #4]
 8003430:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003432:	b18a      	cbz	r2, 8003458 <_sungetc_r+0x44>
 8003434:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003436:	429a      	cmp	r2, r3
 8003438:	dd08      	ble.n	800344c <_sungetc_r+0x38>
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	1e5a      	subs	r2, r3, #1
 800343e:	6022      	str	r2, [r4, #0]
 8003440:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003444:	6863      	ldr	r3, [r4, #4]
 8003446:	3301      	adds	r3, #1
 8003448:	6063      	str	r3, [r4, #4]
 800344a:	e7e9      	b.n	8003420 <_sungetc_r+0xc>
 800344c:	4621      	mov	r1, r4
 800344e:	f000 fb30 	bl	8003ab2 <__submore>
 8003452:	2800      	cmp	r0, #0
 8003454:	d0f1      	beq.n	800343a <_sungetc_r+0x26>
 8003456:	e7e1      	b.n	800341c <_sungetc_r+0x8>
 8003458:	6921      	ldr	r1, [r4, #16]
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	b141      	cbz	r1, 8003470 <_sungetc_r+0x5c>
 800345e:	4291      	cmp	r1, r2
 8003460:	d206      	bcs.n	8003470 <_sungetc_r+0x5c>
 8003462:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8003466:	42a9      	cmp	r1, r5
 8003468:	d102      	bne.n	8003470 <_sungetc_r+0x5c>
 800346a:	3a01      	subs	r2, #1
 800346c:	6022      	str	r2, [r4, #0]
 800346e:	e7ea      	b.n	8003446 <_sungetc_r+0x32>
 8003470:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8003474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003478:	6363      	str	r3, [r4, #52]	@ 0x34
 800347a:	2303      	movs	r3, #3
 800347c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800347e:	4623      	mov	r3, r4
 8003480:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	2301      	movs	r3, #1
 8003488:	e7de      	b.n	8003448 <_sungetc_r+0x34>

0800348a <__ssrefill_r>:
 800348a:	b510      	push	{r4, lr}
 800348c:	460c      	mov	r4, r1
 800348e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003490:	b169      	cbz	r1, 80034ae <__ssrefill_r+0x24>
 8003492:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003496:	4299      	cmp	r1, r3
 8003498:	d001      	beq.n	800349e <__ssrefill_r+0x14>
 800349a:	f7ff fec5 	bl	8003228 <_free_r>
 800349e:	2000      	movs	r0, #0
 80034a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034a2:	6360      	str	r0, [r4, #52]	@ 0x34
 80034a4:	6063      	str	r3, [r4, #4]
 80034a6:	b113      	cbz	r3, 80034ae <__ssrefill_r+0x24>
 80034a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80034aa:	6023      	str	r3, [r4, #0]
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	6923      	ldr	r3, [r4, #16]
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	2300      	movs	r3, #0
 80034b8:	6063      	str	r3, [r4, #4]
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	f043 0320 	orr.w	r3, r3, #32
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	e7f3      	b.n	80034ac <__ssrefill_r+0x22>

080034c4 <__ssvfiscanf_r>:
 80034c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c8:	460c      	mov	r4, r1
 80034ca:	2100      	movs	r1, #0
 80034cc:	4606      	mov	r6, r0
 80034ce:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80034d2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80034d6:	49aa      	ldr	r1, [pc, #680]	@ (8003780 <__ssvfiscanf_r+0x2bc>)
 80034d8:	f10d 0804 	add.w	r8, sp, #4
 80034dc:	91a0      	str	r1, [sp, #640]	@ 0x280
 80034de:	49a9      	ldr	r1, [pc, #676]	@ (8003784 <__ssvfiscanf_r+0x2c0>)
 80034e0:	4fa9      	ldr	r7, [pc, #676]	@ (8003788 <__ssvfiscanf_r+0x2c4>)
 80034e2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80034e6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	7813      	ldrb	r3, [r2, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8159 	beq.w	80037a4 <__ssvfiscanf_r+0x2e0>
 80034f2:	5cf9      	ldrb	r1, [r7, r3]
 80034f4:	1c55      	adds	r5, r2, #1
 80034f6:	f011 0108 	ands.w	r1, r1, #8
 80034fa:	d019      	beq.n	8003530 <__ssvfiscanf_r+0x6c>
 80034fc:	6863      	ldr	r3, [r4, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	dd0f      	ble.n	8003522 <__ssvfiscanf_r+0x5e>
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	5cba      	ldrb	r2, [r7, r2]
 8003508:	0712      	lsls	r2, r2, #28
 800350a:	d401      	bmi.n	8003510 <__ssvfiscanf_r+0x4c>
 800350c:	462a      	mov	r2, r5
 800350e:	e7ec      	b.n	80034ea <__ssvfiscanf_r+0x26>
 8003510:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003512:	3301      	adds	r3, #1
 8003514:	3201      	adds	r2, #1
 8003516:	9245      	str	r2, [sp, #276]	@ 0x114
 8003518:	6862      	ldr	r2, [r4, #4]
 800351a:	6023      	str	r3, [r4, #0]
 800351c:	3a01      	subs	r2, #1
 800351e:	6062      	str	r2, [r4, #4]
 8003520:	e7ec      	b.n	80034fc <__ssvfiscanf_r+0x38>
 8003522:	4621      	mov	r1, r4
 8003524:	4630      	mov	r0, r6
 8003526:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003528:	4798      	blx	r3
 800352a:	2800      	cmp	r0, #0
 800352c:	d0e9      	beq.n	8003502 <__ssvfiscanf_r+0x3e>
 800352e:	e7ed      	b.n	800350c <__ssvfiscanf_r+0x48>
 8003530:	2b25      	cmp	r3, #37	@ 0x25
 8003532:	d012      	beq.n	800355a <__ssvfiscanf_r+0x96>
 8003534:	4699      	mov	r9, r3
 8003536:	6863      	ldr	r3, [r4, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f340 8094 	ble.w	8003666 <__ssvfiscanf_r+0x1a2>
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	7813      	ldrb	r3, [r2, #0]
 8003542:	454b      	cmp	r3, r9
 8003544:	f040 812e 	bne.w	80037a4 <__ssvfiscanf_r+0x2e0>
 8003548:	6863      	ldr	r3, [r4, #4]
 800354a:	3201      	adds	r2, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003552:	6022      	str	r2, [r4, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	9345      	str	r3, [sp, #276]	@ 0x114
 8003558:	e7d8      	b.n	800350c <__ssvfiscanf_r+0x48>
 800355a:	9141      	str	r1, [sp, #260]	@ 0x104
 800355c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800355e:	7853      	ldrb	r3, [r2, #1]
 8003560:	2b2a      	cmp	r3, #42	@ 0x2a
 8003562:	bf04      	itt	eq
 8003564:	2310      	moveq	r3, #16
 8003566:	1c95      	addeq	r5, r2, #2
 8003568:	f04f 020a 	mov.w	r2, #10
 800356c:	bf08      	it	eq
 800356e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003570:	46a9      	mov	r9, r5
 8003572:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003576:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800357a:	2b09      	cmp	r3, #9
 800357c:	d91e      	bls.n	80035bc <__ssvfiscanf_r+0xf8>
 800357e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800378c <__ssvfiscanf_r+0x2c8>
 8003582:	2203      	movs	r2, #3
 8003584:	4650      	mov	r0, sl
 8003586:	f000 fadd 	bl	8003b44 <memchr>
 800358a:	b138      	cbz	r0, 800359c <__ssvfiscanf_r+0xd8>
 800358c:	2301      	movs	r3, #1
 800358e:	464d      	mov	r5, r9
 8003590:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003592:	eba0 000a 	sub.w	r0, r0, sl
 8003596:	4083      	lsls	r3, r0
 8003598:	4313      	orrs	r3, r2
 800359a:	9341      	str	r3, [sp, #260]	@ 0x104
 800359c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035a0:	2b78      	cmp	r3, #120	@ 0x78
 80035a2:	d806      	bhi.n	80035b2 <__ssvfiscanf_r+0xee>
 80035a4:	2b57      	cmp	r3, #87	@ 0x57
 80035a6:	d810      	bhi.n	80035ca <__ssvfiscanf_r+0x106>
 80035a8:	2b25      	cmp	r3, #37	@ 0x25
 80035aa:	d0c3      	beq.n	8003534 <__ssvfiscanf_r+0x70>
 80035ac:	d856      	bhi.n	800365c <__ssvfiscanf_r+0x198>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d064      	beq.n	800367c <__ssvfiscanf_r+0x1b8>
 80035b2:	2303      	movs	r3, #3
 80035b4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80035b6:	230a      	movs	r3, #10
 80035b8:	9342      	str	r3, [sp, #264]	@ 0x108
 80035ba:	e077      	b.n	80036ac <__ssvfiscanf_r+0x1e8>
 80035bc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80035be:	464d      	mov	r5, r9
 80035c0:	fb02 1103 	mla	r1, r2, r3, r1
 80035c4:	3930      	subs	r1, #48	@ 0x30
 80035c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80035c8:	e7d2      	b.n	8003570 <__ssvfiscanf_r+0xac>
 80035ca:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80035ce:	2a20      	cmp	r2, #32
 80035d0:	d8ef      	bhi.n	80035b2 <__ssvfiscanf_r+0xee>
 80035d2:	a101      	add	r1, pc, #4	@ (adr r1, 80035d8 <__ssvfiscanf_r+0x114>)
 80035d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80035d8:	0800368b 	.word	0x0800368b
 80035dc:	080035b3 	.word	0x080035b3
 80035e0:	080035b3 	.word	0x080035b3
 80035e4:	080036e5 	.word	0x080036e5
 80035e8:	080035b3 	.word	0x080035b3
 80035ec:	080035b3 	.word	0x080035b3
 80035f0:	080035b3 	.word	0x080035b3
 80035f4:	080035b3 	.word	0x080035b3
 80035f8:	080035b3 	.word	0x080035b3
 80035fc:	080035b3 	.word	0x080035b3
 8003600:	080035b3 	.word	0x080035b3
 8003604:	080036fb 	.word	0x080036fb
 8003608:	080036e1 	.word	0x080036e1
 800360c:	08003663 	.word	0x08003663
 8003610:	08003663 	.word	0x08003663
 8003614:	08003663 	.word	0x08003663
 8003618:	080035b3 	.word	0x080035b3
 800361c:	0800369d 	.word	0x0800369d
 8003620:	080035b3 	.word	0x080035b3
 8003624:	080035b3 	.word	0x080035b3
 8003628:	080035b3 	.word	0x080035b3
 800362c:	080035b3 	.word	0x080035b3
 8003630:	0800370b 	.word	0x0800370b
 8003634:	080036a5 	.word	0x080036a5
 8003638:	08003683 	.word	0x08003683
 800363c:	080035b3 	.word	0x080035b3
 8003640:	080035b3 	.word	0x080035b3
 8003644:	08003707 	.word	0x08003707
 8003648:	080035b3 	.word	0x080035b3
 800364c:	080036e1 	.word	0x080036e1
 8003650:	080035b3 	.word	0x080035b3
 8003654:	080035b3 	.word	0x080035b3
 8003658:	0800368b 	.word	0x0800368b
 800365c:	3b45      	subs	r3, #69	@ 0x45
 800365e:	2b02      	cmp	r3, #2
 8003660:	d8a7      	bhi.n	80035b2 <__ssvfiscanf_r+0xee>
 8003662:	2305      	movs	r3, #5
 8003664:	e021      	b.n	80036aa <__ssvfiscanf_r+0x1e6>
 8003666:	4621      	mov	r1, r4
 8003668:	4630      	mov	r0, r6
 800366a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800366c:	4798      	blx	r3
 800366e:	2800      	cmp	r0, #0
 8003670:	f43f af65 	beq.w	800353e <__ssvfiscanf_r+0x7a>
 8003674:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003676:	2800      	cmp	r0, #0
 8003678:	f040 808c 	bne.w	8003794 <__ssvfiscanf_r+0x2d0>
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	e08c      	b.n	800379c <__ssvfiscanf_r+0x2d8>
 8003682:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003684:	f042 0220 	orr.w	r2, r2, #32
 8003688:	9241      	str	r2, [sp, #260]	@ 0x104
 800368a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800368c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003690:	9241      	str	r2, [sp, #260]	@ 0x104
 8003692:	2210      	movs	r2, #16
 8003694:	2b6e      	cmp	r3, #110	@ 0x6e
 8003696:	9242      	str	r2, [sp, #264]	@ 0x108
 8003698:	d902      	bls.n	80036a0 <__ssvfiscanf_r+0x1dc>
 800369a:	e005      	b.n	80036a8 <__ssvfiscanf_r+0x1e4>
 800369c:	2300      	movs	r3, #0
 800369e:	9342      	str	r3, [sp, #264]	@ 0x108
 80036a0:	2303      	movs	r3, #3
 80036a2:	e002      	b.n	80036aa <__ssvfiscanf_r+0x1e6>
 80036a4:	2308      	movs	r3, #8
 80036a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80036a8:	2304      	movs	r3, #4
 80036aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80036ac:	6863      	ldr	r3, [r4, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	dd39      	ble.n	8003726 <__ssvfiscanf_r+0x262>
 80036b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80036b4:	0659      	lsls	r1, r3, #25
 80036b6:	d404      	bmi.n	80036c2 <__ssvfiscanf_r+0x1fe>
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	781a      	ldrb	r2, [r3, #0]
 80036bc:	5cba      	ldrb	r2, [r7, r2]
 80036be:	0712      	lsls	r2, r2, #28
 80036c0:	d438      	bmi.n	8003734 <__ssvfiscanf_r+0x270>
 80036c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	dc47      	bgt.n	8003758 <__ssvfiscanf_r+0x294>
 80036c8:	466b      	mov	r3, sp
 80036ca:	4622      	mov	r2, r4
 80036cc:	4630      	mov	r0, r6
 80036ce:	a941      	add	r1, sp, #260	@ 0x104
 80036d0:	f000 f86a 	bl	80037a8 <_scanf_chars>
 80036d4:	2801      	cmp	r0, #1
 80036d6:	d065      	beq.n	80037a4 <__ssvfiscanf_r+0x2e0>
 80036d8:	2802      	cmp	r0, #2
 80036da:	f47f af17 	bne.w	800350c <__ssvfiscanf_r+0x48>
 80036de:	e7c9      	b.n	8003674 <__ssvfiscanf_r+0x1b0>
 80036e0:	220a      	movs	r2, #10
 80036e2:	e7d7      	b.n	8003694 <__ssvfiscanf_r+0x1d0>
 80036e4:	4629      	mov	r1, r5
 80036e6:	4640      	mov	r0, r8
 80036e8:	f000 f9aa 	bl	8003a40 <__sccl>
 80036ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80036ee:	4605      	mov	r5, r0
 80036f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036f4:	9341      	str	r3, [sp, #260]	@ 0x104
 80036f6:	2301      	movs	r3, #1
 80036f8:	e7d7      	b.n	80036aa <__ssvfiscanf_r+0x1e6>
 80036fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80036fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003700:	9341      	str	r3, [sp, #260]	@ 0x104
 8003702:	2300      	movs	r3, #0
 8003704:	e7d1      	b.n	80036aa <__ssvfiscanf_r+0x1e6>
 8003706:	2302      	movs	r3, #2
 8003708:	e7cf      	b.n	80036aa <__ssvfiscanf_r+0x1e6>
 800370a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800370c:	06c3      	lsls	r3, r0, #27
 800370e:	f53f aefd 	bmi.w	800350c <__ssvfiscanf_r+0x48>
 8003712:	9b00      	ldr	r3, [sp, #0]
 8003714:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003716:	1d19      	adds	r1, r3, #4
 8003718:	9100      	str	r1, [sp, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	07c0      	lsls	r0, r0, #31
 800371e:	bf4c      	ite	mi
 8003720:	801a      	strhmi	r2, [r3, #0]
 8003722:	601a      	strpl	r2, [r3, #0]
 8003724:	e6f2      	b.n	800350c <__ssvfiscanf_r+0x48>
 8003726:	4621      	mov	r1, r4
 8003728:	4630      	mov	r0, r6
 800372a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800372c:	4798      	blx	r3
 800372e:	2800      	cmp	r0, #0
 8003730:	d0bf      	beq.n	80036b2 <__ssvfiscanf_r+0x1ee>
 8003732:	e79f      	b.n	8003674 <__ssvfiscanf_r+0x1b0>
 8003734:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003736:	3201      	adds	r2, #1
 8003738:	9245      	str	r2, [sp, #276]	@ 0x114
 800373a:	6862      	ldr	r2, [r4, #4]
 800373c:	3a01      	subs	r2, #1
 800373e:	2a00      	cmp	r2, #0
 8003740:	6062      	str	r2, [r4, #4]
 8003742:	dd02      	ble.n	800374a <__ssvfiscanf_r+0x286>
 8003744:	3301      	adds	r3, #1
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	e7b6      	b.n	80036b8 <__ssvfiscanf_r+0x1f4>
 800374a:	4621      	mov	r1, r4
 800374c:	4630      	mov	r0, r6
 800374e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003750:	4798      	blx	r3
 8003752:	2800      	cmp	r0, #0
 8003754:	d0b0      	beq.n	80036b8 <__ssvfiscanf_r+0x1f4>
 8003756:	e78d      	b.n	8003674 <__ssvfiscanf_r+0x1b0>
 8003758:	2b04      	cmp	r3, #4
 800375a:	dc06      	bgt.n	800376a <__ssvfiscanf_r+0x2a6>
 800375c:	466b      	mov	r3, sp
 800375e:	4622      	mov	r2, r4
 8003760:	4630      	mov	r0, r6
 8003762:	a941      	add	r1, sp, #260	@ 0x104
 8003764:	f000 f87a 	bl	800385c <_scanf_i>
 8003768:	e7b4      	b.n	80036d4 <__ssvfiscanf_r+0x210>
 800376a:	4b09      	ldr	r3, [pc, #36]	@ (8003790 <__ssvfiscanf_r+0x2cc>)
 800376c:	2b00      	cmp	r3, #0
 800376e:	f43f aecd 	beq.w	800350c <__ssvfiscanf_r+0x48>
 8003772:	466b      	mov	r3, sp
 8003774:	4622      	mov	r2, r4
 8003776:	4630      	mov	r0, r6
 8003778:	a941      	add	r1, sp, #260	@ 0x104
 800377a:	f3af 8000 	nop.w
 800377e:	e7a9      	b.n	80036d4 <__ssvfiscanf_r+0x210>
 8003780:	08003415 	.word	0x08003415
 8003784:	0800348b 	.word	0x0800348b
 8003788:	08003e36 	.word	0x08003e36
 800378c:	08003e16 	.word	0x08003e16
 8003790:	00000000 	.word	0x00000000
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	065b      	lsls	r3, r3, #25
 8003798:	f53f af70 	bmi.w	800367c <__ssvfiscanf_r+0x1b8>
 800379c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80037a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80037a6:	e7f9      	b.n	800379c <__ssvfiscanf_r+0x2d8>

080037a8 <_scanf_chars>:
 80037a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037ac:	4615      	mov	r5, r2
 80037ae:	688a      	ldr	r2, [r1, #8]
 80037b0:	4680      	mov	r8, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	b932      	cbnz	r2, 80037c4 <_scanf_chars+0x1c>
 80037b6:	698a      	ldr	r2, [r1, #24]
 80037b8:	2a00      	cmp	r2, #0
 80037ba:	bf14      	ite	ne
 80037bc:	f04f 32ff 	movne.w	r2, #4294967295
 80037c0:	2201      	moveq	r2, #1
 80037c2:	608a      	str	r2, [r1, #8]
 80037c4:	2700      	movs	r7, #0
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8003858 <_scanf_chars+0xb0>
 80037cc:	06d1      	lsls	r1, r2, #27
 80037ce:	bf5f      	itttt	pl
 80037d0:	681a      	ldrpl	r2, [r3, #0]
 80037d2:	1d11      	addpl	r1, r2, #4
 80037d4:	6019      	strpl	r1, [r3, #0]
 80037d6:	6816      	ldrpl	r6, [r2, #0]
 80037d8:	69a0      	ldr	r0, [r4, #24]
 80037da:	b188      	cbz	r0, 8003800 <_scanf_chars+0x58>
 80037dc:	2801      	cmp	r0, #1
 80037de:	d107      	bne.n	80037f0 <_scanf_chars+0x48>
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	6963      	ldr	r3, [r4, #20]
 80037e6:	5c9b      	ldrb	r3, [r3, r2]
 80037e8:	b953      	cbnz	r3, 8003800 <_scanf_chars+0x58>
 80037ea:	2f00      	cmp	r7, #0
 80037ec:	d031      	beq.n	8003852 <_scanf_chars+0xaa>
 80037ee:	e022      	b.n	8003836 <_scanf_chars+0x8e>
 80037f0:	2802      	cmp	r0, #2
 80037f2:	d120      	bne.n	8003836 <_scanf_chars+0x8e>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80037fc:	071b      	lsls	r3, r3, #28
 80037fe:	d41a      	bmi.n	8003836 <_scanf_chars+0x8e>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	3701      	adds	r7, #1
 8003804:	06da      	lsls	r2, r3, #27
 8003806:	bf5e      	ittt	pl
 8003808:	682b      	ldrpl	r3, [r5, #0]
 800380a:	781b      	ldrbpl	r3, [r3, #0]
 800380c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003810:	682a      	ldr	r2, [r5, #0]
 8003812:	686b      	ldr	r3, [r5, #4]
 8003814:	3201      	adds	r2, #1
 8003816:	602a      	str	r2, [r5, #0]
 8003818:	68a2      	ldr	r2, [r4, #8]
 800381a:	3b01      	subs	r3, #1
 800381c:	3a01      	subs	r2, #1
 800381e:	606b      	str	r3, [r5, #4]
 8003820:	60a2      	str	r2, [r4, #8]
 8003822:	b142      	cbz	r2, 8003836 <_scanf_chars+0x8e>
 8003824:	2b00      	cmp	r3, #0
 8003826:	dcd7      	bgt.n	80037d8 <_scanf_chars+0x30>
 8003828:	4629      	mov	r1, r5
 800382a:	4640      	mov	r0, r8
 800382c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003830:	4798      	blx	r3
 8003832:	2800      	cmp	r0, #0
 8003834:	d0d0      	beq.n	80037d8 <_scanf_chars+0x30>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	f013 0310 	ands.w	r3, r3, #16
 800383c:	d105      	bne.n	800384a <_scanf_chars+0xa2>
 800383e:	68e2      	ldr	r2, [r4, #12]
 8003840:	3201      	adds	r2, #1
 8003842:	60e2      	str	r2, [r4, #12]
 8003844:	69a2      	ldr	r2, [r4, #24]
 8003846:	b102      	cbz	r2, 800384a <_scanf_chars+0xa2>
 8003848:	7033      	strb	r3, [r6, #0]
 800384a:	2000      	movs	r0, #0
 800384c:	6923      	ldr	r3, [r4, #16]
 800384e:	443b      	add	r3, r7
 8003850:	6123      	str	r3, [r4, #16]
 8003852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003856:	bf00      	nop
 8003858:	08003e36 	.word	0x08003e36

0800385c <_scanf_i>:
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	460c      	mov	r4, r1
 8003862:	4698      	mov	r8, r3
 8003864:	4b72      	ldr	r3, [pc, #456]	@ (8003a30 <_scanf_i+0x1d4>)
 8003866:	b087      	sub	sp, #28
 8003868:	4682      	mov	sl, r0
 800386a:	4616      	mov	r6, r2
 800386c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003870:	ab03      	add	r3, sp, #12
 8003872:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003876:	4b6f      	ldr	r3, [pc, #444]	@ (8003a34 <_scanf_i+0x1d8>)
 8003878:	69a1      	ldr	r1, [r4, #24]
 800387a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a38 <_scanf_i+0x1dc>)
 800387c:	4627      	mov	r7, r4
 800387e:	2903      	cmp	r1, #3
 8003880:	bf08      	it	eq
 8003882:	461a      	moveq	r2, r3
 8003884:	68a3      	ldr	r3, [r4, #8]
 8003886:	9201      	str	r2, [sp, #4]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800388e:	bf81      	itttt	hi
 8003890:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003894:	eb03 0905 	addhi.w	r9, r3, r5
 8003898:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800389c:	60a3      	strhi	r3, [r4, #8]
 800389e:	f857 3b1c 	ldr.w	r3, [r7], #28
 80038a2:	bf98      	it	ls
 80038a4:	f04f 0900 	movls.w	r9, #0
 80038a8:	463d      	mov	r5, r7
 80038aa:	f04f 0b00 	mov.w	fp, #0
 80038ae:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	6831      	ldr	r1, [r6, #0]
 80038b6:	ab03      	add	r3, sp, #12
 80038b8:	2202      	movs	r2, #2
 80038ba:	7809      	ldrb	r1, [r1, #0]
 80038bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80038c0:	f000 f940 	bl	8003b44 <memchr>
 80038c4:	b328      	cbz	r0, 8003912 <_scanf_i+0xb6>
 80038c6:	f1bb 0f01 	cmp.w	fp, #1
 80038ca:	d159      	bne.n	8003980 <_scanf_i+0x124>
 80038cc:	6862      	ldr	r2, [r4, #4]
 80038ce:	b92a      	cbnz	r2, 80038dc <_scanf_i+0x80>
 80038d0:	2108      	movs	r1, #8
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	6061      	str	r1, [r4, #4]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038da:	6022      	str	r2, [r4, #0]
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80038e2:	6022      	str	r2, [r4, #0]
 80038e4:	68a2      	ldr	r2, [r4, #8]
 80038e6:	1e51      	subs	r1, r2, #1
 80038e8:	60a1      	str	r1, [r4, #8]
 80038ea:	b192      	cbz	r2, 8003912 <_scanf_i+0xb6>
 80038ec:	6832      	ldr	r2, [r6, #0]
 80038ee:	1c51      	adds	r1, r2, #1
 80038f0:	6031      	str	r1, [r6, #0]
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	f805 2b01 	strb.w	r2, [r5], #1
 80038f8:	6872      	ldr	r2, [r6, #4]
 80038fa:	3a01      	subs	r2, #1
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	6072      	str	r2, [r6, #4]
 8003900:	dc07      	bgt.n	8003912 <_scanf_i+0xb6>
 8003902:	4631      	mov	r1, r6
 8003904:	4650      	mov	r0, sl
 8003906:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800390a:	4790      	blx	r2
 800390c:	2800      	cmp	r0, #0
 800390e:	f040 8085 	bne.w	8003a1c <_scanf_i+0x1c0>
 8003912:	f10b 0b01 	add.w	fp, fp, #1
 8003916:	f1bb 0f03 	cmp.w	fp, #3
 800391a:	d1cb      	bne.n	80038b4 <_scanf_i+0x58>
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	b90b      	cbnz	r3, 8003924 <_scanf_i+0xc8>
 8003920:	230a      	movs	r3, #10
 8003922:	6063      	str	r3, [r4, #4]
 8003924:	6863      	ldr	r3, [r4, #4]
 8003926:	4945      	ldr	r1, [pc, #276]	@ (8003a3c <_scanf_i+0x1e0>)
 8003928:	6960      	ldr	r0, [r4, #20]
 800392a:	1ac9      	subs	r1, r1, r3
 800392c:	f000 f888 	bl	8003a40 <__sccl>
 8003930:	f04f 0b00 	mov.w	fp, #0
 8003934:	68a3      	ldr	r3, [r4, #8]
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03d      	beq.n	80039b8 <_scanf_i+0x15c>
 800393c:	6831      	ldr	r1, [r6, #0]
 800393e:	6960      	ldr	r0, [r4, #20]
 8003940:	f891 c000 	ldrb.w	ip, [r1]
 8003944:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003948:	2800      	cmp	r0, #0
 800394a:	d035      	beq.n	80039b8 <_scanf_i+0x15c>
 800394c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8003950:	d124      	bne.n	800399c <_scanf_i+0x140>
 8003952:	0510      	lsls	r0, r2, #20
 8003954:	d522      	bpl.n	800399c <_scanf_i+0x140>
 8003956:	f10b 0b01 	add.w	fp, fp, #1
 800395a:	f1b9 0f00 	cmp.w	r9, #0
 800395e:	d003      	beq.n	8003968 <_scanf_i+0x10c>
 8003960:	3301      	adds	r3, #1
 8003962:	f109 39ff 	add.w	r9, r9, #4294967295
 8003966:	60a3      	str	r3, [r4, #8]
 8003968:	6873      	ldr	r3, [r6, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	6073      	str	r3, [r6, #4]
 8003970:	dd1b      	ble.n	80039aa <_scanf_i+0x14e>
 8003972:	6833      	ldr	r3, [r6, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	68a3      	ldr	r3, [r4, #8]
 800397a:	3b01      	subs	r3, #1
 800397c:	60a3      	str	r3, [r4, #8]
 800397e:	e7d9      	b.n	8003934 <_scanf_i+0xd8>
 8003980:	f1bb 0f02 	cmp.w	fp, #2
 8003984:	d1ae      	bne.n	80038e4 <_scanf_i+0x88>
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800398c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003990:	d1bf      	bne.n	8003912 <_scanf_i+0xb6>
 8003992:	2110      	movs	r1, #16
 8003994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003998:	6061      	str	r1, [r4, #4]
 800399a:	e7a2      	b.n	80038e2 <_scanf_i+0x86>
 800399c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80039a0:	6022      	str	r2, [r4, #0]
 80039a2:	780b      	ldrb	r3, [r1, #0]
 80039a4:	f805 3b01 	strb.w	r3, [r5], #1
 80039a8:	e7de      	b.n	8003968 <_scanf_i+0x10c>
 80039aa:	4631      	mov	r1, r6
 80039ac:	4650      	mov	r0, sl
 80039ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80039b2:	4798      	blx	r3
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d0df      	beq.n	8003978 <_scanf_i+0x11c>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	05d9      	lsls	r1, r3, #23
 80039bc:	d50d      	bpl.n	80039da <_scanf_i+0x17e>
 80039be:	42bd      	cmp	r5, r7
 80039c0:	d909      	bls.n	80039d6 <_scanf_i+0x17a>
 80039c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80039c6:	4632      	mov	r2, r6
 80039c8:	4650      	mov	r0, sl
 80039ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80039ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80039d2:	4798      	blx	r3
 80039d4:	464d      	mov	r5, r9
 80039d6:	42bd      	cmp	r5, r7
 80039d8:	d028      	beq.n	8003a2c <_scanf_i+0x1d0>
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	f012 0210 	ands.w	r2, r2, #16
 80039e0:	d113      	bne.n	8003a0a <_scanf_i+0x1ae>
 80039e2:	702a      	strb	r2, [r5, #0]
 80039e4:	4639      	mov	r1, r7
 80039e6:	6863      	ldr	r3, [r4, #4]
 80039e8:	4650      	mov	r0, sl
 80039ea:	9e01      	ldr	r6, [sp, #4]
 80039ec:	47b0      	blx	r6
 80039ee:	f8d8 3000 	ldr.w	r3, [r8]
 80039f2:	6821      	ldr	r1, [r4, #0]
 80039f4:	1d1a      	adds	r2, r3, #4
 80039f6:	f8c8 2000 	str.w	r2, [r8]
 80039fa:	f011 0f20 	tst.w	r1, #32
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	d00f      	beq.n	8003a22 <_scanf_i+0x1c6>
 8003a02:	6018      	str	r0, [r3, #0]
 8003a04:	68e3      	ldr	r3, [r4, #12]
 8003a06:	3301      	adds	r3, #1
 8003a08:	60e3      	str	r3, [r4, #12]
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	6923      	ldr	r3, [r4, #16]
 8003a0e:	1bed      	subs	r5, r5, r7
 8003a10:	445d      	add	r5, fp
 8003a12:	442b      	add	r3, r5
 8003a14:	6123      	str	r3, [r4, #16]
 8003a16:	b007      	add	sp, #28
 8003a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a1c:	f04f 0b00 	mov.w	fp, #0
 8003a20:	e7ca      	b.n	80039b8 <_scanf_i+0x15c>
 8003a22:	07ca      	lsls	r2, r1, #31
 8003a24:	bf4c      	ite	mi
 8003a26:	8018      	strhmi	r0, [r3, #0]
 8003a28:	6018      	strpl	r0, [r3, #0]
 8003a2a:	e7eb      	b.n	8003a04 <_scanf_i+0x1a8>
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	e7f2      	b.n	8003a16 <_scanf_i+0x1ba>
 8003a30:	08003de0 	.word	0x08003de0
 8003a34:	08003ccd 	.word	0x08003ccd
 8003a38:	08003dad 	.word	0x08003dad
 8003a3c:	08003e2a 	.word	0x08003e2a

08003a40 <__sccl>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	780b      	ldrb	r3, [r1, #0]
 8003a44:	4604      	mov	r4, r0
 8003a46:	2b5e      	cmp	r3, #94	@ 0x5e
 8003a48:	bf0b      	itete	eq
 8003a4a:	784b      	ldrbeq	r3, [r1, #1]
 8003a4c:	1c4a      	addne	r2, r1, #1
 8003a4e:	1c8a      	addeq	r2, r1, #2
 8003a50:	2100      	movne	r1, #0
 8003a52:	bf08      	it	eq
 8003a54:	2101      	moveq	r1, #1
 8003a56:	3801      	subs	r0, #1
 8003a58:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003a5c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003a60:	42a8      	cmp	r0, r5
 8003a62:	d1fb      	bne.n	8003a5c <__sccl+0x1c>
 8003a64:	b90b      	cbnz	r3, 8003a6a <__sccl+0x2a>
 8003a66:	1e50      	subs	r0, r2, #1
 8003a68:	bd70      	pop	{r4, r5, r6, pc}
 8003a6a:	f081 0101 	eor.w	r1, r1, #1
 8003a6e:	4610      	mov	r0, r2
 8003a70:	54e1      	strb	r1, [r4, r3]
 8003a72:	4602      	mov	r2, r0
 8003a74:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003a78:	2d2d      	cmp	r5, #45	@ 0x2d
 8003a7a:	d005      	beq.n	8003a88 <__sccl+0x48>
 8003a7c:	2d5d      	cmp	r5, #93	@ 0x5d
 8003a7e:	d016      	beq.n	8003aae <__sccl+0x6e>
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	d0f1      	beq.n	8003a68 <__sccl+0x28>
 8003a84:	462b      	mov	r3, r5
 8003a86:	e7f2      	b.n	8003a6e <__sccl+0x2e>
 8003a88:	7846      	ldrb	r6, [r0, #1]
 8003a8a:	2e5d      	cmp	r6, #93	@ 0x5d
 8003a8c:	d0fa      	beq.n	8003a84 <__sccl+0x44>
 8003a8e:	42b3      	cmp	r3, r6
 8003a90:	dcf8      	bgt.n	8003a84 <__sccl+0x44>
 8003a92:	461a      	mov	r2, r3
 8003a94:	3002      	adds	r0, #2
 8003a96:	3201      	adds	r2, #1
 8003a98:	4296      	cmp	r6, r2
 8003a9a:	54a1      	strb	r1, [r4, r2]
 8003a9c:	dcfb      	bgt.n	8003a96 <__sccl+0x56>
 8003a9e:	1af2      	subs	r2, r6, r3
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	42b3      	cmp	r3, r6
 8003aa4:	bfa8      	it	ge
 8003aa6:	2200      	movge	r2, #0
 8003aa8:	1c5d      	adds	r5, r3, #1
 8003aaa:	18ab      	adds	r3, r5, r2
 8003aac:	e7e1      	b.n	8003a72 <__sccl+0x32>
 8003aae:	4610      	mov	r0, r2
 8003ab0:	e7da      	b.n	8003a68 <__sccl+0x28>

08003ab2 <__submore>:
 8003ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003aba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003abe:	4299      	cmp	r1, r3
 8003ac0:	d11b      	bne.n	8003afa <__submore+0x48>
 8003ac2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ac6:	f7ff fc19 	bl	80032fc <_malloc_r>
 8003aca:	b918      	cbnz	r0, 8003ad4 <__submore+0x22>
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ad8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003ada:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8003ade:	6360      	str	r0, [r4, #52]	@ 0x34
 8003ae0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8003ae4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003ae8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8003aec:	7043      	strb	r3, [r0, #1]
 8003aee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003af2:	7003      	strb	r3, [r0, #0]
 8003af4:	6020      	str	r0, [r4, #0]
 8003af6:	2000      	movs	r0, #0
 8003af8:	e7ea      	b.n	8003ad0 <__submore+0x1e>
 8003afa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003afc:	0077      	lsls	r7, r6, #1
 8003afe:	463a      	mov	r2, r7
 8003b00:	f000 f83c 	bl	8003b7c <_realloc_r>
 8003b04:	4605      	mov	r5, r0
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d0e0      	beq.n	8003acc <__submore+0x1a>
 8003b0a:	eb00 0806 	add.w	r8, r0, r6
 8003b0e:	4601      	mov	r1, r0
 8003b10:	4632      	mov	r2, r6
 8003b12:	4640      	mov	r0, r8
 8003b14:	f000 f824 	bl	8003b60 <memcpy>
 8003b18:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003b1c:	f8c4 8000 	str.w	r8, [r4]
 8003b20:	e7e9      	b.n	8003af6 <__submore+0x44>
	...

08003b24 <_sbrk_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	2300      	movs	r3, #0
 8003b28:	4d05      	ldr	r5, [pc, #20]	@ (8003b40 <_sbrk_r+0x1c>)
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	602b      	str	r3, [r5, #0]
 8003b30:	f7fc fdba 	bl	80006a8 <_sbrk>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	d102      	bne.n	8003b3e <_sbrk_r+0x1a>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	b103      	cbz	r3, 8003b3e <_sbrk_r+0x1a>
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	200002a8 	.word	0x200002a8

08003b44 <memchr>:
 8003b44:	4603      	mov	r3, r0
 8003b46:	b510      	push	{r4, lr}
 8003b48:	b2c9      	uxtb	r1, r1
 8003b4a:	4402      	add	r2, r0
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	d101      	bne.n	8003b56 <memchr+0x12>
 8003b52:	2000      	movs	r0, #0
 8003b54:	e003      	b.n	8003b5e <memchr+0x1a>
 8003b56:	7804      	ldrb	r4, [r0, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	428c      	cmp	r4, r1
 8003b5c:	d1f6      	bne.n	8003b4c <memchr+0x8>
 8003b5e:	bd10      	pop	{r4, pc}

08003b60 <memcpy>:
 8003b60:	440a      	add	r2, r1
 8003b62:	4291      	cmp	r1, r2
 8003b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b68:	d100      	bne.n	8003b6c <memcpy+0xc>
 8003b6a:	4770      	bx	lr
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b72:	4291      	cmp	r1, r2
 8003b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b78:	d1f9      	bne.n	8003b6e <memcpy+0xe>
 8003b7a:	bd10      	pop	{r4, pc}

08003b7c <_realloc_r>:
 8003b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b80:	4680      	mov	r8, r0
 8003b82:	4615      	mov	r5, r2
 8003b84:	460c      	mov	r4, r1
 8003b86:	b921      	cbnz	r1, 8003b92 <_realloc_r+0x16>
 8003b88:	4611      	mov	r1, r2
 8003b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8e:	f7ff bbb5 	b.w	80032fc <_malloc_r>
 8003b92:	b92a      	cbnz	r2, 8003ba0 <_realloc_r+0x24>
 8003b94:	f7ff fb48 	bl	8003228 <_free_r>
 8003b98:	2400      	movs	r4, #0
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba0:	f000 f906 	bl	8003db0 <_malloc_usable_size_r>
 8003ba4:	4285      	cmp	r5, r0
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	d802      	bhi.n	8003bb0 <_realloc_r+0x34>
 8003baa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003bae:	d8f4      	bhi.n	8003b9a <_realloc_r+0x1e>
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	f7ff fba2 	bl	80032fc <_malloc_r>
 8003bb8:	4607      	mov	r7, r0
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d0ec      	beq.n	8003b98 <_realloc_r+0x1c>
 8003bbe:	42b5      	cmp	r5, r6
 8003bc0:	462a      	mov	r2, r5
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	bf28      	it	cs
 8003bc6:	4632      	movcs	r2, r6
 8003bc8:	f7ff ffca 	bl	8003b60 <memcpy>
 8003bcc:	4621      	mov	r1, r4
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f7ff fb2a 	bl	8003228 <_free_r>
 8003bd4:	463c      	mov	r4, r7
 8003bd6:	e7e0      	b.n	8003b9a <_realloc_r+0x1e>

08003bd8 <_strtol_l.constprop.0>:
 8003bd8:	2b24      	cmp	r3, #36	@ 0x24
 8003bda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bde:	4686      	mov	lr, r0
 8003be0:	4690      	mov	r8, r2
 8003be2:	d801      	bhi.n	8003be8 <_strtol_l.constprop.0+0x10>
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d106      	bne.n	8003bf6 <_strtol_l.constprop.0+0x1e>
 8003be8:	f7ff faf2 	bl	80031d0 <__errno>
 8003bec:	2316      	movs	r3, #22
 8003bee:	6003      	str	r3, [r0, #0]
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf6:	460d      	mov	r5, r1
 8003bf8:	4833      	ldr	r0, [pc, #204]	@ (8003cc8 <_strtol_l.constprop.0+0xf0>)
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c00:	5d06      	ldrb	r6, [r0, r4]
 8003c02:	f016 0608 	ands.w	r6, r6, #8
 8003c06:	d1f8      	bne.n	8003bfa <_strtol_l.constprop.0+0x22>
 8003c08:	2c2d      	cmp	r4, #45	@ 0x2d
 8003c0a:	d12d      	bne.n	8003c68 <_strtol_l.constprop.0+0x90>
 8003c0c:	2601      	movs	r6, #1
 8003c0e:	782c      	ldrb	r4, [r5, #0]
 8003c10:	1c95      	adds	r5, r2, #2
 8003c12:	f033 0210 	bics.w	r2, r3, #16
 8003c16:	d109      	bne.n	8003c2c <_strtol_l.constprop.0+0x54>
 8003c18:	2c30      	cmp	r4, #48	@ 0x30
 8003c1a:	d12a      	bne.n	8003c72 <_strtol_l.constprop.0+0x9a>
 8003c1c:	782a      	ldrb	r2, [r5, #0]
 8003c1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003c22:	2a58      	cmp	r2, #88	@ 0x58
 8003c24:	d125      	bne.n	8003c72 <_strtol_l.constprop.0+0x9a>
 8003c26:	2310      	movs	r3, #16
 8003c28:	786c      	ldrb	r4, [r5, #1]
 8003c2a:	3502      	adds	r5, #2
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003c32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003c36:	fbbc f9f3 	udiv	r9, ip, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8003c40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003c44:	2f09      	cmp	r7, #9
 8003c46:	d81b      	bhi.n	8003c80 <_strtol_l.constprop.0+0xa8>
 8003c48:	463c      	mov	r4, r7
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	dd27      	ble.n	8003c9e <_strtol_l.constprop.0+0xc6>
 8003c4e:	1c57      	adds	r7, r2, #1
 8003c50:	d007      	beq.n	8003c62 <_strtol_l.constprop.0+0x8a>
 8003c52:	4581      	cmp	r9, r0
 8003c54:	d320      	bcc.n	8003c98 <_strtol_l.constprop.0+0xc0>
 8003c56:	d101      	bne.n	8003c5c <_strtol_l.constprop.0+0x84>
 8003c58:	45a2      	cmp	sl, r4
 8003c5a:	db1d      	blt.n	8003c98 <_strtol_l.constprop.0+0xc0>
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	fb00 4003 	mla	r0, r0, r3, r4
 8003c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c66:	e7eb      	b.n	8003c40 <_strtol_l.constprop.0+0x68>
 8003c68:	2c2b      	cmp	r4, #43	@ 0x2b
 8003c6a:	bf04      	itt	eq
 8003c6c:	782c      	ldrbeq	r4, [r5, #0]
 8003c6e:	1c95      	addeq	r5, r2, #2
 8003c70:	e7cf      	b.n	8003c12 <_strtol_l.constprop.0+0x3a>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1da      	bne.n	8003c2c <_strtol_l.constprop.0+0x54>
 8003c76:	2c30      	cmp	r4, #48	@ 0x30
 8003c78:	bf0c      	ite	eq
 8003c7a:	2308      	moveq	r3, #8
 8003c7c:	230a      	movne	r3, #10
 8003c7e:	e7d5      	b.n	8003c2c <_strtol_l.constprop.0+0x54>
 8003c80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003c84:	2f19      	cmp	r7, #25
 8003c86:	d801      	bhi.n	8003c8c <_strtol_l.constprop.0+0xb4>
 8003c88:	3c37      	subs	r4, #55	@ 0x37
 8003c8a:	e7de      	b.n	8003c4a <_strtol_l.constprop.0+0x72>
 8003c8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003c90:	2f19      	cmp	r7, #25
 8003c92:	d804      	bhi.n	8003c9e <_strtol_l.constprop.0+0xc6>
 8003c94:	3c57      	subs	r4, #87	@ 0x57
 8003c96:	e7d8      	b.n	8003c4a <_strtol_l.constprop.0+0x72>
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9c:	e7e1      	b.n	8003c62 <_strtol_l.constprop.0+0x8a>
 8003c9e:	1c53      	adds	r3, r2, #1
 8003ca0:	d108      	bne.n	8003cb4 <_strtol_l.constprop.0+0xdc>
 8003ca2:	2322      	movs	r3, #34	@ 0x22
 8003ca4:	4660      	mov	r0, ip
 8003ca6:	f8ce 3000 	str.w	r3, [lr]
 8003caa:	f1b8 0f00 	cmp.w	r8, #0
 8003cae:	d0a0      	beq.n	8003bf2 <_strtol_l.constprop.0+0x1a>
 8003cb0:	1e69      	subs	r1, r5, #1
 8003cb2:	e006      	b.n	8003cc2 <_strtol_l.constprop.0+0xea>
 8003cb4:	b106      	cbz	r6, 8003cb8 <_strtol_l.constprop.0+0xe0>
 8003cb6:	4240      	negs	r0, r0
 8003cb8:	f1b8 0f00 	cmp.w	r8, #0
 8003cbc:	d099      	beq.n	8003bf2 <_strtol_l.constprop.0+0x1a>
 8003cbe:	2a00      	cmp	r2, #0
 8003cc0:	d1f6      	bne.n	8003cb0 <_strtol_l.constprop.0+0xd8>
 8003cc2:	f8c8 1000 	str.w	r1, [r8]
 8003cc6:	e794      	b.n	8003bf2 <_strtol_l.constprop.0+0x1a>
 8003cc8:	08003e36 	.word	0x08003e36

08003ccc <_strtol_r>:
 8003ccc:	f7ff bf84 	b.w	8003bd8 <_strtol_l.constprop.0>

08003cd0 <_strtoul_l.constprop.0>:
 8003cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cd4:	4686      	mov	lr, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	4e33      	ldr	r6, [pc, #204]	@ (8003da8 <_strtoul_l.constprop.0+0xd8>)
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ce0:	5d37      	ldrb	r7, [r6, r4]
 8003ce2:	f017 0708 	ands.w	r7, r7, #8
 8003ce6:	d1f8      	bne.n	8003cda <_strtoul_l.constprop.0+0xa>
 8003ce8:	2c2d      	cmp	r4, #45	@ 0x2d
 8003cea:	d12f      	bne.n	8003d4c <_strtoul_l.constprop.0+0x7c>
 8003cec:	2701      	movs	r7, #1
 8003cee:	782c      	ldrb	r4, [r5, #0]
 8003cf0:	1c85      	adds	r5, r0, #2
 8003cf2:	f033 0010 	bics.w	r0, r3, #16
 8003cf6:	d109      	bne.n	8003d0c <_strtoul_l.constprop.0+0x3c>
 8003cf8:	2c30      	cmp	r4, #48	@ 0x30
 8003cfa:	d12c      	bne.n	8003d56 <_strtoul_l.constprop.0+0x86>
 8003cfc:	7828      	ldrb	r0, [r5, #0]
 8003cfe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003d02:	2858      	cmp	r0, #88	@ 0x58
 8003d04:	d127      	bne.n	8003d56 <_strtoul_l.constprop.0+0x86>
 8003d06:	2310      	movs	r3, #16
 8003d08:	786c      	ldrb	r4, [r5, #1]
 8003d0a:	3502      	adds	r5, #2
 8003d0c:	f04f 38ff 	mov.w	r8, #4294967295
 8003d10:	fbb8 f8f3 	udiv	r8, r8, r3
 8003d14:	2600      	movs	r6, #0
 8003d16:	fb03 f908 	mul.w	r9, r3, r8
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	ea6f 0909 	mvn.w	r9, r9
 8003d20:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8003d24:	f1bc 0f09 	cmp.w	ip, #9
 8003d28:	d81c      	bhi.n	8003d64 <_strtoul_l.constprop.0+0x94>
 8003d2a:	4664      	mov	r4, ip
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	dd2a      	ble.n	8003d86 <_strtoul_l.constprop.0+0xb6>
 8003d30:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003d34:	d007      	beq.n	8003d46 <_strtoul_l.constprop.0+0x76>
 8003d36:	4580      	cmp	r8, r0
 8003d38:	d322      	bcc.n	8003d80 <_strtoul_l.constprop.0+0xb0>
 8003d3a:	d101      	bne.n	8003d40 <_strtoul_l.constprop.0+0x70>
 8003d3c:	45a1      	cmp	r9, r4
 8003d3e:	db1f      	blt.n	8003d80 <_strtoul_l.constprop.0+0xb0>
 8003d40:	2601      	movs	r6, #1
 8003d42:	fb00 4003 	mla	r0, r0, r3, r4
 8003d46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d4a:	e7e9      	b.n	8003d20 <_strtoul_l.constprop.0+0x50>
 8003d4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8003d4e:	bf04      	itt	eq
 8003d50:	782c      	ldrbeq	r4, [r5, #0]
 8003d52:	1c85      	addeq	r5, r0, #2
 8003d54:	e7cd      	b.n	8003cf2 <_strtoul_l.constprop.0+0x22>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1d8      	bne.n	8003d0c <_strtoul_l.constprop.0+0x3c>
 8003d5a:	2c30      	cmp	r4, #48	@ 0x30
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2308      	moveq	r3, #8
 8003d60:	230a      	movne	r3, #10
 8003d62:	e7d3      	b.n	8003d0c <_strtoul_l.constprop.0+0x3c>
 8003d64:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003d68:	f1bc 0f19 	cmp.w	ip, #25
 8003d6c:	d801      	bhi.n	8003d72 <_strtoul_l.constprop.0+0xa2>
 8003d6e:	3c37      	subs	r4, #55	@ 0x37
 8003d70:	e7dc      	b.n	8003d2c <_strtoul_l.constprop.0+0x5c>
 8003d72:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003d76:	f1bc 0f19 	cmp.w	ip, #25
 8003d7a:	d804      	bhi.n	8003d86 <_strtoul_l.constprop.0+0xb6>
 8003d7c:	3c57      	subs	r4, #87	@ 0x57
 8003d7e:	e7d5      	b.n	8003d2c <_strtoul_l.constprop.0+0x5c>
 8003d80:	f04f 36ff 	mov.w	r6, #4294967295
 8003d84:	e7df      	b.n	8003d46 <_strtoul_l.constprop.0+0x76>
 8003d86:	1c73      	adds	r3, r6, #1
 8003d88:	d106      	bne.n	8003d98 <_strtoul_l.constprop.0+0xc8>
 8003d8a:	2322      	movs	r3, #34	@ 0x22
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f8ce 3000 	str.w	r3, [lr]
 8003d92:	b932      	cbnz	r2, 8003da2 <_strtoul_l.constprop.0+0xd2>
 8003d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d98:	b107      	cbz	r7, 8003d9c <_strtoul_l.constprop.0+0xcc>
 8003d9a:	4240      	negs	r0, r0
 8003d9c:	2a00      	cmp	r2, #0
 8003d9e:	d0f9      	beq.n	8003d94 <_strtoul_l.constprop.0+0xc4>
 8003da0:	b106      	cbz	r6, 8003da4 <_strtoul_l.constprop.0+0xd4>
 8003da2:	1e69      	subs	r1, r5, #1
 8003da4:	6011      	str	r1, [r2, #0]
 8003da6:	e7f5      	b.n	8003d94 <_strtoul_l.constprop.0+0xc4>
 8003da8:	08003e36 	.word	0x08003e36

08003dac <_strtoul_r>:
 8003dac:	f7ff bf90 	b.w	8003cd0 <_strtoul_l.constprop.0>

08003db0 <_malloc_usable_size_r>:
 8003db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db4:	1f18      	subs	r0, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	bfbc      	itt	lt
 8003dba:	580b      	ldrlt	r3, [r1, r0]
 8003dbc:	18c0      	addlt	r0, r0, r3
 8003dbe:	4770      	bx	lr

08003dc0 <_init>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr

08003dcc <_fini>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr
